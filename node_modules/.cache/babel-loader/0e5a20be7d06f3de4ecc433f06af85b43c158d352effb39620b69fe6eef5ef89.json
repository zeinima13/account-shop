{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { shallowRef, isVNode } from 'vue';\nimport { flattedChildren } from '../../utils/vue/vnode.mjs';\nvar getOrderedChildren = function getOrderedChildren(vm, childComponentName, children) {\n  var nodes = flattedChildren(vm.subTree).filter(function (n) {\n    var _a;\n    return isVNode(n) && ((_a = n.type) == null ? void 0 : _a.name) === childComponentName && !!n.component;\n  });\n  var uids = nodes.map(function (n) {\n    return n.component.uid;\n  });\n  return uids.map(function (uid) {\n    return children[uid];\n  }).filter(function (p) {\n    return !!p;\n  });\n};\nvar useOrderedChildren = function useOrderedChildren(vm, childComponentName) {\n  var children = {};\n  var orderedChildren = shallowRef([]);\n  var addChild = function addChild(child) {\n    children[child.uid] = child;\n    orderedChildren.value = getOrderedChildren(vm, childComponentName, children);\n  };\n  var removeChild = function removeChild(uid) {\n    delete children[uid];\n    orderedChildren.value = orderedChildren.value.filter(function (children2) {\n      return children2.uid !== uid;\n    });\n  };\n  return {\n    children: orderedChildren,\n    addChild: addChild,\n    removeChild: removeChild\n  };\n};\nexport { useOrderedChildren };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}