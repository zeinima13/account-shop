{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { inject, getCurrentInstance, computed, watch, nextTick } from 'vue';\nimport { checkboxGroupContextKey } from '../constants.mjs';\nimport { useFormItem } from '../../../form/src/hooks/use-form-item.mjs';\nimport { debugWarn } from '../../../../utils/error.mjs';\nvar useCheckboxEvent = function useCheckboxEvent(props, _ref) {\n  var model = _ref.model,\n    isLimitExceeded = _ref.isLimitExceeded,\n    hasOwnLabel = _ref.hasOwnLabel,\n    isDisabled = _ref.isDisabled,\n    isLabeledByFormItem = _ref.isLabeledByFormItem;\n  var checkboxGroup = inject(checkboxGroupContextKey, void 0);\n  var _useFormItem = useFormItem(),\n    formItem = _useFormItem.formItem;\n  var _getCurrentInstance = getCurrentInstance(),\n    emit = _getCurrentInstance.emit;\n  function getLabeledValue(value) {\n    var _a, _b, _c, _d;\n    return [true, props.trueValue, props.trueLabel].includes(value) ? (_b = (_a = props.trueValue) != null ? _a : props.trueLabel) != null ? _b : true : (_d = (_c = props.falseValue) != null ? _c : props.falseLabel) != null ? _d : false;\n  }\n  function emitChangeEvent(checked, e) {\n    emit(\"change\", getLabeledValue(checked), e);\n  }\n  function handleChange(e) {\n    if (isLimitExceeded.value) return;\n    var target = e.target;\n    emit(\"change\", getLabeledValue(target.checked), e);\n  }\n  function onClickRoot(_x) {\n    return _onClickRoot.apply(this, arguments);\n  }\n  function _onClickRoot() {\n    _onClickRoot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(e) {\n      var eventTargets, hasLabel;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!isLimitExceeded.value) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 2:\n            if (!(!hasOwnLabel.value && !isDisabled.value && isLabeledByFormItem.value)) {\n              _context.next = 10;\n              break;\n            }\n            eventTargets = e.composedPath();\n            hasLabel = eventTargets.some(function (item) {\n              return item.tagName === \"LABEL\";\n            });\n            if (hasLabel) {\n              _context.next = 10;\n              break;\n            }\n            model.value = getLabeledValue([false, props.falseValue, props.falseLabel].includes(model.value));\n            _context.next = 9;\n            return nextTick();\n          case 9:\n            emitChangeEvent(model.value, e);\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _onClickRoot.apply(this, arguments);\n  }\n  var validateEvent = computed(function () {\n    return (checkboxGroup == null ? void 0 : checkboxGroup.validateEvent) || props.validateEvent;\n  });\n  watch(function () {\n    return props.modelValue;\n  }, function () {\n    if (validateEvent.value) {\n      formItem == null ? void 0 : formItem.validate(\"change\")[\"catch\"](function (err) {\n        return debugWarn(err);\n      });\n    }\n  });\n  return {\n    handleChange: handleChange,\n    onClickRoot: onClickRoot\n  };\n};\nexport { useCheckboxEvent };","map":{"version":3,"names":["useCheckboxEvent","props","_ref","model","isLimitExceeded","hasOwnLabel","isDisabled","isLabeledByFormItem","checkboxGroup","inject","checkboxGroupContextKey","_useFormItem","useFormItem","formItem","_getCurrentInstance","getCurrentInstance","emit","getLabeledValue","value","_a","_b","_c","_d","trueValue","trueLabel","includes","falseValue","falseLabel","emitChangeEvent","checked","e","handleChange","target","onClickRoot","_x","_onClickRoot","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","eventTargets","hasLabel","wrap","_callee$","_context","prev","next","abrupt","composedPath","some","item","tagName","nextTick","stop","validateEvent","computed","watch","modelValue","validate","err","debugWarn"],"sources":["../../../../../../../packages/components/checkbox/src/composables/use-checkbox-event.ts"],"sourcesContent":["import { computed, getCurrentInstance, inject, nextTick, watch } from 'vue'\nimport { useFormItem } from '@element-plus/components/form'\nimport { debugWarn } from '@element-plus/utils'\nimport { checkboxGroupContextKey } from '../constants'\n\nimport type { useFormItemInputId } from '@element-plus/components/form'\nimport type { CheckboxProps } from '../checkbox'\nimport type {\n  CheckboxDisabled,\n  CheckboxModel,\n  CheckboxStatus,\n} from '../composables'\n\nexport const useCheckboxEvent = (\n  props: CheckboxProps,\n  {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  }: Pick<CheckboxModel, 'model' | 'isLimitExceeded'> &\n    Pick<CheckboxStatus, 'hasOwnLabel'> &\n    Pick<CheckboxDisabled, 'isDisabled'> &\n    Pick<ReturnType<typeof useFormItemInputId>, 'isLabeledByFormItem'>\n) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n  const { formItem } = useFormItem()\n  const { emit } = getCurrentInstance()!\n\n  function getLabeledValue(value: string | number | boolean) {\n    return [true, props.trueValue, props.trueLabel].includes(value)\n      ? props.trueValue ?? props.trueLabel ?? true\n      : props.falseValue ?? props.falseLabel ?? false\n  }\n\n  function emitChangeEvent(\n    checked: string | number | boolean,\n    e: InputEvent | MouseEvent\n  ) {\n    emit('change', getLabeledValue(checked), e)\n  }\n\n  function handleChange(e: Event) {\n    if (isLimitExceeded.value) return\n\n    const target = e.target as HTMLInputElement\n    emit('change', getLabeledValue(target.checked), e)\n  }\n\n  async function onClickRoot(e: MouseEvent) {\n    if (isLimitExceeded.value) return\n\n    if (!hasOwnLabel.value && !isDisabled.value && isLabeledByFormItem.value) {\n      // fix: https://github.com/element-plus/element-plus/issues/9981\n      const eventTargets: EventTarget[] = e.composedPath()\n      const hasLabel = eventTargets.some(\n        (item) => (item as HTMLElement).tagName === 'LABEL'\n      )\n      if (!hasLabel) {\n        model.value = getLabeledValue(\n          [false, props.falseValue, props.falseLabel].includes(model.value)\n        )\n        await nextTick()\n        emitChangeEvent(model.value, e)\n      }\n    }\n  }\n\n  const validateEvent = computed(\n    () => checkboxGroup?.validateEvent || props.validateEvent\n  )\n\n  watch(\n    () => props.modelValue,\n    () => {\n      if (validateEvent.value) {\n        formItem?.validate('change').catch((err) => debugWarn(err))\n      }\n    }\n  )\n\n  return {\n    handleChange,\n    onClickRoot,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}