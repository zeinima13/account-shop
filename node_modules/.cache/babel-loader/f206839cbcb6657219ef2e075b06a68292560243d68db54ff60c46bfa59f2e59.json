{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { getCurrentInstance, inject, unref } from 'vue';\nimport { isClient, computedEager } from '@vueuse/core';\nimport { useGetDerivedNamespace } from '../use-namespace/index.mjs';\nimport { debugWarn } from '../../utils/error.mjs';\nvar defaultIdInjection = {\n  prefix: Math.floor(Math.random() * 1e4),\n  current: 0\n};\nvar ID_INJECTION_KEY = Symbol(\"elIdInjection\");\nvar useIdInjection = function useIdInjection() {\n  return getCurrentInstance() ? inject(ID_INJECTION_KEY, defaultIdInjection) : defaultIdInjection;\n};\nvar useId = function useId(deterministicId) {\n  var idInjection = useIdInjection();\n  if (!isClient && idInjection === defaultIdInjection) {\n    debugWarn(\"IdInjection\", \"Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed\\nusage: app.provide(ID_INJECTION_KEY, {\\n  prefix: number,\\n  current: number,\\n})\");\n  }\n  var namespace = useGetDerivedNamespace();\n  var idRef = computedEager(function () {\n    return unref(deterministicId) || \"\".concat(namespace.value, \"-id-\").concat(idInjection.prefix, \"-\").concat(idInjection.current++);\n  });\n  return idRef;\n};\nexport { ID_INJECTION_KEY, useId, useIdInjection };","map":{"version":3,"names":["defaultIdInjection","prefix","Math","floor","random","current","ID_INJECTION_KEY","Symbol","useIdInjection","getCurrentInstance","inject","useId","deterministicId","idInjection","isClient","debugWarn","namespace","useGetDerivedNamespace","idRef","computedEager","unref","concat","value"],"sources":["../../../../../packages/hooks/use-id/index.ts"],"sourcesContent":["import { getCurrentInstance, inject, unref } from 'vue'\nimport { type MaybeRef, computedEager } from '@vueuse/core'\nimport { debugWarn, isClient } from '@element-plus/utils'\nimport { useGetDerivedNamespace } from '../use-namespace'\n\nimport type { InjectionKey, Ref } from 'vue'\n\nexport type ElIdInjectionContext = {\n  prefix: number\n  current: number\n}\n\nconst defaultIdInjection = {\n  prefix: Math.floor(Math.random() * 10000),\n  current: 0,\n}\n\nexport const ID_INJECTION_KEY: InjectionKey<ElIdInjectionContext> =\n  Symbol('elIdInjection')\n\nexport const useIdInjection = (): ElIdInjectionContext => {\n  return getCurrentInstance()\n    ? inject(ID_INJECTION_KEY, defaultIdInjection)\n    : defaultIdInjection\n}\n\nexport const useId = (deterministicId?: MaybeRef<string>): Ref<string> => {\n  const idInjection = useIdInjection()\n  if (!isClient && idInjection === defaultIdInjection) {\n    debugWarn(\n      'IdInjection',\n      `Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed\nusage: app.provide(ID_INJECTION_KEY, {\n  prefix: number,\n  current: number,\n})`\n    )\n  }\n\n  const namespace = useGetDerivedNamespace()\n\n  // NOTE: Here we use `computedEager` to calculate the id value immediately, avoiding inconsistent id generation due to the lazy feature of `computed` when server rendering.\n  const idRef = computedEager(\n    () =>\n      unref(deterministicId) ||\n      `${namespace.value}-id-${idInjection.prefix}-${idInjection.current++}`\n  )\n\n  return idRef\n}\n"],"mappings":";;;;;;;;AAIA,IAAMA,kBAAkB,GAAG;EACzBC,MAAM,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;EACvCC,OAAO,EAAE;AACX,CAAC;AACW,IAACC,gBAAgB,GAAGC,MAAM,CAAC,eAAe;AAC1C,IAACC,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;EAClC,OAAOC,kBAAkB,EAAE,GAAGC,MAAM,CAACJ,gBAAgB,EAAEN,kBAAkB,CAAC,GAAGA,kBAAkB;AACjG;AACY,IAACW,KAAK,GAAG,SAARA,KAAKA,CAAIC,eAAe,EAAK;EACxC,IAAMC,WAAW,GAAGL,cAAc,EAAE;EACpC,IAAI,CAACM,QAAQ,IAAID,WAAW,KAAKb,kBAAkB,EAAE;IACnDe,SAAS,CAAC,aAAa,8MAIxB,CAAC;EACJ;EACE,IAAMC,SAAS,GAAGC,sBAAsB,EAAE;EAC1C,IAAMC,KAAK,GAAGC,aAAa,CAAC;IAAA,OAAMC,KAAK,CAACR,eAAe,CAAC,OAAAS,MAAA,CAAOL,SAAS,CAACM,KAAK,UAAAD,MAAA,CAAOR,WAAW,CAACZ,MAAM,OAAAoB,MAAA,CAAIR,WAAW,CAACR,OAAO,EAAE,CAAE;EAAA,EAAC;EACnI,OAAOa,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}