{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { ref, computed, unref, watch } from 'vue';\nimport { isArray } from '@vue/shared';\nvar useData = function useData(props, _ref) {\n  var expandedRowKeys = _ref.expandedRowKeys,\n    lastRenderedRowIndex = _ref.lastRenderedRowIndex,\n    resetAfterIndex = _ref.resetAfterIndex;\n  var depthMap = ref({});\n  var flattenedData = computed(function () {\n    var depths = {};\n    var data2 = props.data,\n      rowKey = props.rowKey;\n    var _expandedRowKeys = unref(expandedRowKeys);\n    if (!_expandedRowKeys || !_expandedRowKeys.length) return data2;\n    var array = [];\n    var keysSet = /* @__PURE__ */new Set();\n    _expandedRowKeys.forEach(function (x) {\n      return keysSet.add(x);\n    });\n    var copy = data2.slice();\n    copy.forEach(function (x) {\n      return depths[x[rowKey]] = 0;\n    });\n    var _loop = function _loop() {\n      var item = copy.shift();\n      array.push(item);\n      if (keysSet.has(item[rowKey]) && isArray(item.children) && item.children.length > 0) {\n        copy = [].concat(_toConsumableArray(item.children), _toConsumableArray(copy));\n        item.children.forEach(function (child) {\n          return depths[child[rowKey]] = depths[item[rowKey]] + 1;\n        });\n      }\n    };\n    while (copy.length > 0) {\n      _loop();\n    }\n    depthMap.value = depths;\n    return array;\n  });\n  var data = computed(function () {\n    var data2 = props.data,\n      expandColumnKey = props.expandColumnKey;\n    return expandColumnKey ? unref(flattenedData) : data2;\n  });\n  watch(data, function (val, prev) {\n    if (val !== prev) {\n      lastRenderedRowIndex.value = -1;\n      resetAfterIndex(0, true);\n    }\n  });\n  return {\n    data: data,\n    depthMap: depthMap\n  };\n};\nexport { useData };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}