{"ast":null,"code":"import \"core-js/modules/es.number.parse-float.js\";\nimport \"core-js/modules/es.number.parse-int.js\";\nimport { defineComponent, inject, ref, onMounted, onBeforeUnmount, onUpdated, watch, computed, createVNode, Fragment, nextTick } from 'vue';\nimport { useResizeObserver } from '@vueuse/core';\nimport { formContextKey, formItemContextKey } from './constants.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar COMPONENT_NAME = \"ElLabelWrap\";\nvar FormLabelWrap = defineComponent({\n  name: COMPONENT_NAME,\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var formContext = inject(formContextKey, void 0);\n    var formItemContext = inject(formItemContextKey);\n    if (!formItemContext) throwError(COMPONENT_NAME, \"usage: <el-form-item><label-wrap /></el-form-item>\");\n    var ns = useNamespace(\"form\");\n    var el = ref();\n    var computedWidth = ref(0);\n    var getLabelWidth = function getLabelWidth() {\n      var _a;\n      if ((_a = el.value) == null ? void 0 : _a.firstElementChild) {\n        var width = window.getComputedStyle(el.value.firstElementChild).width;\n        return Math.ceil(Number.parseFloat(width));\n      } else {\n        return 0;\n      }\n    };\n    var updateLabelWidth = function updateLabelWidth() {\n      var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"update\";\n      nextTick(function () {\n        if (slots[\"default\"] && props.isAutoWidth) {\n          if (action === \"update\") {\n            computedWidth.value = getLabelWidth();\n          } else if (action === \"remove\") {\n            formContext == null ? void 0 : formContext.deregisterLabelWidth(computedWidth.value);\n          }\n        }\n      });\n    };\n    var updateLabelWidthFn = function updateLabelWidthFn() {\n      return updateLabelWidth(\"update\");\n    };\n    onMounted(function () {\n      updateLabelWidthFn();\n    });\n    onBeforeUnmount(function () {\n      updateLabelWidth(\"remove\");\n    });\n    onUpdated(function () {\n      return updateLabelWidthFn();\n    });\n    watch(computedWidth, function (val, oldVal) {\n      if (props.updateAll) {\n        formContext == null ? void 0 : formContext.registerLabelWidth(val, oldVal);\n      }\n    });\n    useResizeObserver(computed(function () {\n      var _a, _b;\n      return (_b = (_a = el.value) == null ? void 0 : _a.firstElementChild) != null ? _b : null;\n    }), updateLabelWidthFn);\n    return function () {\n      var _a, _b;\n      if (!slots) return null;\n      var isAutoWidth = props.isAutoWidth;\n      if (isAutoWidth) {\n        var autoLabelWidth = formContext == null ? void 0 : formContext.autoLabelWidth;\n        var hasLabel = formItemContext == null ? void 0 : formItemContext.hasLabel;\n        var style = {};\n        if (hasLabel && autoLabelWidth && autoLabelWidth !== \"auto\") {\n          var marginWidth = Math.max(0, Number.parseInt(autoLabelWidth, 10) - computedWidth.value);\n          var labelPosition = formItemContext.labelPosition || formContext.labelPosition;\n          var marginPosition = labelPosition === \"left\" ? \"marginRight\" : \"marginLeft\";\n          if (marginWidth) {\n            style[marginPosition] = \"\".concat(marginWidth, \"px\");\n          }\n        }\n        return createVNode(\"div\", {\n          \"ref\": el,\n          \"class\": [ns.be(\"item\", \"label-wrap\")],\n          \"style\": style\n        }, [(_a = slots[\"default\"]) == null ? void 0 : _a.call(slots)]);\n      } else {\n        return createVNode(Fragment, {\n          \"ref\": el\n        }, [(_b = slots[\"default\"]) == null ? void 0 : _b.call(slots)]);\n      }\n    };\n  }\n});\nexport { FormLabelWrap as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}