{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _callSuper from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _wrapNativeSuper from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { isNil } from 'lodash-unified';\nimport { throwError } from '../../../utils/error.mjs';\nimport { isArray } from '@vue/shared';\nvar SCOPE = \"ElUpload\";\nvar UploadAjaxError = /*#__PURE__*/function (_Error) {\n  function UploadAjaxError(message, status, method, url) {\n    var _this;\n    _classCallCheck(this, UploadAjaxError);\n    _this = _callSuper(this, UploadAjaxError, [message]);\n    _this.name = \"UploadAjaxError\";\n    _this.status = status;\n    _this.method = method;\n    _this.url = url;\n    return _this;\n  }\n  _inherits(UploadAjaxError, _Error);\n  return _createClass(UploadAjaxError);\n}(/*#__PURE__*/_wrapNativeSuper(Error));\nfunction getError(action, option, xhr) {\n  var msg;\n  if (xhr.response) {\n    msg = \"\".concat(xhr.response.error || xhr.response);\n  } else if (xhr.responseText) {\n    msg = \"\".concat(xhr.responseText);\n  } else {\n    msg = \"fail to \".concat(option.method, \" \").concat(action, \" \").concat(xhr.status);\n  }\n  return new UploadAjaxError(msg, xhr.status, option.method, action);\n}\nfunction getBody(xhr) {\n  var text = xhr.responseText || xhr.response;\n  if (!text) {\n    return text;\n  }\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    return text;\n  }\n}\nvar ajaxUpload = function ajaxUpload(option) {\n  if (typeof XMLHttpRequest === \"undefined\") throwError(SCOPE, \"XMLHttpRequest is undefined\");\n  var xhr = new XMLHttpRequest();\n  var action = option.action;\n  if (xhr.upload) {\n    xhr.upload.addEventListener(\"progress\", function (evt) {\n      var progressEvt = evt;\n      progressEvt.percent = evt.total > 0 ? evt.loaded / evt.total * 100 : 0;\n      option.onProgress(progressEvt);\n    });\n  }\n  var formData = new FormData();\n  if (option.data) {\n    for (var _i = 0, _Object$entries = Object.entries(option.data); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        key = _Object$entries$_i[0],\n        value = _Object$entries$_i[1];\n      if (isArray(value) && value.length) formData.append.apply(formData, [key].concat(_toConsumableArray(value)));else formData.append(key, value);\n    }\n  }\n  formData.append(option.filename, option.file, option.file.name);\n  xhr.addEventListener(\"error\", function () {\n    option.onError(getError(action, option, xhr));\n  });\n  xhr.addEventListener(\"load\", function () {\n    if (xhr.status < 200 || xhr.status >= 300) {\n      return option.onError(getError(action, option, xhr));\n    }\n    option.onSuccess(getBody(xhr));\n  });\n  xhr.open(option.method, action, true);\n  if (option.withCredentials && \"withCredentials\" in xhr) {\n    xhr.withCredentials = true;\n  }\n  var headers = option.headers || {};\n  if (headers instanceof Headers) {\n    headers.forEach(function (value, key) {\n      return xhr.setRequestHeader(key, value);\n    });\n  } else {\n    for (var _i2 = 0, _Object$entries2 = Object.entries(headers); _i2 < _Object$entries2.length; _i2++) {\n      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n        _key = _Object$entries2$_i[0],\n        _value = _Object$entries2$_i[1];\n      if (isNil(_value)) continue;\n      xhr.setRequestHeader(_key, String(_value));\n    }\n  }\n  xhr.send(formData);\n  return xhr;\n};\nexport { UploadAjaxError, ajaxUpload };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}