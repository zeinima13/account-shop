{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { defineComponent, inject, withDirectives, h } from 'vue';\nimport { isNil } from 'lodash-unified';\nimport { descriptionsKey } from './token.mjs';\nimport { getNormalizedProps } from '../../../utils/vue/vnode.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar ElDescriptionsCell = defineComponent({\n  name: \"ElDescriptionsCell\",\n  props: {\n    cell: {\n      type: Object\n    },\n    tag: {\n      type: String,\n      \"default\": \"td\"\n    },\n    type: {\n      type: String\n    }\n  },\n  setup: function setup() {\n    var descriptions = inject(descriptionsKey, {});\n    return {\n      descriptions: descriptions\n    };\n  },\n  render: function render() {\n    var _this = this;\n    var _a;\n    var item = getNormalizedProps(this.cell);\n    var directives = (((_a = this.cell) == null ? void 0 : _a.dirs) || []).map(function (dire) {\n      var dir = dire.dir,\n        arg = dire.arg,\n        modifiers = dire.modifiers,\n        value = dire.value;\n      return [dir, value, arg, modifiers];\n    });\n    var _this$descriptions = this.descriptions,\n      border = _this$descriptions.border,\n      direction = _this$descriptions.direction;\n    var isVertical = direction === \"vertical\";\n    var renderLabel = function renderLabel() {\n      var _a2, _b, _c;\n      return ((_c = (_b = (_a2 = _this.cell) == null ? void 0 : _a2.children) == null ? void 0 : _b.label) == null ? void 0 : _c.call(_b)) || item.label;\n    };\n    var renderContent = function renderContent() {\n      var _a2, _b, _c;\n      return (_c = (_b = (_a2 = _this.cell) == null ? void 0 : _a2.children) == null ? void 0 : _b[\"default\"]) == null ? void 0 : _c.call(_b);\n    };\n    var span = item.span;\n    var rowspan = item.rowspan;\n    var align = item.align ? \"is-\".concat(item.align) : \"\";\n    var labelAlign = item.labelAlign ? \"is-\".concat(item.labelAlign) : align;\n    var className = item.className;\n    var labelClassName = item.labelClassName;\n    var width = this.type === \"label\" ? item.labelWidth || this.descriptions.labelWidth || item.width : item.width;\n    var style = {\n      width: addUnit(width),\n      minWidth: addUnit(item.minWidth)\n    };\n    var ns = useNamespace(\"descriptions\");\n    switch (this.type) {\n      case \"label\":\n        return withDirectives(h(this.tag, {\n          style: style,\n          \"class\": [ns.e(\"cell\"), ns.e(\"label\"), ns.is(\"bordered-label\", border), ns.is(\"vertical-label\", isVertical), labelAlign, labelClassName],\n          colSpan: isVertical ? span : 1,\n          rowspan: isVertical ? 1 : rowspan\n        }, renderLabel()), directives);\n      case \"content\":\n        return withDirectives(h(this.tag, {\n          style: style,\n          \"class\": [ns.e(\"cell\"), ns.e(\"content\"), ns.is(\"bordered-content\", border), ns.is(\"vertical-content\", isVertical), align, className],\n          colSpan: isVertical ? span : span * 2 - 1,\n          rowspan: isVertical ? rowspan * 2 - 1 : rowspan\n        }, renderContent()), directives);\n      default:\n        {\n          var label = renderLabel();\n          var labelStyle = {};\n          var width2 = addUnit(item.labelWidth || this.descriptions.labelWidth);\n          if (width2) {\n            labelStyle.width = width2;\n            labelStyle.display = \"inline-block\";\n          }\n          return withDirectives(h(\"td\", {\n            style: style,\n            \"class\": [ns.e(\"cell\"), align],\n            colSpan: span,\n            rowspan: rowspan\n          }, [!isNil(label) ? h(\"span\", {\n            style: labelStyle,\n            \"class\": [ns.e(\"label\"), labelClassName]\n          }, label) : void 0, h(\"span\", {\n            \"class\": [ns.e(\"content\"), className]\n          }, renderContent())]), directives);\n        }\n    }\n  }\n});\nexport { ElDescriptionsCell as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}