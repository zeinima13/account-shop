{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _defineProperty from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.number.parse-float.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { reactive, ref, computed, nextTick, watch, watchEffect, onMounted } from 'vue';\nimport { debounce, get, findLastIndex, isEqual } from 'lodash-unified';\nimport { useResizeObserver } from '@vueuse/core';\nimport { ArrowDown } from '@element-plus/icons-vue';\nimport { useAllowCreate } from './useAllowCreate.mjs';\nimport { useProps } from './useProps.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { useEmptyValues } from '../../../hooks/use-empty-values/index.mjs';\nimport { useComposition } from '../../../hooks/use-composition/index.mjs';\nimport { useFocusController } from '../../../hooks/use-focus-controller/index.mjs';\nimport { isArray, isObject, isFunction } from '@vue/shared';\nimport { ValidateComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { useFormSize } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isNumber } from '../../../utils/types.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { escapeStringRegexp } from '../../../utils/strings.mjs';\nvar useSelect = function useSelect(props, emit) {\n  var _useLocale = useLocale(),\n    t = _useLocale.t;\n  var nsSelect = useNamespace(\"select\");\n  var nsInput = useNamespace(\"input\");\n  var _useFormItem = useFormItem(),\n    elForm = _useFormItem.form,\n    elFormItem = _useFormItem.formItem;\n  var _useFormItemInputId = useFormItemInputId(props, {\n      formItemContext: elFormItem\n    }),\n    inputId = _useFormItemInputId.inputId;\n  var _useProps = useProps(props),\n    aliasProps = _useProps.aliasProps,\n    getLabel = _useProps.getLabel,\n    getValue = _useProps.getValue,\n    getDisabled = _useProps.getDisabled,\n    getOptions = _useProps.getOptions;\n  var _useEmptyValues = useEmptyValues(props),\n    valueOnClear = _useEmptyValues.valueOnClear,\n    isEmptyValue = _useEmptyValues.isEmptyValue;\n  var states = reactive({\n    inputValue: \"\",\n    cachedOptions: [],\n    createdOptions: [],\n    hoveringIndex: -1,\n    inputHovering: false,\n    selectionWidth: 0,\n    collapseItemWidth: 0,\n    previousQuery: null,\n    previousValue: void 0,\n    selectedLabel: \"\",\n    menuVisibleOnFocus: false,\n    isBeforeHide: false\n  });\n  var popperSize = ref(-1);\n  var selectRef = ref();\n  var selectionRef = ref();\n  var tooltipRef = ref();\n  var tagTooltipRef = ref();\n  var inputRef = ref();\n  var prefixRef = ref();\n  var suffixRef = ref();\n  var menuRef = ref();\n  var tagMenuRef = ref();\n  var collapseItemRef = ref();\n  var _useComposition = useComposition({\n      afterComposition: function afterComposition(e) {\n        return onInput(e);\n      }\n    }),\n    isComposing = _useComposition.isComposing,\n    handleCompositionStart = _useComposition.handleCompositionStart,\n    handleCompositionEnd = _useComposition.handleCompositionEnd,\n    handleCompositionUpdate = _useComposition.handleCompositionUpdate;\n  var _useFocusController = useFocusController(inputRef, {\n      beforeFocus: function beforeFocus() {\n        return selectDisabled.value;\n      },\n      afterFocus: function afterFocus() {\n        if (props.automaticDropdown && !expanded.value) {\n          expanded.value = true;\n          states.menuVisibleOnFocus = true;\n        }\n      },\n      beforeBlur: function beforeBlur(event) {\n        var _a, _b;\n        return ((_a = tooltipRef.value) == null ? void 0 : _a.isFocusInsideContent(event)) || ((_b = tagTooltipRef.value) == null ? void 0 : _b.isFocusInsideContent(event));\n      },\n      afterBlur: function afterBlur() {\n        expanded.value = false;\n        states.menuVisibleOnFocus = false;\n      }\n    }),\n    wrapperRef = _useFocusController.wrapperRef,\n    isFocused = _useFocusController.isFocused,\n    handleBlur = _useFocusController.handleBlur;\n  var allOptions = ref([]);\n  var filteredOptions = ref([]);\n  var expanded = ref(false);\n  var selectDisabled = computed(function () {\n    return props.disabled || (elForm == null ? void 0 : elForm.disabled);\n  });\n  var needStatusIcon = computed(function () {\n    var _a;\n    return (_a = elForm == null ? void 0 : elForm.statusIcon) != null ? _a : false;\n  });\n  var popupHeight = computed(function () {\n    var totalHeight = filteredOptions.value.length * props.itemHeight;\n    return totalHeight > props.height ? props.height : totalHeight;\n  });\n  var hasModelValue = computed(function () {\n    return props.multiple ? isArray(props.modelValue) && props.modelValue.length > 0 : !isEmptyValue(props.modelValue);\n  });\n  var showClearBtn = computed(function () {\n    return props.clearable && !selectDisabled.value && states.inputHovering && hasModelValue.value;\n  });\n  var iconComponent = computed(function () {\n    return props.remote && props.filterable ? \"\" : ArrowDown;\n  });\n  var iconReverse = computed(function () {\n    return iconComponent.value && nsSelect.is(\"reverse\", expanded.value);\n  });\n  var validateState = computed(function () {\n    return (elFormItem == null ? void 0 : elFormItem.validateState) || \"\";\n  });\n  var validateIcon = computed(function () {\n    if (!validateState.value) return;\n    return ValidateComponentsMap[validateState.value];\n  });\n  var debounce$1 = computed(function () {\n    return props.remote ? 300 : 0;\n  });\n  var emptyText = computed(function () {\n    if (props.loading) {\n      return props.loadingText || t(\"el.select.loading\");\n    } else {\n      if (props.remote && !states.inputValue && allOptions.value.length === 0) return false;\n      if (props.filterable && states.inputValue && allOptions.value.length > 0 && filteredOptions.value.length === 0) {\n        return props.noMatchText || t(\"el.select.noMatch\");\n      }\n      if (allOptions.value.length === 0) {\n        return props.noDataText || t(\"el.select.noData\");\n      }\n    }\n    return null;\n  });\n  var filterOptions = function filterOptions(query) {\n    var isValidOption = function isValidOption(o) {\n      if (props.filterable && isFunction(props.filterMethod)) return true;\n      if (props.filterable && props.remote && isFunction(props.remoteMethod)) return true;\n      var regexp = new RegExp(escapeStringRegexp(query), \"i\");\n      return query ? regexp.test(getLabel(o) || \"\") : true;\n    };\n    if (props.loading) {\n      return [];\n    }\n    return [].concat(_toConsumableArray(states.createdOptions), _toConsumableArray(props.options)).reduce(function (all, item) {\n      var options = getOptions(item);\n      if (isArray(options)) {\n        var filtered = options.filter(isValidOption);\n        if (filtered.length > 0) {\n          all.push.apply(all, [{\n            label: getLabel(item),\n            type: \"Group\"\n          }].concat(_toConsumableArray(filtered)));\n        }\n      } else if (props.remote || isValidOption(item)) {\n        all.push(item);\n      }\n      return all;\n    }, []);\n  };\n  var updateOptions = function updateOptions() {\n    allOptions.value = filterOptions(\"\");\n    filteredOptions.value = filterOptions(states.inputValue);\n  };\n  var allOptionsValueMap = computed(function () {\n    var valueMap = /* @__PURE__ */new Map();\n    allOptions.value.forEach(function (option, index) {\n      valueMap.set(getValueKey(getValue(option)), {\n        option: option,\n        index: index\n      });\n    });\n    return valueMap;\n  });\n  var filteredOptionsValueMap = computed(function () {\n    var valueMap = /* @__PURE__ */new Map();\n    filteredOptions.value.forEach(function (option, index) {\n      valueMap.set(getValueKey(getValue(option)), {\n        option: option,\n        index: index\n      });\n    });\n    return valueMap;\n  });\n  var optionsAllDisabled = computed(function () {\n    return filteredOptions.value.every(function (option) {\n      return getDisabled(option);\n    });\n  });\n  var selectSize = useFormSize();\n  var collapseTagSize = computed(function () {\n    return selectSize.value === \"small\" ? \"small\" : \"default\";\n  });\n  var calculatePopperSize = function calculatePopperSize() {\n    var _a;\n    if (isNumber(props.fitInputWidth)) {\n      popperSize.value = props.fitInputWidth;\n      return;\n    }\n    var width = ((_a = selectRef.value) == null ? void 0 : _a.offsetWidth) || 200;\n    if (!props.fitInputWidth && allOptions.value.length > 0) {\n      nextTick(function () {\n        popperSize.value = Math.max(width, calculateLabelMaxWidth());\n      });\n    } else {\n      popperSize.value = width;\n    }\n  };\n  var calculateLabelMaxWidth = function calculateLabelMaxWidth() {\n    var _a, _b;\n    var canvas = document.createElement(\"canvas\");\n    var ctx = canvas.getContext(\"2d\");\n    var selector = nsSelect.be(\"dropdown\", \"item\");\n    var dom = ((_b = (_a = menuRef.value) == null ? void 0 : _a.listRef) == null ? void 0 : _b.innerRef) || document;\n    var dropdownItemEl = dom.querySelector(\".\".concat(selector));\n    if (dropdownItemEl === null || ctx === null) return 0;\n    var style = getComputedStyle(dropdownItemEl);\n    var padding = Number.parseFloat(style.paddingLeft) + Number.parseFloat(style.paddingRight);\n    ctx.font = style.font;\n    var maxWidth = filteredOptions.value.reduce(function (max, option) {\n      var metrics = ctx.measureText(getLabel(option));\n      return Math.max(metrics.width, max);\n    }, 0);\n    return maxWidth + padding;\n  };\n  var getGapWidth = function getGapWidth() {\n    if (!selectionRef.value) return 0;\n    var style = window.getComputedStyle(selectionRef.value);\n    return Number.parseFloat(style.gap || \"6px\");\n  };\n  var tagStyle = computed(function () {\n    var gapWidth = getGapWidth();\n    var maxWidth = collapseItemRef.value && props.maxCollapseTags === 1 ? states.selectionWidth - states.collapseItemWidth - gapWidth : states.selectionWidth;\n    return {\n      maxWidth: \"\".concat(maxWidth, \"px\")\n    };\n  });\n  var collapseTagStyle = computed(function () {\n    return {\n      maxWidth: \"\".concat(states.selectionWidth, \"px\")\n    };\n  });\n  var shouldShowPlaceholder = computed(function () {\n    if (isArray(props.modelValue)) {\n      return props.modelValue.length === 0 && !states.inputValue;\n    }\n    return props.filterable ? !states.inputValue : true;\n  });\n  var currentPlaceholder = computed(function () {\n    var _a;\n    var _placeholder = (_a = props.placeholder) != null ? _a : t(\"el.select.placeholder\");\n    return props.multiple || !hasModelValue.value ? _placeholder : states.selectedLabel;\n  });\n  var popperRef = computed(function () {\n    var _a, _b;\n    return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n  });\n  var indexRef = computed(function () {\n    if (props.multiple) {\n      var len = props.modelValue.length;\n      if (props.modelValue.length > 0 && filteredOptionsValueMap.value.has(props.modelValue[len - 1])) {\n        var _filteredOptionsValue = filteredOptionsValueMap.value.get(props.modelValue[len - 1]),\n          index = _filteredOptionsValue.index;\n        return index;\n      }\n    } else {\n      if (!isEmptyValue(props.modelValue) && filteredOptionsValueMap.value.has(props.modelValue)) {\n        var _filteredOptionsValue2 = filteredOptionsValueMap.value.get(props.modelValue),\n          _index = _filteredOptionsValue2.index;\n        return _index;\n      }\n    }\n    return -1;\n  });\n  var dropdownMenuVisible = computed({\n    get: function get() {\n      return expanded.value && emptyText.value !== false;\n    },\n    set: function set(val) {\n      expanded.value = val;\n    }\n  });\n  var showTagList = computed(function () {\n    if (!props.multiple) {\n      return [];\n    }\n    return props.collapseTags ? states.cachedOptions.slice(0, props.maxCollapseTags) : states.cachedOptions;\n  });\n  var collapseTagList = computed(function () {\n    if (!props.multiple) {\n      return [];\n    }\n    return props.collapseTags ? states.cachedOptions.slice(props.maxCollapseTags) : [];\n  });\n  var _useAllowCreate = useAllowCreate(props, states),\n    createNewOption = _useAllowCreate.createNewOption,\n    removeNewOption = _useAllowCreate.removeNewOption,\n    selectNewOption = _useAllowCreate.selectNewOption,\n    clearAllNewOption = _useAllowCreate.clearAllNewOption;\n  var toggleMenu = function toggleMenu() {\n    if (selectDisabled.value) return;\n    if (states.menuVisibleOnFocus) {\n      states.menuVisibleOnFocus = false;\n    } else {\n      expanded.value = !expanded.value;\n    }\n  };\n  var onInputChange = function onInputChange() {\n    if (states.inputValue.length > 0 && !expanded.value) {\n      expanded.value = true;\n    }\n    createNewOption(states.inputValue);\n    handleQueryChange(states.inputValue);\n  };\n  var debouncedOnInputChange = debounce(onInputChange, debounce$1.value);\n  var handleQueryChange = function handleQueryChange(val) {\n    if (states.previousQuery === val || isComposing.value) {\n      return;\n    }\n    states.previousQuery = val;\n    if (props.filterable && isFunction(props.filterMethod)) {\n      props.filterMethod(val);\n    } else if (props.filterable && props.remote && isFunction(props.remoteMethod)) {\n      props.remoteMethod(val);\n    }\n    if (props.defaultFirstOption && (props.filterable || props.remote) && filteredOptions.value.length) {\n      nextTick(checkDefaultFirstOption);\n    } else {\n      nextTick(updateHoveringIndex);\n    }\n  };\n  var checkDefaultFirstOption = function checkDefaultFirstOption() {\n    var optionsInDropdown = filteredOptions.value.filter(function (n) {\n      return !n.disabled && n.type !== \"Group\";\n    });\n    var userCreatedOption = optionsInDropdown.find(function (n) {\n      return n.created;\n    });\n    var firstOriginOption = optionsInDropdown[0];\n    states.hoveringIndex = getValueIndex(filteredOptions.value, userCreatedOption || firstOriginOption);\n  };\n  var emitChange = function emitChange(val) {\n    if (!isEqual(props.modelValue, val)) {\n      emit(CHANGE_EVENT, val);\n    }\n  };\n  var update = function update(val) {\n    emit(UPDATE_MODEL_EVENT, val);\n    emitChange(val);\n    states.previousValue = props.multiple ? String(val) : val;\n  };\n  var getValueIndex = function getValueIndex() {\n    var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var value = arguments.length > 1 ? arguments[1] : undefined;\n    if (!isObject(value)) {\n      return arr.indexOf(value);\n    }\n    var valueKey = props.valueKey;\n    var index = -1;\n    arr.some(function (item, i) {\n      if (get(item, valueKey) === get(value, valueKey)) {\n        index = i;\n        return true;\n      }\n      return false;\n    });\n    return index;\n  };\n  var getValueKey = function getValueKey(item) {\n    return isObject(item) ? get(item, props.valueKey) : item;\n  };\n  var handleResize = function handleResize() {\n    calculatePopperSize();\n  };\n  var resetSelectionWidth = function resetSelectionWidth() {\n    states.selectionWidth = selectionRef.value.getBoundingClientRect().width;\n  };\n  var resetCollapseItemWidth = function resetCollapseItemWidth() {\n    states.collapseItemWidth = collapseItemRef.value.getBoundingClientRect().width;\n  };\n  var updateTooltip = function updateTooltip() {\n    var _a, _b;\n    (_b = (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n  };\n  var updateTagTooltip = function updateTagTooltip() {\n    var _a, _b;\n    (_b = (_a = tagTooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n  };\n  var onSelect = function onSelect(option) {\n    if (props.multiple) {\n      var selectedOptions = props.modelValue.slice();\n      var index = getValueIndex(selectedOptions, getValue(option));\n      if (index > -1) {\n        selectedOptions = [].concat(_toConsumableArray(selectedOptions.slice(0, index)), _toConsumableArray(selectedOptions.slice(index + 1)));\n        states.cachedOptions.splice(index, 1);\n        removeNewOption(option);\n      } else if (props.multipleLimit <= 0 || selectedOptions.length < props.multipleLimit) {\n        selectedOptions = [].concat(_toConsumableArray(selectedOptions), [getValue(option)]);\n        states.cachedOptions.push(option);\n        selectNewOption(option);\n      }\n      update(selectedOptions);\n      if (option.created) {\n        handleQueryChange(\"\");\n      }\n      if (props.filterable && !props.reserveKeyword) {\n        states.inputValue = \"\";\n      }\n    } else {\n      states.selectedLabel = getLabel(option);\n      update(getValue(option));\n      expanded.value = false;\n      selectNewOption(option);\n      if (!option.created) {\n        clearAllNewOption();\n      }\n    }\n    focus();\n  };\n  var deleteTag = function deleteTag(event, option) {\n    var selectedOptions = props.modelValue.slice();\n    var index = getValueIndex(selectedOptions, getValue(option));\n    if (index > -1 && !selectDisabled.value) {\n      selectedOptions = [].concat(_toConsumableArray(props.modelValue.slice(0, index)), _toConsumableArray(props.modelValue.slice(index + 1)));\n      states.cachedOptions.splice(index, 1);\n      update(selectedOptions);\n      emit(\"remove-tag\", getValue(option));\n      removeNewOption(option);\n    }\n    event.stopPropagation();\n    focus();\n  };\n  var focus = function focus() {\n    var _a;\n    (_a = inputRef.value) == null ? void 0 : _a.focus();\n  };\n  var blur = function blur() {\n    var _a;\n    if (expanded.value) {\n      expanded.value = false;\n      nextTick(function () {\n        var _a2;\n        return (_a2 = inputRef.value) == null ? void 0 : _a2.blur();\n      });\n      return;\n    }\n    (_a = inputRef.value) == null ? void 0 : _a.blur();\n  };\n  var handleEsc = function handleEsc() {\n    if (states.inputValue.length > 0) {\n      states.inputValue = \"\";\n    } else {\n      expanded.value = false;\n    }\n  };\n  var getLastNotDisabledIndex = function getLastNotDisabledIndex(value) {\n    return findLastIndex(value, function (it) {\n      return !states.cachedOptions.some(function (option) {\n        return getValue(option) === it && getDisabled(option);\n      });\n    });\n  };\n  var handleDel = function handleDel(e) {\n    if (!props.multiple) return;\n    if (e.code === EVENT_CODE[\"delete\"]) return;\n    if (states.inputValue.length === 0) {\n      e.preventDefault();\n      var selected = props.modelValue.slice();\n      var lastNotDisabledIndex = getLastNotDisabledIndex(selected);\n      if (lastNotDisabledIndex < 0) return;\n      var removeTagValue = selected[lastNotDisabledIndex];\n      selected.splice(lastNotDisabledIndex, 1);\n      var option = states.cachedOptions[lastNotDisabledIndex];\n      states.cachedOptions.splice(lastNotDisabledIndex, 1);\n      removeNewOption(option);\n      update(selected);\n      emit(\"remove-tag\", removeTagValue);\n    }\n  };\n  var handleClear = function handleClear() {\n    var emptyValue;\n    if (isArray(props.modelValue)) {\n      emptyValue = [];\n    } else {\n      emptyValue = valueOnClear.value;\n    }\n    if (props.multiple) {\n      states.cachedOptions = [];\n    } else {\n      states.selectedLabel = \"\";\n    }\n    expanded.value = false;\n    update(emptyValue);\n    emit(\"clear\");\n    clearAllNewOption();\n    focus();\n  };\n  var _onKeyboardNavigate = function onKeyboardNavigate(direction) {\n    var hoveringIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n    var options = filteredOptions.value;\n    if (![\"forward\", \"backward\"].includes(direction) || selectDisabled.value || options.length <= 0 || optionsAllDisabled.value || isComposing.value) {\n      return;\n    }\n    if (!expanded.value) {\n      return toggleMenu();\n    }\n    if (hoveringIndex === void 0) {\n      hoveringIndex = states.hoveringIndex;\n    }\n    var newIndex = -1;\n    if (direction === \"forward\") {\n      newIndex = hoveringIndex + 1;\n      if (newIndex >= options.length) {\n        newIndex = 0;\n      }\n    } else if (direction === \"backward\") {\n      newIndex = hoveringIndex - 1;\n      if (newIndex < 0 || newIndex >= options.length) {\n        newIndex = options.length - 1;\n      }\n    }\n    var option = options[newIndex];\n    if (getDisabled(option) || option.type === \"Group\") {\n      return _onKeyboardNavigate(direction, newIndex);\n    } else {\n      states.hoveringIndex = newIndex;\n      scrollToItem(newIndex);\n    }\n  };\n  var onKeyboardSelect = function onKeyboardSelect() {\n    if (!expanded.value) {\n      return toggleMenu();\n    } else if (~states.hoveringIndex && filteredOptions.value[states.hoveringIndex]) {\n      onSelect(filteredOptions.value[states.hoveringIndex]);\n    }\n  };\n  var onHoverOption = function onHoverOption(idx) {\n    states.hoveringIndex = idx != null ? idx : -1;\n  };\n  var updateHoveringIndex = function updateHoveringIndex() {\n    if (!props.multiple) {\n      states.hoveringIndex = filteredOptions.value.findIndex(function (item) {\n        return getValueKey(item) === getValueKey(props.modelValue);\n      });\n    } else {\n      states.hoveringIndex = filteredOptions.value.findIndex(function (item) {\n        return props.modelValue.some(function (modelValue) {\n          return getValueKey(modelValue) === getValueKey(item);\n        });\n      });\n    }\n  };\n  var onInput = function onInput(event) {\n    states.inputValue = event.target.value;\n    if (props.remote) {\n      debouncedOnInputChange();\n    } else {\n      return onInputChange();\n    }\n  };\n  var handleClickOutside = function handleClickOutside(event) {\n    expanded.value = false;\n    if (isFocused.value) {\n      var _event = new FocusEvent(\"focus\", event);\n      handleBlur(_event);\n    }\n  };\n  var handleMenuEnter = function handleMenuEnter() {\n    states.isBeforeHide = false;\n    return nextTick(function () {\n      if (~indexRef.value) {\n        scrollToItem(states.hoveringIndex);\n      }\n    });\n  };\n  var scrollToItem = function scrollToItem(index) {\n    menuRef.value.scrollToItem(index);\n  };\n  var getOption = function getOption(value, cachedOptions) {\n    var selectValue = getValueKey(value);\n    if (allOptionsValueMap.value.has(selectValue)) {\n      var _allOptionsValueMap$v = allOptionsValueMap.value.get(selectValue),\n        option = _allOptionsValueMap$v.option;\n      return option;\n    }\n    if (cachedOptions && cachedOptions.length) {\n      var _option = cachedOptions.find(function (option2) {\n        return getValueKey(getValue(option2)) === selectValue;\n      });\n      if (_option) {\n        return _option;\n      }\n    }\n    return _defineProperty(_defineProperty({}, aliasProps.value.value, value), aliasProps.value.label, value);\n  };\n  var initStates = function initStates() {\n    var needUpdateSelectedLabel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (props.multiple) {\n      if (props.modelValue.length > 0) {\n        var cachedOptions = states.cachedOptions.slice();\n        states.cachedOptions.length = 0;\n        states.previousValue = props.modelValue.toString();\n        var _iterator = _createForOfIteratorHelper(props.modelValue),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var value = _step.value;\n            var option = getOption(value, cachedOptions);\n            states.cachedOptions.push(option);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        states.cachedOptions = [];\n        states.previousValue = void 0;\n      }\n    } else {\n      if (hasModelValue.value) {\n        states.previousValue = props.modelValue;\n        var options = filteredOptions.value;\n        var selectedItemIndex = options.findIndex(function (option) {\n          return getValueKey(getValue(option)) === getValueKey(props.modelValue);\n        });\n        if (~selectedItemIndex) {\n          states.selectedLabel = getLabel(options[selectedItemIndex]);\n        } else {\n          if (!states.selectedLabel || needUpdateSelectedLabel) {\n            states.selectedLabel = getValueKey(props.modelValue);\n          }\n        }\n      } else {\n        states.selectedLabel = \"\";\n        states.previousValue = void 0;\n      }\n    }\n    clearAllNewOption();\n    calculatePopperSize();\n  };\n  watch(function () {\n    return props.fitInputWidth;\n  }, function () {\n    calculatePopperSize();\n  });\n  watch(expanded, function (val) {\n    if (val) {\n      if (!props.persistent) {\n        calculatePopperSize();\n      }\n      handleQueryChange(\"\");\n    } else {\n      states.inputValue = \"\";\n      states.previousQuery = null;\n      states.isBeforeHide = true;\n      createNewOption(\"\");\n    }\n    emit(\"visible-change\", val);\n  });\n  watch(function () {\n    return props.modelValue;\n  }, function (val, oldVal) {\n    var _a;\n    var isValEmpty = !val || isArray(val) && val.length === 0;\n    if (isValEmpty || props.multiple && !isEqual(val.toString(), states.previousValue) || !props.multiple && getValueKey(val) !== getValueKey(states.previousValue)) {\n      initStates(true);\n    }\n    if (!isEqual(val, oldVal) && props.validateEvent) {\n      (_a = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\")[\"catch\"](function (err) {\n        return debugWarn(err);\n      });\n    }\n  }, {\n    deep: true\n  });\n  watch(function () {\n    return props.options;\n  }, function () {\n    var input = inputRef.value;\n    if (!input || input && document.activeElement !== input) {\n      initStates();\n    }\n  }, {\n    deep: true,\n    flush: \"post\"\n  });\n  watch(function () {\n    return filteredOptions.value;\n  }, function () {\n    calculatePopperSize();\n    return menuRef.value && nextTick(menuRef.value.resetScrollTop);\n  });\n  watchEffect(function () {\n    if (states.isBeforeHide) return;\n    updateOptions();\n  });\n  watchEffect(function () {\n    var valueKey = props.valueKey,\n      options = props.options;\n    var duplicateValue = /* @__PURE__ */new Map();\n    var _iterator2 = _createForOfIteratorHelper(options),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var item = _step2.value;\n        var optionValue = getValue(item);\n        var v = optionValue;\n        if (isObject(v)) {\n          v = get(optionValue, valueKey);\n        }\n        if (duplicateValue.get(v)) {\n          debugWarn(\"ElSelectV2\", \"The option values you provided seem to be duplicated, which may cause some problems, please check.\");\n          break;\n        } else {\n          duplicateValue.set(v, true);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  });\n  onMounted(function () {\n    initStates();\n  });\n  useResizeObserver(selectRef, handleResize);\n  useResizeObserver(selectionRef, resetSelectionWidth);\n  useResizeObserver(menuRef, updateTooltip);\n  useResizeObserver(wrapperRef, updateTooltip);\n  useResizeObserver(tagMenuRef, updateTagTooltip);\n  useResizeObserver(collapseItemRef, resetCollapseItemWidth);\n  return {\n    inputId: inputId,\n    collapseTagSize: collapseTagSize,\n    currentPlaceholder: currentPlaceholder,\n    expanded: expanded,\n    emptyText: emptyText,\n    popupHeight: popupHeight,\n    debounce: debounce$1,\n    allOptions: allOptions,\n    filteredOptions: filteredOptions,\n    iconComponent: iconComponent,\n    iconReverse: iconReverse,\n    tagStyle: tagStyle,\n    collapseTagStyle: collapseTagStyle,\n    popperSize: popperSize,\n    dropdownMenuVisible: dropdownMenuVisible,\n    hasModelValue: hasModelValue,\n    shouldShowPlaceholder: shouldShowPlaceholder,\n    selectDisabled: selectDisabled,\n    selectSize: selectSize,\n    needStatusIcon: needStatusIcon,\n    showClearBtn: showClearBtn,\n    states: states,\n    isFocused: isFocused,\n    nsSelect: nsSelect,\n    nsInput: nsInput,\n    inputRef: inputRef,\n    menuRef: menuRef,\n    tagMenuRef: tagMenuRef,\n    tooltipRef: tooltipRef,\n    tagTooltipRef: tagTooltipRef,\n    selectRef: selectRef,\n    wrapperRef: wrapperRef,\n    selectionRef: selectionRef,\n    prefixRef: prefixRef,\n    suffixRef: suffixRef,\n    collapseItemRef: collapseItemRef,\n    popperRef: popperRef,\n    validateState: validateState,\n    validateIcon: validateIcon,\n    showTagList: showTagList,\n    collapseTagList: collapseTagList,\n    debouncedOnInputChange: debouncedOnInputChange,\n    deleteTag: deleteTag,\n    getLabel: getLabel,\n    getValue: getValue,\n    getDisabled: getDisabled,\n    getValueKey: getValueKey,\n    handleClear: handleClear,\n    handleClickOutside: handleClickOutside,\n    handleDel: handleDel,\n    handleEsc: handleEsc,\n    focus: focus,\n    blur: blur,\n    handleMenuEnter: handleMenuEnter,\n    handleResize: handleResize,\n    resetSelectionWidth: resetSelectionWidth,\n    updateTooltip: updateTooltip,\n    updateTagTooltip: updateTagTooltip,\n    updateOptions: updateOptions,\n    toggleMenu: toggleMenu,\n    scrollTo: scrollToItem,\n    onInput: onInput,\n    onKeyboardNavigate: _onKeyboardNavigate,\n    onKeyboardSelect: onKeyboardSelect,\n    onSelect: onSelect,\n    onHover: onHoverOption,\n    handleCompositionStart: handleCompositionStart,\n    handleCompositionEnd: handleCompositionEnd,\n    handleCompositionUpdate: handleCompositionUpdate\n  };\n};\nexport { useSelect as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}