{"ast":null,"code":"import _classCallCheck from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { ref, isRef, nextTick } from 'vue';\nimport { isNull } from 'lodash-unified';\nimport { parseHeight } from './util.mjs';\nimport { hasOwn, isString } from '@vue/shared';\nimport { isClient } from '@vueuse/core';\nimport { isNumber } from '../../../utils/types.mjs';\nvar TableLayout = /*#__PURE__*/function () {\n  function TableLayout(options) {\n    _classCallCheck(this, TableLayout);\n    this.observers = [];\n    this.table = null;\n    this.store = null;\n    this.columns = [];\n    this.fit = true;\n    this.showHeader = true;\n    this.height = ref(null);\n    this.scrollX = ref(false);\n    this.scrollY = ref(false);\n    this.bodyWidth = ref(null);\n    this.fixedWidth = ref(null);\n    this.rightFixedWidth = ref(null);\n    this.gutterWidth = 0;\n    for (var name in options) {\n      if (hasOwn(options, name)) {\n        if (isRef(this[name])) {\n          this[name].value = options[name];\n        } else {\n          this[name] = options[name];\n        }\n      }\n    }\n    if (!this.table) {\n      throw new Error(\"Table is required for Table Layout\");\n    }\n    if (!this.store) {\n      throw new Error(\"Store is required for Table Layout\");\n    }\n  }\n  return _createClass(TableLayout, [{\n    key: \"updateScrollY\",\n    value: function updateScrollY() {\n      var height = this.height.value;\n      if (isNull(height)) return false;\n      var scrollBarRef = this.table.refs.scrollBarRef;\n      if (this.table.vnode.el && (scrollBarRef == null ? void 0 : scrollBarRef.wrapRef)) {\n        var scrollY = true;\n        var prevScrollY = this.scrollY.value;\n        scrollY = scrollBarRef.wrapRef.scrollHeight > scrollBarRef.wrapRef.clientHeight;\n        this.scrollY.value = scrollY;\n        return prevScrollY !== scrollY;\n      }\n      return false;\n    }\n  }, {\n    key: \"setHeight\",\n    value: function setHeight(value) {\n      var _this = this;\n      var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"height\";\n      if (!isClient) return;\n      var el = this.table.vnode.el;\n      value = parseHeight(value);\n      this.height.value = Number(value);\n      if (!el && (value || value === 0)) return nextTick(function () {\n        return _this.setHeight(value, prop);\n      });\n      if (isNumber(value)) {\n        el.style[prop] = \"\".concat(value, \"px\");\n        this.updateElsHeight();\n      } else if (isString(value)) {\n        el.style[prop] = value;\n        this.updateElsHeight();\n      }\n    }\n  }, {\n    key: \"setMaxHeight\",\n    value: function setMaxHeight(value) {\n      this.setHeight(value, \"max-height\");\n    }\n  }, {\n    key: \"getFlattenColumns\",\n    value: function getFlattenColumns() {\n      var flattenColumns = [];\n      var columns = this.table.store.states.columns.value;\n      columns.forEach(function (column) {\n        if (column.isColumnGroup) {\n          flattenColumns.push.apply(flattenColumns, column.columns);\n        } else {\n          flattenColumns.push(column);\n        }\n      });\n      return flattenColumns;\n    }\n  }, {\n    key: \"updateElsHeight\",\n    value: function updateElsHeight() {\n      this.updateScrollY();\n      this.notifyObservers(\"scrollable\");\n    }\n  }, {\n    key: \"headerDisplayNone\",\n    value: function headerDisplayNone(elm) {\n      if (!elm) return true;\n      var headerChild = elm;\n      while (headerChild.tagName !== \"DIV\") {\n        if (getComputedStyle(headerChild).display === \"none\") {\n          return true;\n        }\n        headerChild = headerChild.parentElement;\n      }\n      return false;\n    }\n  }, {\n    key: \"updateColumnsWidth\",\n    value: function updateColumnsWidth() {\n      if (!isClient) return;\n      var fit = this.fit;\n      var bodyWidth = this.table.vnode.el.clientWidth;\n      var bodyMinWidth = 0;\n      var flattenColumns = this.getFlattenColumns();\n      var flexColumns = flattenColumns.filter(function (column) {\n        return !isNumber(column.width);\n      });\n      flattenColumns.forEach(function (column) {\n        if (isNumber(column.width) && column.realWidth) column.realWidth = null;\n      });\n      if (flexColumns.length > 0 && fit) {\n        flattenColumns.forEach(function (column) {\n          bodyMinWidth += Number(column.width || column.minWidth || 80);\n        });\n        if (bodyMinWidth <= bodyWidth) {\n          this.scrollX.value = false;\n          var totalFlexWidth = bodyWidth - bodyMinWidth;\n          if (flexColumns.length === 1) {\n            flexColumns[0].realWidth = Number(flexColumns[0].minWidth || 80) + totalFlexWidth;\n          } else {\n            var allColumnsWidth = flexColumns.reduce(function (prev, column) {\n              return prev + Number(column.minWidth || 80);\n            }, 0);\n            var flexWidthPerPixel = totalFlexWidth / allColumnsWidth;\n            var noneFirstWidth = 0;\n            flexColumns.forEach(function (column, index) {\n              if (index === 0) return;\n              var flexWidth = Math.floor(Number(column.minWidth || 80) * flexWidthPerPixel);\n              noneFirstWidth += flexWidth;\n              column.realWidth = Number(column.minWidth || 80) + flexWidth;\n            });\n            flexColumns[0].realWidth = Number(flexColumns[0].minWidth || 80) + totalFlexWidth - noneFirstWidth;\n          }\n        } else {\n          this.scrollX.value = true;\n          flexColumns.forEach(function (column) {\n            column.realWidth = Number(column.minWidth);\n          });\n        }\n        this.bodyWidth.value = Math.max(bodyMinWidth, bodyWidth);\n        this.table.state.resizeState.value.width = this.bodyWidth.value;\n      } else {\n        flattenColumns.forEach(function (column) {\n          if (!column.width && !column.minWidth) {\n            column.realWidth = 80;\n          } else {\n            column.realWidth = Number(column.width || column.minWidth);\n          }\n          bodyMinWidth += column.realWidth;\n        });\n        this.scrollX.value = bodyMinWidth > bodyWidth;\n        this.bodyWidth.value = bodyMinWidth;\n      }\n      var fixedColumns = this.store.states.fixedColumns.value;\n      if (fixedColumns.length > 0) {\n        var fixedWidth = 0;\n        fixedColumns.forEach(function (column) {\n          fixedWidth += Number(column.realWidth || column.width);\n        });\n        this.fixedWidth.value = fixedWidth;\n      }\n      var rightFixedColumns = this.store.states.rightFixedColumns.value;\n      if (rightFixedColumns.length > 0) {\n        var rightFixedWidth = 0;\n        rightFixedColumns.forEach(function (column) {\n          rightFixedWidth += Number(column.realWidth || column.width);\n        });\n        this.rightFixedWidth.value = rightFixedWidth;\n      }\n      this.notifyObservers(\"columns\");\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      this.observers.push(observer);\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      var index = this.observers.indexOf(observer);\n      if (index !== -1) {\n        this.observers.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"notifyObservers\",\n    value: function notifyObservers(event) {\n      var _this2 = this;\n      var observers = this.observers;\n      observers.forEach(function (observer) {\n        var _a, _b;\n        switch (event) {\n          case \"columns\":\n            (_a = observer.state) == null ? void 0 : _a.onColumnsChange(_this2);\n            break;\n          case \"scrollable\":\n            (_b = observer.state) == null ? void 0 : _b.onScrollableChange(_this2);\n            break;\n          default:\n            throw new Error(\"Table Layout don't have event \".concat(event, \".\"));\n        }\n      });\n    }\n  }]);\n}();\nexport { TableLayout as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}