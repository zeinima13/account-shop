{"ast":null,"code":"import _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { defineComponent, shallowRef, openBlock, createElementBlock, normalizeClass, unref, withKeys, withModifiers, createBlock, withCtx, renderSlot, createElementVNode } from 'vue';\nimport { cloneDeep, isEqual } from 'lodash-unified';\nimport UploadDragger from './upload-dragger2.mjs';\nimport { uploadContentProps } from './upload-content.mjs';\nimport { genFileId } from './upload.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { entriesOf } from '../../../utils/objects.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { isPlainObject, isFunction } from '@vue/shared';\nvar __default__ = defineComponent({\n  name: \"ElUploadContent\",\n  inheritAttrs: false\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: uploadContentProps,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    var ns = useNamespace(\"upload\");\n    var disabled = useFormDisabled();\n    var requests = shallowRef({});\n    var inputRef = shallowRef();\n    var uploadFiles = function uploadFiles(files) {\n      if (files.length === 0) return;\n      var autoUpload = props.autoUpload,\n        limit = props.limit,\n        fileList = props.fileList,\n        multiple = props.multiple,\n        onStart = props.onStart,\n        onExceed = props.onExceed;\n      if (limit && fileList.length + files.length > limit) {\n        onExceed(files, fileList);\n        return;\n      }\n      if (!multiple) {\n        files = files.slice(0, 1);\n      }\n      var _iterator = _createForOfIteratorHelper(files),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var file = _step.value;\n          var rawFile = file;\n          rawFile.uid = genFileId();\n          onStart(rawFile);\n          if (autoUpload) upload(rawFile);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    };\n    var upload = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(rawFile) {\n        var hookResult, beforeData, originData, beforeUploadPromise, file;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              inputRef.value.value = \"\";\n              if (props.beforeUpload) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\", doUpload(rawFile));\n            case 3:\n              beforeData = {};\n              _context.prev = 4;\n              originData = props.data;\n              beforeUploadPromise = props.beforeUpload(rawFile);\n              beforeData = isPlainObject(props.data) ? cloneDeep(props.data) : props.data;\n              _context.next = 10;\n              return beforeUploadPromise;\n            case 10:\n              hookResult = _context.sent;\n              if (isPlainObject(props.data) && isEqual(originData, beforeData)) {\n                beforeData = cloneDeep(props.data);\n              }\n              _context.next = 17;\n              break;\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](4);\n              hookResult = false;\n            case 17:\n              if (!(hookResult === false)) {\n                _context.next = 20;\n                break;\n              }\n              props.onRemove(rawFile);\n              return _context.abrupt(\"return\");\n            case 20:\n              file = rawFile;\n              if (hookResult instanceof Blob) {\n                if (hookResult instanceof File) {\n                  file = hookResult;\n                } else {\n                  file = new File([hookResult], rawFile.name, {\n                    type: rawFile.type\n                  });\n                }\n              }\n              doUpload(Object.assign(file, {\n                uid: rawFile.uid\n              }), beforeData);\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[4, 14]]);\n      }));\n      return function upload(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var resolveData = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(data, rawFile) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!isFunction(data)) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", data(rawFile));\n            case 2:\n              return _context2.abrupt(\"return\", data);\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return function resolveData(_x2, _x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    var doUpload = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(rawFile, beforeData) {\n        var headers, data, method, withCredentials, filename, action, _onProgress, _onSuccess, _onError, httpRequest, uid, options, request;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              headers = props.headers, data = props.data, method = props.method, withCredentials = props.withCredentials, filename = props.name, action = props.action, _onProgress = props.onProgress, _onSuccess = props.onSuccess, _onError = props.onError, httpRequest = props.httpRequest;\n              _context3.prev = 1;\n              _context3.next = 4;\n              return resolveData(beforeData != null ? beforeData : data, rawFile);\n            case 4:\n              beforeData = _context3.sent;\n              _context3.next = 11;\n              break;\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](1);\n              props.onRemove(rawFile);\n              return _context3.abrupt(\"return\");\n            case 11:\n              uid = rawFile.uid;\n              options = {\n                headers: headers || {},\n                withCredentials: withCredentials,\n                file: rawFile,\n                data: beforeData,\n                method: method,\n                filename: filename,\n                action: action,\n                onProgress: function onProgress(evt) {\n                  _onProgress(evt, rawFile);\n                },\n                onSuccess: function onSuccess(res) {\n                  _onSuccess(res, rawFile);\n                  delete requests.value[uid];\n                },\n                onError: function onError(err) {\n                  _onError(err, rawFile);\n                  delete requests.value[uid];\n                }\n              };\n              request = httpRequest(options);\n              requests.value[uid] = request;\n              if (request instanceof Promise) {\n                request.then(options.onSuccess, options.onError);\n              }\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[1, 7]]);\n      }));\n      return function doUpload(_x4, _x5) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    var handleChange = function handleChange(e) {\n      var files = e.target.files;\n      if (!files) return;\n      uploadFiles(Array.from(files));\n    };\n    var handleClick = function handleClick() {\n      if (!disabled.value) {\n        inputRef.value.value = \"\";\n        inputRef.value.click();\n      }\n    };\n    var handleKeydown = function handleKeydown() {\n      handleClick();\n    };\n    var abort = function abort(file) {\n      var _reqs = entriesOf(requests.value).filter(file ? function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 1),\n          uid = _ref6[0];\n        return String(file.uid) === uid;\n      } : function () {\n        return true;\n      });\n      _reqs.forEach(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n          uid = _ref8[0],\n          req = _ref8[1];\n        if (req instanceof XMLHttpRequest) req.abort();\n        delete requests.value[uid];\n      });\n    };\n    expose({\n      abort: abort,\n      upload: upload\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass([unref(ns).b(), unref(ns).m(_ctx.listType), unref(ns).is(\"drag\", _ctx.drag), unref(ns).is(\"disabled\", unref(disabled))]),\n        tabindex: unref(disabled) ? \"-1\" : \"0\",\n        onClick: handleClick,\n        onKeydown: withKeys(withModifiers(handleKeydown, [\"self\"]), [\"enter\", \"space\"])\n      }, [_ctx.drag ? (openBlock(), createBlock(UploadDragger, {\n        key: 0,\n        disabled: unref(disabled),\n        onFile: uploadFiles\n      }, {\n        \"default\": withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"default\")];\n        }),\n        _: 3\n      }, 8, [\"disabled\"])) : renderSlot(_ctx.$slots, \"default\", {\n        key: 1\n      }), createElementVNode(\"input\", {\n        ref_key: \"inputRef\",\n        ref: inputRef,\n        \"class\": normalizeClass(unref(ns).e(\"input\")),\n        name: _ctx.name,\n        disabled: unref(disabled),\n        multiple: _ctx.multiple,\n        accept: _ctx.accept,\n        type: \"file\",\n        onChange: handleChange,\n        onClick: withModifiers(function () {}, [\"stop\"])\n      }, null, 42, [\"name\", \"disabled\", \"multiple\", \"accept\", \"onClick\"])], 42, [\"tabindex\", \"onKeydown\"]);\n    };\n  }\n}));\nvar UploadContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"upload-content.vue\"]]);\nexport { UploadContent as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}