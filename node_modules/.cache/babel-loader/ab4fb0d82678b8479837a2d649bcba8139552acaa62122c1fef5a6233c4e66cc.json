{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { shallowRef, ref, computed, nextTick } from 'vue';\nimport { useFormItem } from '../../../form/src/hooks/use-form-item.mjs';\nimport { UPDATE_MODEL_EVENT, INPUT_EVENT, CHANGE_EVENT } from '../../../../constants/event.mjs';\nvar useSlide = function useSlide(props, initData, emit) {\n  var _useFormItem = useFormItem(),\n    elForm = _useFormItem.form,\n    elFormItem = _useFormItem.formItem;\n  var slider = shallowRef();\n  var firstButton = ref();\n  var secondButton = ref();\n  var buttonRefs = {\n    firstButton: firstButton,\n    secondButton: secondButton\n  };\n  var sliderDisabled = computed(function () {\n    return props.disabled || (elForm == null ? void 0 : elForm.disabled) || false;\n  });\n  var minValue = computed(function () {\n    return Math.min(initData.firstValue, initData.secondValue);\n  });\n  var maxValue = computed(function () {\n    return Math.max(initData.firstValue, initData.secondValue);\n  });\n  var barSize = computed(function () {\n    return props.range ? \"\".concat(100 * (maxValue.value - minValue.value) / (props.max - props.min), \"%\") : \"\".concat(100 * (initData.firstValue - props.min) / (props.max - props.min), \"%\");\n  });\n  var barStart = computed(function () {\n    return props.range ? \"\".concat(100 * (minValue.value - props.min) / (props.max - props.min), \"%\") : \"0%\";\n  });\n  var runwayStyle = computed(function () {\n    return props.vertical ? {\n      height: props.height\n    } : {};\n  });\n  var barStyle = computed(function () {\n    return props.vertical ? {\n      height: barSize.value,\n      bottom: barStart.value\n    } : {\n      width: barSize.value,\n      left: barStart.value\n    };\n  });\n  var resetSize = function resetSize() {\n    if (slider.value) {\n      initData.sliderSize = slider.value[\"client\".concat(props.vertical ? \"Height\" : \"Width\")];\n    }\n  };\n  var getButtonRefByPercent = function getButtonRefByPercent(percent) {\n    var targetValue = props.min + percent * (props.max - props.min) / 100;\n    if (!props.range) {\n      return firstButton;\n    }\n    var buttonRefName;\n    if (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {\n      buttonRefName = initData.firstValue < initData.secondValue ? \"firstButton\" : \"secondButton\";\n    } else {\n      buttonRefName = initData.firstValue > initData.secondValue ? \"firstButton\" : \"secondButton\";\n    }\n    return buttonRefs[buttonRefName];\n  };\n  var setPosition = function setPosition(percent) {\n    var buttonRef = getButtonRefByPercent(percent);\n    buttonRef.value.setPosition(percent);\n    return buttonRef;\n  };\n  var setFirstValue = function setFirstValue(firstValue) {\n    initData.firstValue = firstValue != null ? firstValue : props.min;\n    _emit(props.range ? [minValue.value, maxValue.value] : firstValue != null ? firstValue : props.min);\n  };\n  var setSecondValue = function setSecondValue(secondValue) {\n    initData.secondValue = secondValue;\n    if (props.range) {\n      _emit([minValue.value, maxValue.value]);\n    }\n  };\n  var _emit = function _emit(val) {\n    emit(UPDATE_MODEL_EVENT, val);\n    emit(INPUT_EVENT, val);\n  };\n  var emitChange = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return nextTick();\n          case 2:\n            emit(CHANGE_EVENT, props.range ? [minValue.value, maxValue.value] : props.modelValue);\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function emitChange() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handleSliderPointerEvent = function handleSliderPointerEvent(event) {\n    var _a, _b, _c, _d, _e, _f;\n    if (sliderDisabled.value || initData.dragging) return;\n    resetSize();\n    var newPercent = 0;\n    if (props.vertical) {\n      var clientY = (_c = (_b = (_a = event.touches) == null ? void 0 : _a.item(0)) == null ? void 0 : _b.clientY) != null ? _c : event.clientY;\n      var sliderOffsetBottom = slider.value.getBoundingClientRect().bottom;\n      newPercent = (sliderOffsetBottom - clientY) / initData.sliderSize * 100;\n    } else {\n      var clientX = (_f = (_e = (_d = event.touches) == null ? void 0 : _d.item(0)) == null ? void 0 : _e.clientX) != null ? _f : event.clientX;\n      var sliderOffsetLeft = slider.value.getBoundingClientRect().left;\n      newPercent = (clientX - sliderOffsetLeft) / initData.sliderSize * 100;\n    }\n    if (newPercent < 0 || newPercent > 100) return;\n    return setPosition(newPercent);\n  };\n  var onSliderWrapperPrevent = function onSliderWrapperPrevent(event) {\n    var _a, _b;\n    if (((_a = buttonRefs[\"firstButton\"].value) == null ? void 0 : _a.dragging) || ((_b = buttonRefs[\"secondButton\"].value) == null ? void 0 : _b.dragging)) {\n      event.preventDefault();\n    }\n  };\n  var onSliderDown = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(event) {\n      var buttonRef;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            buttonRef = handleSliderPointerEvent(event);\n            if (!buttonRef) {\n              _context2.next = 5;\n              break;\n            }\n            _context2.next = 4;\n            return nextTick();\n          case 4:\n            buttonRef.value.onButtonDown(event);\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function onSliderDown(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var onSliderClick = function onSliderClick(event) {\n    var buttonRef = handleSliderPointerEvent(event);\n    if (buttonRef) {\n      emitChange();\n    }\n  };\n  var onSliderMarkerDown = function onSliderMarkerDown(position) {\n    if (sliderDisabled.value || initData.dragging) return;\n    setPosition(position);\n  };\n  return {\n    elFormItem: elFormItem,\n    slider: slider,\n    firstButton: firstButton,\n    secondButton: secondButton,\n    sliderDisabled: sliderDisabled,\n    minValue: minValue,\n    maxValue: maxValue,\n    runwayStyle: runwayStyle,\n    barStyle: barStyle,\n    resetSize: resetSize,\n    setPosition: setPosition,\n    emitChange: emitChange,\n    onSliderWrapperPrevent: onSliderWrapperPrevent,\n    onSliderClick: onSliderClick,\n    onSliderDown: onSliderDown,\n    onSliderMarkerDown: onSliderMarkerDown,\n    setFirstValue: setFirstValue,\n    setSecondValue: setSecondValue\n  };\n};\nexport { useSlide };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}