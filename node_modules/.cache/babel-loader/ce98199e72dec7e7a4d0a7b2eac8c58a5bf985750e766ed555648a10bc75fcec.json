{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { defineComponent, inject, withDirectives, cloneVNode, Fragment, createVNode, Text, Comment } from 'vue';\nimport { FORWARD_REF_INJECTION_KEY, useForwardRefDirective } from '../../../hooks/use-forward-ref/index.mjs';\nimport { NOOP, isObject } from '@vue/shared';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar NAME = \"ElOnlyChild\";\nvar OnlyChild = defineComponent({\n  name: NAME,\n  setup: function setup(_, _ref) {\n    var slots = _ref.slots,\n      attrs = _ref.attrs;\n    var _a;\n    var forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY);\n    var forwardRefDirective = useForwardRefDirective((_a = forwardRefInjection == null ? void 0 : forwardRefInjection.setForwardRef) != null ? _a : NOOP);\n    return function () {\n      var _a2;\n      var defaultSlot = (_a2 = slots[\"default\"]) == null ? void 0 : _a2.call(slots, attrs);\n      if (!defaultSlot) return null;\n      if (defaultSlot.length > 1) {\n        debugWarn(NAME, \"requires exact only one valid child.\");\n        return null;\n      }\n      var firstLegitNode = findFirstLegitChild(defaultSlot);\n      if (!firstLegitNode) {\n        debugWarn(NAME, \"no valid child node found\");\n        return null;\n      }\n      return withDirectives(cloneVNode(firstLegitNode, attrs), [[forwardRefDirective]]);\n    };\n  }\n});\nfunction findFirstLegitChild(node) {\n  if (!node) return null;\n  var children = node;\n  var _iterator = _createForOfIteratorHelper(children),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var child = _step.value;\n      if (isObject(child)) {\n        switch (child.type) {\n          case Comment:\n            continue;\n          case Text:\n          case \"svg\":\n            return wrapTextContent(child);\n          case Fragment:\n            return findFirstLegitChild(child.children);\n          default:\n            return child;\n        }\n      }\n      return wrapTextContent(child);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return null;\n}\nfunction wrapTextContent(s) {\n  var ns = useNamespace(\"only-child\");\n  return createVNode(\"span\", {\n    \"class\": ns.e(\"content\")\n  }, [s]);\n}\nexport { OnlyChild };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}