{"ast":null,"code":"import _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { defineComponent, inject, watch, onBeforeUnmount, openBlock, createBlock, unref, withCtx, renderSlot, createElementBlock, mergeProps } from 'vue';\nimport { tooltipV2RootKey } from './constants.mjs';\nimport ForwardRef from './forward-ref.mjs';\nimport { tooltipV2TriggerProps } from './trigger.mjs';\nimport { tooltipV2CommonProps } from './common.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nvar __default__ = defineComponent({\n  name: \"ElTooltipV2Trigger\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: _objectSpread(_objectSpread({}, tooltipV2CommonProps), tooltipV2TriggerProps),\n  setup: function setup(__props) {\n    var props = __props;\n    var _inject = inject(tooltipV2RootKey),\n      onClose = _inject.onClose,\n      onOpen = _inject.onOpen,\n      onDelayOpen = _inject.onDelayOpen,\n      triggerRef = _inject.triggerRef,\n      contentId = _inject.contentId;\n    var isMousedown = false;\n    var setTriggerRef = function setTriggerRef(el) {\n      triggerRef.value = el;\n    };\n    var onMouseup = function onMouseup() {\n      isMousedown = false;\n    };\n    var onMouseenter = composeEventHandlers(props.onMouseEnter, onDelayOpen);\n    var onMouseleave = composeEventHandlers(props.onMouseLeave, onClose);\n    var onMousedown = composeEventHandlers(props.onMouseDown, function () {\n      onClose();\n      isMousedown = true;\n      document.addEventListener(\"mouseup\", onMouseup, {\n        once: true\n      });\n    });\n    var onFocus = composeEventHandlers(props.onFocus, function () {\n      if (!isMousedown) onOpen();\n    });\n    var onBlur = composeEventHandlers(props.onBlur, onClose);\n    var onClick = composeEventHandlers(props.onClick, function (e) {\n      if (e.detail === 0) onClose();\n    });\n    var events = {\n      blur: onBlur,\n      click: onClick,\n      focus: onFocus,\n      mousedown: onMousedown,\n      mouseenter: onMouseenter,\n      mouseleave: onMouseleave\n    };\n    var setEvents = function setEvents(el, events2, type) {\n      if (el) {\n        Object.entries(events2).forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            name = _ref2[0],\n            handler = _ref2[1];\n          el[type](name, handler);\n        });\n      }\n    };\n    watch(triggerRef, function (triggerEl, previousTriggerEl) {\n      setEvents(triggerEl, events, \"addEventListener\");\n      setEvents(previousTriggerEl, events, \"removeEventListener\");\n      if (triggerEl) {\n        triggerEl.setAttribute(\"aria-describedby\", contentId.value);\n      }\n    });\n    onBeforeUnmount(function () {\n      setEvents(triggerRef.value, events, \"removeEventListener\");\n      document.removeEventListener(\"mouseup\", onMouseup);\n    });\n    return function (_ctx, _cache) {\n      return _ctx.nowrap ? (openBlock(), createBlock(unref(ForwardRef), {\n        key: 0,\n        \"set-ref\": setTriggerRef,\n        \"only-child\": \"\"\n      }, {\n        \"default\": withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"default\")];\n        }),\n        _: 3\n      })) : (openBlock(), createElementBlock(\"button\", mergeProps({\n        key: 1,\n        ref_key: \"triggerRef\",\n        ref: triggerRef\n      }, _ctx.$attrs), [renderSlot(_ctx.$slots, \"default\")], 16));\n    };\n  }\n}));\nvar TooltipV2Trigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"trigger.vue\"]]);\nexport { TooltipV2Trigger as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}