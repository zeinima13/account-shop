{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { defineComponent, inject, ref, toRef, openBlock, createBlock, unref, normalizeClass, withCtx, renderSlot } from 'vue';\nimport '../../popper/index.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './constants.mjs';\nimport { useTooltipTriggerProps } from './trigger.mjs';\nimport { whenTrigger } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ElPopperTrigger from '../../popper/src/trigger2.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar __default__ = defineComponent({\n  name: \"ElTooltipTrigger\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: useTooltipTriggerProps,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    var ns = useNamespace(\"tooltip\");\n    var _inject = inject(TOOLTIP_INJECTION_KEY, void 0),\n      controlled = _inject.controlled,\n      id = _inject.id,\n      open = _inject.open,\n      onOpen = _inject.onOpen,\n      onClose = _inject.onClose,\n      onToggle = _inject.onToggle;\n    var triggerRef = ref(null);\n    var stopWhenControlledOrDisabled = function stopWhenControlledOrDisabled() {\n      if (unref(controlled) || props.disabled) {\n        return true;\n      }\n    };\n    var trigger = toRef(props, \"trigger\");\n    var onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"hover\", onOpen));\n    var onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"hover\", onClose));\n    var onClick = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"click\", function (e) {\n      if (e.button === 0) {\n        onToggle(e);\n      }\n    }));\n    var onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"focus\", onOpen));\n    var onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"focus\", onClose));\n    var onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"contextmenu\", function (e) {\n      e.preventDefault();\n      onToggle(e);\n    }));\n    var onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, function (e) {\n      var code = e.code;\n      if (props.triggerKeys.includes(code)) {\n        e.preventDefault();\n        onToggle(e);\n      }\n    });\n    expose({\n      triggerRef: triggerRef\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(unref(ElPopperTrigger), {\n        id: unref(id),\n        \"virtual-ref\": _ctx.virtualRef,\n        open: unref(open),\n        \"virtual-triggering\": _ctx.virtualTriggering,\n        \"class\": normalizeClass(unref(ns).e(\"trigger\")),\n        onBlur: unref(onBlur),\n        onClick: unref(onClick),\n        onContextmenu: unref(onContextMenu),\n        onFocus: unref(onFocus),\n        onMouseenter: unref(onMouseenter),\n        onMouseleave: unref(onMouseleave),\n        onKeydown: unref(onKeydown)\n      }, {\n        \"default\": withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"default\")];\n        }),\n        _: 3\n      }, 8, [\"id\", \"virtual-ref\", \"open\", \"virtual-triggering\", \"class\", \"onBlur\", \"onClick\", \"onContextmenu\", \"onFocus\", \"onMouseenter\", \"onMouseleave\", \"onKeydown\"]);\n    };\n  }\n}));\nvar ElTooltipTrigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"trigger.vue\"]]);\nexport { ElTooltipTrigger as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}