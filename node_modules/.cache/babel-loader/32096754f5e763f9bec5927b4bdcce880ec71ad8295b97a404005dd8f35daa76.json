{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { isRef, ref } from 'vue';\nimport { Loading } from './service.mjs';\nimport { isObject, hyphenate, isString } from '@vue/shared';\nvar INSTANCE_KEY = Symbol(\"ElLoading\");\nvar createInstance = function createInstance(el, binding) {\n  var _a, _b, _c, _d;\n  var vm = binding.instance;\n  var getBindingProp = function getBindingProp(key) {\n    return isObject(binding.value) ? binding.value[key] : void 0;\n  };\n  var resolveExpression = function resolveExpression(key) {\n    var data = isString(key) && (vm == null ? void 0 : vm[key]) || key;\n    if (data) return ref(data);else return data;\n  };\n  var getProp = function getProp(name) {\n    return resolveExpression(getBindingProp(name) || el.getAttribute(\"element-loading-\".concat(hyphenate(name))));\n  };\n  var fullscreen = (_a = getBindingProp(\"fullscreen\")) != null ? _a : binding.modifiers.fullscreen;\n  var options = {\n    text: getProp(\"text\"),\n    svg: getProp(\"svg\"),\n    svgViewBox: getProp(\"svgViewBox\"),\n    spinner: getProp(\"spinner\"),\n    background: getProp(\"background\"),\n    customClass: getProp(\"customClass\"),\n    fullscreen: fullscreen,\n    target: (_b = getBindingProp(\"target\")) != null ? _b : fullscreen ? void 0 : el,\n    body: (_c = getBindingProp(\"body\")) != null ? _c : binding.modifiers.body,\n    lock: (_d = getBindingProp(\"lock\")) != null ? _d : binding.modifiers.lock\n  };\n  el[INSTANCE_KEY] = {\n    options: options,\n    instance: Loading(options)\n  };\n};\nvar updateOptions = function updateOptions(newOptions, originalOptions) {\n  for (var _i = 0, _Object$keys = Object.keys(originalOptions); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    if (isRef(originalOptions[key])) originalOptions[key].value = newOptions[key];\n  }\n};\nvar vLoading = {\n  mounted: function mounted(el, binding) {\n    if (binding.value) {\n      createInstance(el, binding);\n    }\n  },\n  updated: function updated(el, binding) {\n    var instance = el[INSTANCE_KEY];\n    if (binding.oldValue !== binding.value) {\n      if (binding.value && !binding.oldValue) {\n        createInstance(el, binding);\n      } else if (binding.value && binding.oldValue) {\n        if (isObject(binding.value)) updateOptions(binding.value, instance.options);\n      } else {\n        instance == null ? void 0 : instance.instance.close();\n      }\n    }\n  },\n  unmounted: function unmounted(el) {\n    var _a;\n    (_a = el[INSTANCE_KEY]) == null ? void 0 : _a.instance.close();\n    el[INSTANCE_KEY] = null;\n  }\n};\nexport { vLoading };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}