{"ast":null,"code":"import _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { inject, ref, computed, onMounted, watch, toRef, onUnmounted } from 'vue';\nimport { formContextKey, formItemContextKey } from '../constants.mjs';\nimport { useId } from '../../../../hooks/use-id/index.mjs';\nvar useFormItem = function useFormItem() {\n  var form = inject(formContextKey, void 0);\n  var formItem = inject(formItemContextKey, void 0);\n  return {\n    form: form,\n    formItem: formItem\n  };\n};\nvar useFormItemInputId = function useFormItemInputId(props, _ref) {\n  var formItemContext = _ref.formItemContext,\n    disableIdGeneration = _ref.disableIdGeneration,\n    disableIdManagement = _ref.disableIdManagement;\n  if (!disableIdGeneration) {\n    disableIdGeneration = ref(false);\n  }\n  if (!disableIdManagement) {\n    disableIdManagement = ref(false);\n  }\n  var inputId = ref();\n  var idUnwatch = void 0;\n  var isLabeledByFormItem = computed(function () {\n    var _a;\n    return !!(!(props.label || props.ariaLabel) && formItemContext && formItemContext.inputIds && ((_a = formItemContext.inputIds) == null ? void 0 : _a.length) <= 1);\n  });\n  onMounted(function () {\n    idUnwatch = watch([toRef(props, \"id\"), disableIdGeneration], function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        id = _ref3[0],\n        disableIdGeneration2 = _ref3[1];\n      var newId = id != null ? id : !disableIdGeneration2 ? useId().value : void 0;\n      if (newId !== inputId.value) {\n        if (formItemContext == null ? void 0 : formItemContext.removeInputId) {\n          inputId.value && formItemContext.removeInputId(inputId.value);\n          if (!(disableIdManagement == null ? void 0 : disableIdManagement.value) && !disableIdGeneration2 && newId) {\n            formItemContext.addInputId(newId);\n          }\n        }\n        inputId.value = newId;\n      }\n    }, {\n      immediate: true\n    });\n  });\n  onUnmounted(function () {\n    idUnwatch && idUnwatch();\n    if (formItemContext == null ? void 0 : formItemContext.removeInputId) {\n      inputId.value && formItemContext.removeInputId(inputId.value);\n    }\n  });\n  return {\n    isLabeledByFormItem: isLabeledByFormItem,\n    inputId: inputId\n  };\n};\nexport { useFormItem, useFormItemInputId };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}