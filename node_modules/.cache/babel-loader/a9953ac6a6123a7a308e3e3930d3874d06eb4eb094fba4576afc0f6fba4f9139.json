{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.fixed.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { getCurrentInstance, toRefs, ref, computed, watch, unref } from 'vue';\nimport { getKeysMap, getRowIdentity, toggleRowStatus, getColumnById, getColumnByKey, orderBy } from '../util.mjs';\nimport useExpand from './expand.mjs';\nimport useCurrent from './current.mjs';\nimport useTree from './tree.mjs';\nimport { isUndefined } from '../../../../utils/types.mjs';\nimport { hasOwn, isArray, isString } from '@vue/shared';\nvar sortData = function sortData(data, states) {\n  var sortingColumn = states.sortingColumn;\n  if (!sortingColumn || isString(sortingColumn.sortable)) {\n    return data;\n  }\n  return orderBy(data, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);\n};\nvar _doFlattenColumns = function doFlattenColumns(columns) {\n  var result = [];\n  columns.forEach(function (column) {\n    if (column.children && column.children.length > 0) {\n      result.push.apply(result, _doFlattenColumns(column.children));\n    } else {\n      result.push(column);\n    }\n  });\n  return result;\n};\nfunction useWatcher() {\n  var _a;\n  var instance = getCurrentInstance();\n  var _toRefs = toRefs((_a = instance.proxy) == null ? void 0 : _a.$props),\n    tableSize = _toRefs.size;\n  var rowKey = ref(null);\n  var data = ref([]);\n  var _data = ref([]);\n  var isComplex = ref(false);\n  var _columns = ref([]);\n  var originColumns = ref([]);\n  var columns = ref([]);\n  var fixedColumns = ref([]);\n  var rightFixedColumns = ref([]);\n  var leafColumns = ref([]);\n  var fixedLeafColumns = ref([]);\n  var rightFixedLeafColumns = ref([]);\n  var updateOrderFns = [];\n  var leafColumnsLength = ref(0);\n  var fixedLeafColumnsLength = ref(0);\n  var rightFixedLeafColumnsLength = ref(0);\n  var isAllSelected = ref(false);\n  var selection = ref([]);\n  var reserveSelection = ref(false);\n  var selectOnIndeterminate = ref(false);\n  var selectable = ref(null);\n  var filters = ref({});\n  var filteredData = ref(null);\n  var sortingColumn = ref(null);\n  var sortProp = ref(null);\n  var sortOrder = ref(null);\n  var hoverRow = ref(null);\n  var selectedMap = computed(function () {\n    return rowKey.value ? getKeysMap(selection.value, rowKey.value) : void 0;\n  });\n  watch(data, function () {\n    var _a2;\n    if (instance.state) {\n      scheduleLayout(false);\n      var needUpdateFixed = instance.props.tableLayout === \"auto\";\n      if (needUpdateFixed) {\n        (_a2 = instance.refs.tableHeaderRef) == null ? void 0 : _a2.updateFixedColumnStyle();\n      }\n    }\n  }, {\n    deep: true\n  });\n  var assertRowKey = function assertRowKey() {\n    if (!rowKey.value) throw new Error(\"[ElTable] prop row-key is required\");\n  };\n  var _updateChildFixed = function updateChildFixed(column) {\n    var _a2;\n    (_a2 = column.children) == null ? void 0 : _a2.forEach(function (childColumn) {\n      childColumn.fixed = column.fixed;\n      _updateChildFixed(childColumn);\n    });\n  };\n  var selectionInitialFixed = void 0;\n  var updateColumns = function updateColumns() {\n    _columns.value.forEach(function (column) {\n      _updateChildFixed(column);\n    });\n    fixedColumns.value = _columns.value.filter(function (column) {\n      return column.fixed === true || column.fixed === \"left\";\n    });\n    rightFixedColumns.value = _columns.value.filter(function (column) {\n      return column.fixed === \"right\";\n    });\n    if (isUndefined(selectionInitialFixed) && _columns.value[0] && _columns.value[0].type === \"selection\") {\n      selectionInitialFixed = Boolean(_columns.value[0].fixed);\n    }\n    if (fixedColumns.value.length > 0 && _columns.value[0] && _columns.value[0].type === \"selection\") {\n      if (!_columns.value[0].fixed) {\n        _columns.value[0].fixed = true;\n        fixedColumns.value.unshift(_columns.value[0]);\n      } else {\n        var hasNotSelectionColumns = fixedColumns.value.some(function (column) {\n          return column.type !== \"selection\";\n        });\n        if (!hasNotSelectionColumns) {\n          _columns.value[0].fixed = selectionInitialFixed;\n          if (!selectionInitialFixed) fixedColumns.value.shift();\n        } else {\n          selectionInitialFixed = void 0;\n        }\n      }\n    }\n    var notFixedColumns = _columns.value.filter(function (column) {\n      return !column.fixed;\n    });\n    originColumns.value = [].concat(fixedColumns.value).concat(notFixedColumns).concat(rightFixedColumns.value);\n    var leafColumns2 = _doFlattenColumns(notFixedColumns);\n    var fixedLeafColumns2 = _doFlattenColumns(fixedColumns.value);\n    var rightFixedLeafColumns2 = _doFlattenColumns(rightFixedColumns.value);\n    leafColumnsLength.value = leafColumns2.length;\n    fixedLeafColumnsLength.value = fixedLeafColumns2.length;\n    rightFixedLeafColumnsLength.value = rightFixedLeafColumns2.length;\n    columns.value = [].concat(fixedLeafColumns2).concat(leafColumns2).concat(rightFixedLeafColumns2);\n    isComplex.value = fixedColumns.value.length > 0 || rightFixedColumns.value.length > 0;\n  };\n  var scheduleLayout = function scheduleLayout(needUpdateColumns) {\n    var immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (needUpdateColumns) {\n      updateColumns();\n    }\n    if (immediate) {\n      instance.state.doLayout();\n    } else {\n      instance.state.debouncedUpdateLayout();\n    }\n  };\n  var isSelected = function isSelected(row) {\n    if (selectedMap.value) {\n      return !!selectedMap.value[getRowIdentity(row, rowKey.value)];\n    } else {\n      return selection.value.includes(row);\n    }\n  };\n  var clearSelection = function clearSelection() {\n    isAllSelected.value = false;\n    var oldSelection = selection.value;\n    selection.value = [];\n    if (oldSelection.length) {\n      instance.emit(\"selection-change\", []);\n    }\n  };\n  var cleanSelection = function cleanSelection() {\n    var deleted;\n    if (rowKey.value) {\n      deleted = [];\n      var dataMap = getKeysMap(data.value, rowKey.value);\n      for (var key in selectedMap.value) {\n        if (hasOwn(selectedMap.value, key) && !dataMap[key]) {\n          deleted.push(selectedMap.value[key].row);\n        }\n      }\n    } else {\n      deleted = selection.value.filter(function (item) {\n        return !data.value.includes(item);\n      });\n    }\n    if (deleted.length) {\n      var newSelection = selection.value.filter(function (item) {\n        return !deleted.includes(item);\n      });\n      selection.value = newSelection;\n      instance.emit(\"selection-change\", newSelection.slice());\n    }\n  };\n  var getSelectionRows = function getSelectionRows() {\n    return (selection.value || []).slice();\n  };\n  var toggleRowSelection = function toggleRowSelection(row, selected) {\n    var emitChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var ignoreSelectable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var _a2, _b, _c, _d;\n    var treeProps = {\n      children: (_b = (_a2 = instance == null ? void 0 : instance.store) == null ? void 0 : _a2.states) == null ? void 0 : _b.childrenColumnName.value,\n      checkStrictly: (_d = (_c = instance == null ? void 0 : instance.store) == null ? void 0 : _c.states) == null ? void 0 : _d.checkStrictly.value\n    };\n    var changed = toggleRowStatus(selection.value, row, selected, treeProps, ignoreSelectable ? void 0 : selectable.value);\n    if (changed) {\n      var newSelection = (selection.value || []).slice();\n      if (emitChange) {\n        instance.emit(\"select\", newSelection, row);\n      }\n      instance.emit(\"selection-change\", newSelection);\n    }\n  };\n  var _toggleAllSelection = function _toggleAllSelection() {\n    var _a2, _b;\n    var value = selectOnIndeterminate.value ? !isAllSelected.value : !(isAllSelected.value || selection.value.length);\n    isAllSelected.value = value;\n    var selectionChanged = false;\n    var childrenCount = 0;\n    var rowKey2 = (_b = (_a2 = instance == null ? void 0 : instance.store) == null ? void 0 : _a2.states) == null ? void 0 : _b.rowKey.value;\n    var childrenColumnName = instance.store.states.childrenColumnName;\n    var treeProps = {\n      children: childrenColumnName.value,\n      checkStrictly: false\n    };\n    data.value.forEach(function (row, index) {\n      var rowIndex = index + childrenCount;\n      if (toggleRowStatus(selection.value, row, value, treeProps, selectable.value, rowIndex)) {\n        selectionChanged = true;\n      }\n      childrenCount += _getChildrenCount(getRowIdentity(row, rowKey2));\n    });\n    if (selectionChanged) {\n      instance.emit(\"selection-change\", selection.value ? selection.value.slice() : []);\n    }\n    instance.emit(\"select-all\", (selection.value || []).slice());\n  };\n  var updateSelectionByRowKey = function updateSelectionByRowKey() {\n    data.value.forEach(function (row) {\n      var rowId = getRowIdentity(row, rowKey.value);\n      var rowInfo = selectedMap.value[rowId];\n      if (rowInfo) {\n        selection.value[rowInfo.index] = row;\n      }\n    });\n  };\n  var updateAllSelected = function updateAllSelected() {\n    var _a2;\n    if (((_a2 = data.value) == null ? void 0 : _a2.length) === 0) {\n      isAllSelected.value = false;\n      return;\n    }\n    var childrenColumnName = instance.store.states.childrenColumnName;\n    var rowIndex = 0;\n    var selectedCount = 0;\n    var _checkSelectedStatus = function checkSelectedStatus(data2) {\n      var _a3;\n      var _iterator = _createForOfIteratorHelper(data2),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var row = _step.value;\n          var isRowSelectable = selectable.value && selectable.value.call(null, row, rowIndex);\n          if (!isSelected(row)) {\n            if (!selectable.value || isRowSelectable) {\n              return false;\n            }\n          } else {\n            selectedCount++;\n          }\n          rowIndex++;\n          if (((_a3 = row[childrenColumnName.value]) == null ? void 0 : _a3.length) && !_checkSelectedStatus(row[childrenColumnName.value])) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return true;\n    };\n    var isAllSelected_ = _checkSelectedStatus(data.value || []);\n    isAllSelected.value = selectedCount === 0 ? false : isAllSelected_;\n  };\n  var _getChildrenCount = function getChildrenCount(rowKey2) {\n    var _a2;\n    if (!instance || !instance.store) return 0;\n    var treeData = instance.store.states.treeData;\n    var count = 0;\n    var children = (_a2 = treeData.value[rowKey2]) == null ? void 0 : _a2.children;\n    if (children) {\n      count += children.length;\n      children.forEach(function (childKey) {\n        count += _getChildrenCount(childKey);\n      });\n    }\n    return count;\n  };\n  var updateFilters = function updateFilters(columns2, values) {\n    if (!isArray(columns2)) {\n      columns2 = [columns2];\n    }\n    var filters_ = {};\n    columns2.forEach(function (col) {\n      filters.value[col.id] = values;\n      filters_[col.columnKey || col.id] = values;\n    });\n    return filters_;\n  };\n  var updateSort = function updateSort(column, prop, order) {\n    if (sortingColumn.value && sortingColumn.value !== column) {\n      sortingColumn.value.order = null;\n    }\n    sortingColumn.value = column;\n    sortProp.value = prop;\n    sortOrder.value = order;\n  };\n  var execFilter = function execFilter() {\n    var sourceData = unref(_data);\n    Object.keys(filters.value).forEach(function (columnId) {\n      var values = filters.value[columnId];\n      if (!values || values.length === 0) return;\n      var column = getColumnById({\n        columns: columns.value\n      }, columnId);\n      if (column && column.filterMethod) {\n        sourceData = sourceData.filter(function (row) {\n          return values.some(function (value) {\n            return column.filterMethod.call(null, value, row, column);\n          });\n        });\n      }\n    });\n    filteredData.value = sourceData;\n  };\n  var execSort = function execSort() {\n    data.value = sortData(filteredData.value, {\n      sortingColumn: sortingColumn.value,\n      sortProp: sortProp.value,\n      sortOrder: sortOrder.value\n    });\n  };\n  var execQuery = function execQuery() {\n    var ignore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : void 0;\n    if (!(ignore && ignore.filter)) {\n      execFilter();\n    }\n    execSort();\n  };\n  var clearFilter = function clearFilter(columnKeys) {\n    var tableHeaderRef = instance.refs.tableHeaderRef;\n    if (!tableHeaderRef) return;\n    var panels = Object.assign({}, tableHeaderRef.filterPanels);\n    var keys = Object.keys(panels);\n    if (!keys.length) return;\n    if (isString(columnKeys)) {\n      columnKeys = [columnKeys];\n    }\n    if (isArray(columnKeys)) {\n      var columns_ = columnKeys.map(function (key) {\n        return getColumnByKey({\n          columns: columns.value\n        }, key);\n      });\n      keys.forEach(function (key) {\n        var column = columns_.find(function (col) {\n          return col.id === key;\n        });\n        if (column) {\n          column.filteredValue = [];\n        }\n      });\n      instance.store.commit(\"filterChange\", {\n        column: columns_,\n        values: [],\n        silent: true,\n        multi: true\n      });\n    } else {\n      keys.forEach(function (key) {\n        var column = columns.value.find(function (col) {\n          return col.id === key;\n        });\n        if (column) {\n          column.filteredValue = [];\n        }\n      });\n      filters.value = {};\n      instance.store.commit(\"filterChange\", {\n        column: {},\n        values: [],\n        silent: true\n      });\n    }\n  };\n  var clearSort = function clearSort() {\n    if (!sortingColumn.value) return;\n    updateSort(null, null, null);\n    instance.store.commit(\"changeSortCondition\", {\n      silent: true\n    });\n  };\n  var _useExpand = useExpand({\n      data: data,\n      rowKey: rowKey\n    }),\n    setExpandRowKeys = _useExpand.setExpandRowKeys,\n    toggleRowExpansion = _useExpand.toggleRowExpansion,\n    updateExpandRows = _useExpand.updateExpandRows,\n    expandStates = _useExpand.states,\n    isRowExpanded = _useExpand.isRowExpanded;\n  var _useTree = useTree({\n      data: data,\n      rowKey: rowKey\n    }),\n    updateTreeExpandKeys = _useTree.updateTreeExpandKeys,\n    toggleTreeExpansion = _useTree.toggleTreeExpansion,\n    updateTreeData = _useTree.updateTreeData,\n    updateKeyChildren = _useTree.updateKeyChildren,\n    loadOrToggle = _useTree.loadOrToggle,\n    treeStates = _useTree.states;\n  var _useCurrent = useCurrent({\n      data: data,\n      rowKey: rowKey\n    }),\n    updateCurrentRowData = _useCurrent.updateCurrentRowData,\n    updateCurrentRow = _useCurrent.updateCurrentRow,\n    setCurrentRowKey = _useCurrent.setCurrentRowKey,\n    currentData = _useCurrent.states;\n  var setExpandRowKeysAdapter = function setExpandRowKeysAdapter(val) {\n    setExpandRowKeys(val);\n    updateTreeExpandKeys(val);\n  };\n  var toggleRowExpansionAdapter = function toggleRowExpansionAdapter(row, expanded) {\n    var hasExpandColumn = columns.value.some(function (_ref) {\n      var type = _ref.type;\n      return type === \"expand\";\n    });\n    if (hasExpandColumn) {\n      toggleRowExpansion(row, expanded);\n    } else {\n      toggleTreeExpansion(row, expanded);\n    }\n  };\n  return {\n    assertRowKey: assertRowKey,\n    updateColumns: updateColumns,\n    scheduleLayout: scheduleLayout,\n    isSelected: isSelected,\n    clearSelection: clearSelection,\n    cleanSelection: cleanSelection,\n    getSelectionRows: getSelectionRows,\n    toggleRowSelection: toggleRowSelection,\n    _toggleAllSelection: _toggleAllSelection,\n    toggleAllSelection: null,\n    updateSelectionByRowKey: updateSelectionByRowKey,\n    updateAllSelected: updateAllSelected,\n    updateFilters: updateFilters,\n    updateCurrentRow: updateCurrentRow,\n    updateSort: updateSort,\n    execFilter: execFilter,\n    execSort: execSort,\n    execQuery: execQuery,\n    clearFilter: clearFilter,\n    clearSort: clearSort,\n    toggleRowExpansion: toggleRowExpansion,\n    setExpandRowKeysAdapter: setExpandRowKeysAdapter,\n    setCurrentRowKey: setCurrentRowKey,\n    toggleRowExpansionAdapter: toggleRowExpansionAdapter,\n    isRowExpanded: isRowExpanded,\n    updateExpandRows: updateExpandRows,\n    updateCurrentRowData: updateCurrentRowData,\n    loadOrToggle: loadOrToggle,\n    updateTreeData: updateTreeData,\n    updateKeyChildren: updateKeyChildren,\n    states: _objectSpread(_objectSpread(_objectSpread({\n      tableSize: tableSize,\n      rowKey: rowKey,\n      data: data,\n      _data: _data,\n      isComplex: isComplex,\n      _columns: _columns,\n      originColumns: originColumns,\n      columns: columns,\n      fixedColumns: fixedColumns,\n      rightFixedColumns: rightFixedColumns,\n      leafColumns: leafColumns,\n      fixedLeafColumns: fixedLeafColumns,\n      rightFixedLeafColumns: rightFixedLeafColumns,\n      updateOrderFns: updateOrderFns,\n      leafColumnsLength: leafColumnsLength,\n      fixedLeafColumnsLength: fixedLeafColumnsLength,\n      rightFixedLeafColumnsLength: rightFixedLeafColumnsLength,\n      isAllSelected: isAllSelected,\n      selection: selection,\n      reserveSelection: reserveSelection,\n      selectOnIndeterminate: selectOnIndeterminate,\n      selectable: selectable,\n      filters: filters,\n      filteredData: filteredData,\n      sortingColumn: sortingColumn,\n      sortProp: sortProp,\n      sortOrder: sortOrder,\n      hoverRow: hoverRow\n    }, expandStates), treeStates), currentData)\n  };\n}\nexport { useWatcher as default };","map":{"version":3,"names":["sortData","data","states","sortingColumn","isString","sortable","orderBy","sortProp","sortOrder","sortMethod","sortBy","doFlattenColumns","columns","result","forEach","column","children","length","push","apply","useWatcher","_a","instance","getCurrentInstance","_toRefs","toRefs","proxy","$props","tableSize","size","rowKey","ref","_data","isComplex","_columns","originColumns","fixedColumns","rightFixedColumns","leafColumns","fixedLeafColumns","rightFixedLeafColumns","updateOrderFns","leafColumnsLength","fixedLeafColumnsLength","rightFixedLeafColumnsLength","isAllSelected","selection","reserveSelection","selectOnIndeterminate","selectable","filters","filteredData","hoverRow","selectedMap","computed","value","getKeysMap","watch","_a2","state","scheduleLayout","needUpdateFixed","props","tableLayout","refs","tableHeaderRef","updateFixedColumnStyle","deep","assertRowKey","Error","updateChildFixed","childColumn","fixed","selectionInitialFixed","updateColumns","filter","isUndefined","type","Boolean","unshift","hasNotSelectionColumns","some","shift","notFixedColumns","concat","leafColumns2","fixedLeafColumns2","rightFixedLeafColumns2","needUpdateColumns","immediate","arguments","undefined","doLayout","debouncedUpdateLayout","isSelected","row","getRowIdentity","includes","clearSelection","oldSelection","emit","cleanSelection","deleted","dataMap","key","hasOwn","item","newSelection","slice","getSelectionRows","toggleRowSelection","selected","emitChange","ignoreSelectable","_b","_c","_d","treeProps","store","childrenColumnName","checkStrictly","changed","toggleRowStatus","_toggleAllSelection","selectionChanged","childrenCount","rowKey2","index","rowIndex","getChildrenCount","updateSelectionByRowKey","rowId","rowInfo","updateAllSelected","selectedCount","checkSelectedStatus","data2","_a3","_iterator","_createForOfIteratorHelper","_step","s","n","done","isRowSelectable","call","err","e","f","isAllSelected_","treeData","count","childKey","updateFilters","columns2","values","isArray","filters_","col","id","columnKey","updateSort","prop","order","execFilter","sourceData","unref","Object","keys","columnId","getColumnById","filterMethod","execSort","execQuery","ignore","clearFilter","columnKeys","panels","assign","filterPanels","columns_","map","getColumnByKey","find","filteredValue","commit","silent","multi","clearSort","_useExpand","useExpand","setExpandRowKeys","toggleRowExpansion","updateExpandRows","expandStates","isRowExpanded","_useTree","useTree","updateTreeExpandKeys","toggleTreeExpansion","updateTreeData","updateKeyChildren","loadOrToggle","treeStates","_useCurrent","useCurrent","updateCurrentRowData","updateCurrentRow","setCurrentRowKey","currentData","setExpandRowKeysAdapter","val","toggleRowExpansionAdapter","expanded","hasExpandColumn","_ref","toggleAllSelection","_objectSpread"],"sources":["../../../../../../../packages/components/table/src/store/watcher.ts"],"sourcesContent":["// @ts-nocheck\nimport { computed, getCurrentInstance, ref, toRefs, unref, watch } from 'vue'\nimport { hasOwn, isArray, isString, isUndefined } from '@element-plus/utils'\nimport {\n  getColumnById,\n  getColumnByKey,\n  getKeysMap,\n  getRowIdentity,\n  orderBy,\n  toggleRowStatus,\n} from '../util'\nimport useExpand from './expand'\nimport useCurrent from './current'\nimport useTree from './tree'\n\nimport type { Ref } from 'vue'\nimport type { TableColumnCtx } from '../table-column/defaults'\nimport type { DefaultRow, Table, TableRefs } from '../table/defaults'\nimport type { StoreFilter } from '.'\n\nconst sortData = (data, states) => {\n  const sortingColumn = states.sortingColumn\n  if (!sortingColumn || isString(sortingColumn.sortable)) {\n    return data\n  }\n  return orderBy(\n    data,\n    states.sortProp,\n    states.sortOrder,\n    sortingColumn.sortMethod,\n    sortingColumn.sortBy\n  )\n}\n\nconst doFlattenColumns = (columns) => {\n  const result = []\n  columns.forEach((column) => {\n    if (column.children && column.children.length > 0) {\n      // eslint-disable-next-line prefer-spread\n      result.push.apply(result, doFlattenColumns(column.children))\n    } else {\n      result.push(column)\n    }\n  })\n  return result\n}\n\nfunction useWatcher<T>() {\n  const instance = getCurrentInstance() as Table<T>\n  const { size: tableSize } = toRefs(instance.proxy?.$props as any)\n  const rowKey: Ref<string> = ref(null)\n  const data: Ref<T[]> = ref([])\n  const _data: Ref<T[]> = ref([])\n  const isComplex = ref(false)\n  const _columns: Ref<TableColumnCtx<T>[]> = ref([])\n  const originColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const columns: Ref<TableColumnCtx<T>[]> = ref([])\n  const fixedColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const rightFixedColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const leafColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const fixedLeafColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const rightFixedLeafColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const updateOrderFns: (() => void)[] = []\n  const leafColumnsLength = ref(0)\n  const fixedLeafColumnsLength = ref(0)\n  const rightFixedLeafColumnsLength = ref(0)\n  const isAllSelected = ref(false)\n  const selection: Ref<T[]> = ref([])\n  const reserveSelection = ref(false)\n  const selectOnIndeterminate = ref(false)\n  const selectable: Ref<(row: T, index: number) => boolean> = ref(null)\n  const filters: Ref<StoreFilter> = ref({})\n  const filteredData = ref(null)\n  const sortingColumn = ref(null)\n  const sortProp = ref(null)\n  const sortOrder = ref(null)\n  const hoverRow = ref(null)\n\n  const selectedMap = computed(() => {\n    return rowKey.value ? getKeysMap(selection.value, rowKey.value) : undefined\n  })\n\n  watch(\n    data,\n    () => {\n      if (instance.state) {\n        scheduleLayout(false)\n        const needUpdateFixed = instance.props.tableLayout === 'auto'\n        if (needUpdateFixed) {\n          instance.refs.tableHeaderRef?.updateFixedColumnStyle()\n        }\n      }\n    },\n    {\n      deep: true,\n    }\n  )\n\n  // 检查 rowKey 是否存在\n  const assertRowKey = () => {\n    if (!rowKey.value) throw new Error('[ElTable] prop row-key is required')\n  }\n\n  // 更新 fixed\n  const updateChildFixed = (column: TableColumnCtx<T>) => {\n    column.children?.forEach((childColumn) => {\n      childColumn.fixed = column.fixed\n      updateChildFixed(childColumn)\n    })\n  }\n\n  let selectionInitialFixed = undefined\n\n  // 更新列\n  const updateColumns = () => {\n    _columns.value.forEach((column) => {\n      updateChildFixed(column)\n    })\n    fixedColumns.value = _columns.value.filter(\n      (column) => column.fixed === true || column.fixed === 'left'\n    )\n    rightFixedColumns.value = _columns.value.filter(\n      (column) => column.fixed === 'right'\n    )\n\n    if (\n      isUndefined(selectionInitialFixed) &&\n      _columns.value[0] &&\n      _columns.value[0].type === 'selection'\n    ) {\n      selectionInitialFixed = Boolean(_columns.value[0].fixed)\n    }\n\n    if (\n      fixedColumns.value.length > 0 &&\n      _columns.value[0] &&\n      _columns.value[0].type === 'selection'\n    ) {\n      if (!_columns.value[0].fixed) {\n        _columns.value[0].fixed = true\n        fixedColumns.value.unshift(_columns.value[0])\n      } else {\n        const hasNotSelectionColumns = fixedColumns.value.some(\n          (column) => column.type !== 'selection'\n        )\n\n        if (!hasNotSelectionColumns) {\n          _columns.value[0].fixed = selectionInitialFixed\n          if (!selectionInitialFixed) fixedColumns.value.shift()\n        } else {\n          selectionInitialFixed = undefined\n        }\n      }\n    }\n\n    const notFixedColumns = _columns.value.filter((column) => !column.fixed)\n    originColumns.value = []\n      .concat(fixedColumns.value)\n      .concat(notFixedColumns)\n      .concat(rightFixedColumns.value)\n    const leafColumns = doFlattenColumns(notFixedColumns)\n    const fixedLeafColumns = doFlattenColumns(fixedColumns.value)\n    const rightFixedLeafColumns = doFlattenColumns(rightFixedColumns.value)\n\n    leafColumnsLength.value = leafColumns.length\n    fixedLeafColumnsLength.value = fixedLeafColumns.length\n    rightFixedLeafColumnsLength.value = rightFixedLeafColumns.length\n\n    columns.value = []\n      .concat(fixedLeafColumns)\n      .concat(leafColumns)\n      .concat(rightFixedLeafColumns)\n    isComplex.value =\n      fixedColumns.value.length > 0 || rightFixedColumns.value.length > 0\n  }\n\n  // 更新 DOM\n  const scheduleLayout = (needUpdateColumns?: boolean, immediate = false) => {\n    if (needUpdateColumns) {\n      updateColumns()\n    }\n    if (immediate) {\n      instance.state.doLayout()\n    } else {\n      instance.state.debouncedUpdateLayout()\n    }\n  }\n\n  // 选择\n  const isSelected = (row: DefaultRow) => {\n    if (selectedMap.value) {\n      return !!selectedMap.value[getRowIdentity(row, rowKey.value)]\n    } else {\n      return selection.value.includes(row)\n    }\n  }\n\n  const clearSelection = () => {\n    isAllSelected.value = false\n    const oldSelection = selection.value\n    selection.value = []\n    if (oldSelection.length) {\n      instance.emit('selection-change', [])\n    }\n  }\n\n  const cleanSelection = () => {\n    let deleted\n    if (rowKey.value) {\n      deleted = []\n      const dataMap = getKeysMap(data.value, rowKey.value)\n      for (const key in selectedMap.value) {\n        if (hasOwn(selectedMap.value, key) && !dataMap[key]) {\n          deleted.push(selectedMap.value[key].row)\n        }\n      }\n    } else {\n      deleted = selection.value.filter((item) => !data.value.includes(item))\n    }\n    if (deleted.length) {\n      const newSelection = selection.value.filter(\n        (item) => !deleted.includes(item)\n      )\n      selection.value = newSelection\n      instance.emit('selection-change', newSelection.slice())\n    }\n  }\n\n  const getSelectionRows = () => {\n    return (selection.value || []).slice()\n  }\n\n  const toggleRowSelection = (\n    row: T,\n    selected?: boolean,\n    emitChange = true,\n    ignoreSelectable = false\n  ) => {\n    const treeProps = {\n      children: instance?.store?.states?.childrenColumnName.value,\n      checkStrictly: instance?.store?.states?.checkStrictly.value,\n    }\n    const changed = toggleRowStatus(\n      selection.value,\n      row,\n      selected,\n      treeProps,\n      ignoreSelectable ? undefined : selectable.value\n    )\n    if (changed) {\n      const newSelection = (selection.value || []).slice()\n      // 调用 API 修改选中值，不触发 select 事件\n      if (emitChange) {\n        instance.emit('select', newSelection, row)\n      }\n      instance.emit('selection-change', newSelection)\n    }\n  }\n\n  const _toggleAllSelection = () => {\n    // when only some rows are selected (but not all), select or deselect all of them\n    // depending on the value of selectOnIndeterminate\n    const value = selectOnIndeterminate.value\n      ? !isAllSelected.value\n      : !(isAllSelected.value || selection.value.length)\n    isAllSelected.value = value\n\n    let selectionChanged = false\n    let childrenCount = 0\n    const rowKey = instance?.store?.states?.rowKey.value\n    const { childrenColumnName } = instance.store.states\n    const treeProps = {\n      children: childrenColumnName.value,\n      checkStrictly: false, // Disable checkStrictly when selecting all\n    }\n\n    data.value.forEach((row, index) => {\n      const rowIndex = index + childrenCount\n      if (\n        toggleRowStatus(\n          selection.value,\n          row,\n          value,\n          treeProps,\n          selectable.value,\n          rowIndex\n        )\n      ) {\n        selectionChanged = true\n      }\n      childrenCount += getChildrenCount(getRowIdentity(row, rowKey))\n    })\n\n    if (selectionChanged) {\n      instance.emit(\n        'selection-change',\n        selection.value ? selection.value.slice() : []\n      )\n    }\n    instance.emit('select-all', (selection.value || []).slice())\n  }\n\n  const updateSelectionByRowKey = () => {\n    data.value.forEach((row) => {\n      const rowId = getRowIdentity(row, rowKey.value)\n      const rowInfo = selectedMap.value![rowId]\n      if (rowInfo) {\n        selection.value[rowInfo.index] = row\n      }\n    })\n  }\n\n  const updateAllSelected = () => {\n    // data 为 null 时，解构时的默认值会被忽略\n    if (data.value?.length === 0) {\n      isAllSelected.value = false\n      return\n    }\n\n    const { childrenColumnName } = instance.store.states\n    let rowIndex = 0\n    let selectedCount = 0\n\n    const checkSelectedStatus = (data: DefaultRow[]) => {\n      for (const row of data) {\n        const isRowSelectable =\n          selectable.value && selectable.value.call(null, row, rowIndex)\n\n        if (!isSelected(row)) {\n          if (!selectable.value || isRowSelectable) {\n            return false\n          }\n        } else {\n          selectedCount++\n        }\n        rowIndex++\n\n        if (\n          row[childrenColumnName.value]?.length &&\n          !checkSelectedStatus(row[childrenColumnName.value])\n        ) {\n          return false\n        }\n      }\n      return true\n    }\n\n    const isAllSelected_ = checkSelectedStatus(data.value || [])\n    isAllSelected.value = selectedCount === 0 ? false : isAllSelected_\n  }\n\n  const getChildrenCount = (rowKey: string) => {\n    if (!instance || !instance.store) return 0\n    const { treeData } = instance.store.states\n    let count = 0\n    const children = treeData.value[rowKey]?.children\n    if (children) {\n      count += children.length\n      children.forEach((childKey) => {\n        count += getChildrenCount(childKey)\n      })\n    }\n    return count\n  }\n\n  // 过滤与排序\n  const updateFilters = (columns, values) => {\n    if (!isArray(columns)) {\n      columns = [columns]\n    }\n    const filters_ = {}\n    columns.forEach((col) => {\n      filters.value[col.id] = values\n      filters_[col.columnKey || col.id] = values\n    })\n    return filters_\n  }\n\n  const updateSort = (column, prop, order) => {\n    if (sortingColumn.value && sortingColumn.value !== column) {\n      sortingColumn.value.order = null\n    }\n    sortingColumn.value = column\n    sortProp.value = prop\n    sortOrder.value = order\n  }\n\n  const execFilter = () => {\n    let sourceData = unref(_data)\n    Object.keys(filters.value).forEach((columnId) => {\n      const values = filters.value[columnId]\n      if (!values || values.length === 0) return\n      const column = getColumnById(\n        {\n          columns: columns.value,\n        },\n        columnId\n      )\n      if (column && column.filterMethod) {\n        sourceData = sourceData.filter((row) => {\n          return values.some((value) =>\n            column.filterMethod.call(null, value, row, column)\n          )\n        })\n      }\n    })\n\n    filteredData.value = sourceData\n  }\n\n  const execSort = () => {\n    data.value = sortData(filteredData.value, {\n      sortingColumn: sortingColumn.value,\n      sortProp: sortProp.value,\n      sortOrder: sortOrder.value,\n    })\n  }\n\n  // 根据 filters 与 sort 去过滤 data\n  const execQuery = (ignore = undefined) => {\n    if (!(ignore && ignore.filter)) {\n      execFilter()\n    }\n    execSort()\n  }\n\n  const clearFilter = (columnKeys) => {\n    const { tableHeaderRef } = instance.refs as TableRefs\n    if (!tableHeaderRef) return\n    const panels = Object.assign({}, tableHeaderRef.filterPanels)\n\n    const keys = Object.keys(panels)\n    if (!keys.length) return\n\n    if (isString(columnKeys)) {\n      columnKeys = [columnKeys]\n    }\n\n    if (isArray(columnKeys)) {\n      const columns_ = columnKeys.map((key) =>\n        getColumnByKey(\n          {\n            columns: columns.value,\n          },\n          key\n        )\n      )\n      keys.forEach((key) => {\n        const column = columns_.find((col) => col.id === key)\n        if (column) {\n          column.filteredValue = []\n        }\n      })\n      instance.store.commit('filterChange', {\n        column: columns_,\n        values: [],\n        silent: true,\n        multi: true,\n      })\n    } else {\n      keys.forEach((key) => {\n        const column = columns.value.find((col) => col.id === key)\n        if (column) {\n          column.filteredValue = []\n        }\n      })\n\n      filters.value = {}\n      instance.store.commit('filterChange', {\n        column: {},\n        values: [],\n        silent: true,\n      })\n    }\n  }\n\n  const clearSort = () => {\n    if (!sortingColumn.value) return\n\n    updateSort(null, null, null)\n    instance.store.commit('changeSortCondition', {\n      silent: true,\n    })\n  }\n  const {\n    setExpandRowKeys,\n    toggleRowExpansion,\n    updateExpandRows,\n    states: expandStates,\n    isRowExpanded,\n  } = useExpand({\n    data,\n    rowKey,\n  })\n  const {\n    updateTreeExpandKeys,\n    toggleTreeExpansion,\n    updateTreeData,\n    updateKeyChildren,\n    loadOrToggle,\n    states: treeStates,\n  } = useTree({\n    data,\n    rowKey,\n  })\n  const {\n    updateCurrentRowData,\n    updateCurrentRow,\n    setCurrentRowKey,\n    states: currentData,\n  } = useCurrent({\n    data,\n    rowKey,\n  })\n  // 适配层，expand-row-keys 在 Expand 与 TreeTable 中都有使用\n  const setExpandRowKeysAdapter = (val: string[]) => {\n    // 这里会触发额外的计算，但为了兼容性，暂时这么做\n    setExpandRowKeys(val)\n    updateTreeExpandKeys(val)\n  }\n\n  // 展开行与 TreeTable 都要使用\n  const toggleRowExpansionAdapter = (row: T, expanded?: boolean) => {\n    const hasExpandColumn = columns.value.some(({ type }) => type === 'expand')\n    if (hasExpandColumn) {\n      toggleRowExpansion(row, expanded)\n    } else {\n      toggleTreeExpansion(row, expanded)\n    }\n  }\n\n  return {\n    assertRowKey,\n    updateColumns,\n    scheduleLayout,\n    isSelected,\n    clearSelection,\n    cleanSelection,\n    getSelectionRows,\n    toggleRowSelection,\n    _toggleAllSelection,\n    toggleAllSelection: null,\n    updateSelectionByRowKey,\n    updateAllSelected,\n    updateFilters,\n    updateCurrentRow,\n    updateSort,\n    execFilter,\n    execSort,\n    execQuery,\n    clearFilter,\n    clearSort,\n    toggleRowExpansion,\n    setExpandRowKeysAdapter,\n    setCurrentRowKey,\n    toggleRowExpansionAdapter,\n    isRowExpanded,\n    updateExpandRows,\n    updateCurrentRowData,\n    loadOrToggle,\n    updateTreeData,\n    updateKeyChildren,\n    states: {\n      tableSize,\n      rowKey,\n      data,\n      _data,\n      isComplex,\n      _columns,\n      originColumns,\n      columns,\n      fixedColumns,\n      rightFixedColumns,\n      leafColumns,\n      fixedLeafColumns,\n      rightFixedLeafColumns,\n      updateOrderFns,\n      leafColumnsLength,\n      fixedLeafColumnsLength,\n      rightFixedLeafColumnsLength,\n      isAllSelected,\n      selection,\n      reserveSelection,\n      selectOnIndeterminate,\n      selectable,\n      filters,\n      filteredData,\n      sortingColumn,\n      sortProp,\n      sortOrder,\n      hoverRow,\n      ...expandStates,\n      ...treeStates,\n      ...currentData,\n    },\n  }\n}\n\nexport default useWatcher\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}