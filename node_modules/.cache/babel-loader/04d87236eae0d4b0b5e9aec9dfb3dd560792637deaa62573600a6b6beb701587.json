{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref, computed, openBlock, createBlock, unref, withCtx, normalizeClass, resolveDynamicComponent, createCommentVNode, createElementBlock, Fragment, renderList } from 'vue';\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat.js';\nimport { ElSelect } from '../../select/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { timeSelectProps } from './time-select.mjs';\nimport { parseTime, formatTime, compareTime, nextTime } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nvar __default__ = defineComponent({\n  name: \"ElTimeSelect\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: timeSelectProps,\n  emits: [\"change\", \"blur\", \"focus\", \"clear\", \"update:modelValue\"],\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    dayjs.extend(customParseFormat);\n    var ElOption = ElSelect.Option;\n    var nsInput = useNamespace(\"input\");\n    var select = ref();\n    var _disabled = useFormDisabled();\n    var _useLocale = useLocale(),\n      lang = _useLocale.lang;\n    var value = computed(function () {\n      return props.modelValue;\n    });\n    var start = computed(function () {\n      var time = parseTime(props.start);\n      return time ? formatTime(time) : null;\n    });\n    var end = computed(function () {\n      var time = parseTime(props.end);\n      return time ? formatTime(time) : null;\n    });\n    var step = computed(function () {\n      var time = parseTime(props.step);\n      return time ? formatTime(time) : null;\n    });\n    var minTime = computed(function () {\n      var time = parseTime(props.minTime || \"\");\n      return time ? formatTime(time) : null;\n    });\n    var maxTime = computed(function () {\n      var time = parseTime(props.maxTime || \"\");\n      return time ? formatTime(time) : null;\n    });\n    var items = computed(function () {\n      var _a;\n      var result = [];\n      var push = function push(formattedValue, rawValue) {\n        result.push({\n          value: formattedValue,\n          disabled: compareTime(rawValue, minTime.value || \"-1:-1\") <= 0 || compareTime(rawValue, maxTime.value || \"100:100\") >= 0\n        });\n      };\n      if (props.start && props.end && props.step) {\n        var current = start.value;\n        var currentTime;\n        while (current && end.value && compareTime(current, end.value) <= 0) {\n          currentTime = dayjs(current, \"HH:mm\").locale(lang.value).format(props.format);\n          push(currentTime, current);\n          current = nextTime(current, step.value);\n        }\n        if (props.includeEndTime && end.value && ((_a = result[result.length - 1]) == null ? void 0 : _a.value) !== end.value) {\n          var formattedValue = dayjs(end.value, \"HH:mm\").locale(lang.value).format(props.format);\n          push(formattedValue, end.value);\n        }\n      }\n      return result;\n    });\n    var blur = function blur() {\n      var _a, _b;\n      (_b = (_a = select.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n    var focus = function focus() {\n      var _a, _b;\n      (_b = (_a = select.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n    expose({\n      blur: blur,\n      focus: focus\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(unref(ElSelect), {\n        ref_key: \"select\",\n        ref: select,\n        \"model-value\": unref(value),\n        disabled: unref(_disabled),\n        clearable: _ctx.clearable,\n        \"clear-icon\": _ctx.clearIcon,\n        size: _ctx.size,\n        effect: _ctx.effect,\n        placeholder: _ctx.placeholder,\n        \"default-first-option\": \"\",\n        filterable: _ctx.editable,\n        \"empty-values\": _ctx.emptyValues,\n        \"value-on-clear\": _ctx.valueOnClear,\n        \"onUpdate:modelValue\": function onUpdateModelValue(event) {\n          return _ctx.$emit(\"update:modelValue\", event);\n        },\n        onChange: function onChange(event) {\n          return _ctx.$emit(\"change\", event);\n        },\n        onBlur: function onBlur(event) {\n          return _ctx.$emit(\"blur\", event);\n        },\n        onFocus: function onFocus(event) {\n          return _ctx.$emit(\"focus\", event);\n        },\n        onClear: function onClear() {\n          return _ctx.$emit(\"clear\");\n        }\n      }, {\n        prefix: withCtx(function () {\n          return [_ctx.prefixIcon ? (openBlock(), createBlock(unref(ElIcon), {\n            key: 0,\n            \"class\": normalizeClass(unref(nsInput).e(\"prefix-icon\"))\n          }, {\n            \"default\": withCtx(function () {\n              return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))];\n            }),\n            _: 1\n          }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)];\n        }),\n        \"default\": withCtx(function () {\n          return [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(items), function (item) {\n            return openBlock(), createBlock(unref(ElOption), {\n              key: item.value,\n              label: item.value,\n              value: item.value,\n              disabled: item.disabled\n            }, null, 8, [\"label\", \"value\", \"disabled\"]);\n          }), 128))];\n        }),\n        _: 1\n      }, 8, [\"model-value\", \"disabled\", \"clearable\", \"clear-icon\", \"size\", \"effect\", \"placeholder\", \"filterable\", \"empty-values\", \"value-on-clear\", \"onUpdate:modelValue\", \"onChange\", \"onBlur\", \"onFocus\", \"onClear\"]);\n    };\n  }\n}));\nvar TimeSelect = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"time-select.vue\"]]);\nexport { TimeSelect as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}