{"ast":null,"code":"import _defineProperty from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.number.parse-float.js\";\nimport \"core-js/modules/es.number.parse-int.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { defineComponent, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, normalizeStyle, renderSlot, toDisplayString, createCommentVNode, createBlock, withCtx, resolveDynamicComponent } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { WarningFilled, CircleCheck, CircleClose, Check, Close } from '@element-plus/icons-vue';\nimport { progressProps } from './progress.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isFunction, isString } from '@vue/shared';\nvar __default__ = defineComponent({\n  name: \"ElProgress\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: progressProps,\n  setup: function setup(__props) {\n    var props = __props;\n    var STATUS_COLOR_MAP = {\n      success: \"#13ce66\",\n      exception: \"#ff4949\",\n      warning: \"#e6a23c\",\n      \"default\": \"#20a0ff\"\n    };\n    var ns = useNamespace(\"progress\");\n    var barStyle = computed(function () {\n      var barStyle2 = {\n        width: \"\".concat(props.percentage, \"%\"),\n        animationDuration: \"\".concat(props.duration, \"s\")\n      };\n      var color = getCurrentColor(props.percentage);\n      if (color.includes(\"gradient\")) {\n        barStyle2.background = color;\n      } else {\n        barStyle2.backgroundColor = color;\n      }\n      return barStyle2;\n    });\n    var relativeStrokeWidth = computed(function () {\n      return (props.strokeWidth / props.width * 100).toFixed(1);\n    });\n    var radius = computed(function () {\n      if ([\"circle\", \"dashboard\"].includes(props.type)) {\n        return Number.parseInt(\"\".concat(50 - Number.parseFloat(relativeStrokeWidth.value) / 2), 10);\n      }\n      return 0;\n    });\n    var trackPath = computed(function () {\n      var r = radius.value;\n      var isDashboard = props.type === \"dashboard\";\n      return \"\\n          M 50 50\\n          m 0 \".concat(isDashboard ? \"\" : \"-\").concat(r, \"\\n          a \").concat(r, \" \").concat(r, \" 0 1 1 0 \").concat(isDashboard ? \"-\" : \"\").concat(r * 2, \"\\n          a \").concat(r, \" \").concat(r, \" 0 1 1 0 \").concat(isDashboard ? \"\" : \"-\").concat(r * 2, \"\\n          \");\n    });\n    var perimeter = computed(function () {\n      return 2 * Math.PI * radius.value;\n    });\n    var rate = computed(function () {\n      return props.type === \"dashboard\" ? 0.75 : 1;\n    });\n    var strokeDashoffset = computed(function () {\n      var offset = -1 * perimeter.value * (1 - rate.value) / 2;\n      return \"\".concat(offset, \"px\");\n    });\n    var trailPathStyle = computed(function () {\n      return {\n        strokeDasharray: \"\".concat(perimeter.value * rate.value, \"px, \").concat(perimeter.value, \"px\"),\n        strokeDashoffset: strokeDashoffset.value\n      };\n    });\n    var circlePathStyle = computed(function () {\n      return {\n        strokeDasharray: \"\".concat(perimeter.value * rate.value * (props.percentage / 100), \"px, \").concat(perimeter.value, \"px\"),\n        strokeDashoffset: strokeDashoffset.value,\n        transition: \"stroke-dasharray 0.6s ease 0s, stroke 0.6s ease, opacity ease 0.6s\"\n      };\n    });\n    var stroke = computed(function () {\n      var ret;\n      if (props.color) {\n        ret = getCurrentColor(props.percentage);\n      } else {\n        ret = STATUS_COLOR_MAP[props.status] || STATUS_COLOR_MAP[\"default\"];\n      }\n      return ret;\n    });\n    var statusIcon = computed(function () {\n      if (props.status === \"warning\") {\n        return WarningFilled;\n      }\n      if (props.type === \"line\") {\n        return props.status === \"success\" ? CircleCheck : CircleClose;\n      } else {\n        return props.status === \"success\" ? Check : Close;\n      }\n    });\n    var progressTextSize = computed(function () {\n      return props.type === \"line\" ? 12 + props.strokeWidth * 0.4 : props.width * 0.111111 + 2;\n    });\n    var content = computed(function () {\n      return props.format(props.percentage);\n    });\n    function getColors(color) {\n      var span = 100 / color.length;\n      var seriesColors = color.map(function (seriesColor, index) {\n        if (isString(seriesColor)) {\n          return {\n            color: seriesColor,\n            percentage: (index + 1) * span\n          };\n        }\n        return seriesColor;\n      });\n      return seriesColors.sort(function (a, b) {\n        return a.percentage - b.percentage;\n      });\n    }\n    var getCurrentColor = function getCurrentColor(percentage) {\n      var _a;\n      var color = props.color;\n      if (isFunction(color)) {\n        return color(percentage);\n      } else if (isString(color)) {\n        return color;\n      } else {\n        var colors = getColors(color);\n        var _iterator = _createForOfIteratorHelper(colors),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var color2 = _step.value;\n            if (color2.percentage > percentage) return color2.color;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        return (_a = colors[colors.length - 1]) == null ? void 0 : _a.color;\n      }\n    };\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass([unref(ns).b(), unref(ns).m(_ctx.type), unref(ns).is(_ctx.status), _defineProperty(_defineProperty({}, unref(ns).m(\"without-text\"), !_ctx.showText), unref(ns).m(\"text-inside\"), _ctx.textInside)]),\n        role: \"progressbar\",\n        \"aria-valuenow\": _ctx.percentage,\n        \"aria-valuemin\": \"0\",\n        \"aria-valuemax\": \"100\"\n      }, [_ctx.type === \"line\" ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"class\": normalizeClass(unref(ns).b(\"bar\"))\n      }, [createElementVNode(\"div\", {\n        \"class\": normalizeClass(unref(ns).be(\"bar\", \"outer\")),\n        style: normalizeStyle({\n          height: \"\".concat(_ctx.strokeWidth, \"px\")\n        })\n      }, [createElementVNode(\"div\", {\n        \"class\": normalizeClass([unref(ns).be(\"bar\", \"inner\"), _defineProperty({}, unref(ns).bem(\"bar\", \"inner\", \"indeterminate\"), _ctx.indeterminate), _defineProperty({}, unref(ns).bem(\"bar\", \"inner\", \"striped\"), _ctx.striped), _defineProperty({}, unref(ns).bem(\"bar\", \"inner\", \"striped-flow\"), _ctx.stripedFlow)]),\n        style: normalizeStyle(unref(barStyle))\n      }, [(_ctx.showText || _ctx.$slots[\"default\"]) && _ctx.textInside ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"class\": normalizeClass(unref(ns).be(\"bar\", \"innerText\"))\n      }, [renderSlot(_ctx.$slots, \"default\", {\n        percentage: _ctx.percentage\n      }, function () {\n        return [createElementVNode(\"span\", null, toDisplayString(unref(content)), 1)];\n      })], 2)) : createCommentVNode(\"v-if\", true)], 6)], 6)], 2)) : (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        \"class\": normalizeClass(unref(ns).b(\"circle\")),\n        style: normalizeStyle({\n          height: \"\".concat(_ctx.width, \"px\"),\n          width: \"\".concat(_ctx.width, \"px\")\n        })\n      }, [(openBlock(), createElementBlock(\"svg\", {\n        viewBox: \"0 0 100 100\"\n      }, [createElementVNode(\"path\", {\n        \"class\": normalizeClass(unref(ns).be(\"circle\", \"track\")),\n        d: unref(trackPath),\n        stroke: \"var(\".concat(unref(ns).cssVarName(\"fill-color-light\"), \", #e5e9f2)\"),\n        \"stroke-linecap\": _ctx.strokeLinecap,\n        \"stroke-width\": unref(relativeStrokeWidth),\n        fill: \"none\",\n        style: normalizeStyle(unref(trailPathStyle))\n      }, null, 14, [\"d\", \"stroke\", \"stroke-linecap\", \"stroke-width\"]), createElementVNode(\"path\", {\n        \"class\": normalizeClass(unref(ns).be(\"circle\", \"path\")),\n        d: unref(trackPath),\n        stroke: unref(stroke),\n        fill: \"none\",\n        opacity: _ctx.percentage ? 1 : 0,\n        \"stroke-linecap\": _ctx.strokeLinecap,\n        \"stroke-width\": unref(relativeStrokeWidth),\n        style: normalizeStyle(unref(circlePathStyle))\n      }, null, 14, [\"d\", \"stroke\", \"opacity\", \"stroke-linecap\", \"stroke-width\"])]))], 6)), (_ctx.showText || _ctx.$slots[\"default\"]) && !_ctx.textInside ? (openBlock(), createElementBlock(\"div\", {\n        key: 2,\n        \"class\": normalizeClass(unref(ns).e(\"text\")),\n        style: normalizeStyle({\n          fontSize: \"\".concat(unref(progressTextSize), \"px\")\n        })\n      }, [renderSlot(_ctx.$slots, \"default\", {\n        percentage: _ctx.percentage\n      }, function () {\n        return [!_ctx.status ? (openBlock(), createElementBlock(\"span\", {\n          key: 0\n        }, toDisplayString(unref(content)), 1)) : (openBlock(), createBlock(unref(ElIcon), {\n          key: 1\n        }, {\n          \"default\": withCtx(function () {\n            return [(openBlock(), createBlock(resolveDynamicComponent(unref(statusIcon))))];\n          }),\n          _: 1\n        }))];\n      })], 6)) : createCommentVNode(\"v-if\", true)], 10, [\"aria-valuenow\"]);\n    };\n  }\n}));\nvar Progress = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"progress.vue\"]]);\nexport { Progress as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}