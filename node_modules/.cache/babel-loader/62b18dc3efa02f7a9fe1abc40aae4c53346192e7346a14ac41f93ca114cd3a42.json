{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { isVNode, Fragment, Text, Comment, openBlock, createBlock, createCommentVNode } from 'vue';\nimport { debugWarn } from '../error.mjs';\nimport { isArray, hasOwn, camelize } from '@vue/shared';\nvar SCOPE = \"utils/vue/vnode\";\nvar PatchFlags = /* @__PURE__ */function (PatchFlags2) {\n  PatchFlags2[PatchFlags2[\"TEXT\"] = 1] = \"TEXT\";\n  PatchFlags2[PatchFlags2[\"CLASS\"] = 2] = \"CLASS\";\n  PatchFlags2[PatchFlags2[\"STYLE\"] = 4] = \"STYLE\";\n  PatchFlags2[PatchFlags2[\"PROPS\"] = 8] = \"PROPS\";\n  PatchFlags2[PatchFlags2[\"FULL_PROPS\"] = 16] = \"FULL_PROPS\";\n  PatchFlags2[PatchFlags2[\"HYDRATE_EVENTS\"] = 32] = \"HYDRATE_EVENTS\";\n  PatchFlags2[PatchFlags2[\"STABLE_FRAGMENT\"] = 64] = \"STABLE_FRAGMENT\";\n  PatchFlags2[PatchFlags2[\"KEYED_FRAGMENT\"] = 128] = \"KEYED_FRAGMENT\";\n  PatchFlags2[PatchFlags2[\"UNKEYED_FRAGMENT\"] = 256] = \"UNKEYED_FRAGMENT\";\n  PatchFlags2[PatchFlags2[\"NEED_PATCH\"] = 512] = \"NEED_PATCH\";\n  PatchFlags2[PatchFlags2[\"DYNAMIC_SLOTS\"] = 1024] = \"DYNAMIC_SLOTS\";\n  PatchFlags2[PatchFlags2[\"HOISTED\"] = -1] = \"HOISTED\";\n  PatchFlags2[PatchFlags2[\"BAIL\"] = -2] = \"BAIL\";\n  return PatchFlags2;\n}(PatchFlags || {});\nfunction isFragment(node) {\n  return isVNode(node) && node.type === Fragment;\n}\nfunction isText(node) {\n  return isVNode(node) && node.type === Text;\n}\nfunction isComment(node) {\n  return isVNode(node) && node.type === Comment;\n}\nvar TEMPLATE = \"template\";\nfunction isTemplate(node) {\n  return isVNode(node) && node.type === TEMPLATE;\n}\nfunction isValidElementNode(node) {\n  return isVNode(node) && !isFragment(node) && !isComment(node);\n}\nfunction getChildren(node, depth) {\n  if (isComment(node)) return;\n  if (isFragment(node) || isTemplate(node)) {\n    return depth > 0 ? getFirstValidNode(node.children, depth - 1) : void 0;\n  }\n  return node;\n}\nvar getFirstValidNode = function getFirstValidNode(nodes) {\n  var maxDepth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  if (isArray(nodes)) {\n    return getChildren(nodes[0], maxDepth);\n  } else {\n    return getChildren(nodes, maxDepth);\n  }\n};\nfunction renderIf(condition) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  return condition ? renderBlock.apply(void 0, args) : createCommentVNode(\"v-if\", true);\n}\nfunction renderBlock() {\n  return openBlock(), createBlock.apply(void 0, arguments);\n}\nvar getNormalizedProps = function getNormalizedProps(node) {\n  if (!isVNode(node)) {\n    debugWarn(SCOPE, \"[getNormalizedProps] must be a VNode\");\n    return {};\n  }\n  var raw = node.props || {};\n  var type = (isVNode(node.type) ? node.type.props : void 0) || {};\n  var props = {};\n  Object.keys(type).forEach(function (key) {\n    if (hasOwn(type[key], \"default\")) {\n      props[key] = type[key][\"default\"];\n    }\n  });\n  Object.keys(raw).forEach(function (key) {\n    props[camelize(key)] = raw[key];\n  });\n  return props;\n};\nvar ensureOnlyChild = function ensureOnlyChild(children) {\n  if (!isArray(children) || children.length > 1) {\n    throw new Error(\"expect to receive a single Vue element child\");\n  }\n  return children[0];\n};\nvar _flattedChildren = function flattedChildren(children) {\n  var vNodes = isArray(children) ? children : [children];\n  var result = [];\n  vNodes.forEach(function (child) {\n    var _a;\n    if (isArray(child)) {\n      result.push.apply(result, _toConsumableArray(_flattedChildren(child)));\n    } else if (isVNode(child) && ((_a = child.component) == null ? void 0 : _a.subTree)) {\n      result.push.apply(result, [child].concat(_toConsumableArray(_flattedChildren(child.component.subTree))));\n    } else if (isVNode(child) && isArray(child.children)) {\n      result.push.apply(result, _toConsumableArray(_flattedChildren(child.children)));\n    } else {\n      result.push(child);\n    }\n  });\n  return result;\n};\nexport { PatchFlags, ensureOnlyChild, _flattedChildren as flattedChildren, getFirstValidNode, getNormalizedProps, isComment, isFragment, isTemplate, isText, isValidElementNode, renderBlock, renderIf };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}