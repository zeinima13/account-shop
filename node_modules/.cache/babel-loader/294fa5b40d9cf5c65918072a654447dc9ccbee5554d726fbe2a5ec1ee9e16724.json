{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { defineComponent, shallowRef, computed, onBeforeUnmount, provide, toRef, openBlock, createElementBlock, unref, createBlock, createSlots, withCtx, createVNode, mergeProps, renderSlot, createCommentVNode } from 'vue';\nimport { uploadContextKey } from './constants.mjs';\nimport UploadList from './upload-list2.mjs';\nimport UploadContent from './upload-content2.mjs';\nimport { useHandlers } from './use-handlers.mjs';\nimport { uploadProps } from './upload.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nvar __default__ = defineComponent({\n  name: \"ElUpload\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: uploadProps,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    var disabled = useFormDisabled();\n    var uploadRef = shallowRef();\n    var _useHandlers = useHandlers(props, uploadRef),\n      abort = _useHandlers.abort,\n      submit = _useHandlers.submit,\n      clearFiles = _useHandlers.clearFiles,\n      uploadFiles = _useHandlers.uploadFiles,\n      handleStart = _useHandlers.handleStart,\n      handleError = _useHandlers.handleError,\n      handleRemove = _useHandlers.handleRemove,\n      handleSuccess = _useHandlers.handleSuccess,\n      handleProgress = _useHandlers.handleProgress,\n      revokeFileObjectURL = _useHandlers.revokeFileObjectURL;\n    var isPictureCard = computed(function () {\n      return props.listType === \"picture-card\";\n    });\n    var uploadContentProps = computed(function () {\n      return _objectSpread(_objectSpread({}, props), {}, {\n        fileList: uploadFiles.value,\n        onStart: handleStart,\n        onProgress: handleProgress,\n        onSuccess: handleSuccess,\n        onError: handleError,\n        onRemove: handleRemove\n      });\n    });\n    onBeforeUnmount(function () {\n      uploadFiles.value.forEach(revokeFileObjectURL);\n    });\n    provide(uploadContextKey, {\n      accept: toRef(props, \"accept\")\n    });\n    expose({\n      abort: abort,\n      submit: submit,\n      clearFiles: clearFiles,\n      handleStart: handleStart,\n      handleRemove: handleRemove\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", null, [unref(isPictureCard) && _ctx.showFileList ? (openBlock(), createBlock(UploadList, {\n        key: 0,\n        disabled: unref(disabled),\n        \"list-type\": _ctx.listType,\n        files: unref(uploadFiles),\n        crossorigin: _ctx.crossorigin,\n        \"handle-preview\": _ctx.onPreview,\n        onRemove: unref(handleRemove)\n      }, createSlots({\n        append: withCtx(function () {\n          return [createVNode(UploadContent, mergeProps({\n            ref_key: \"uploadRef\",\n            ref: uploadRef\n          }, unref(uploadContentProps)), {\n            \"default\": withCtx(function () {\n              return [_ctx.$slots.trigger ? renderSlot(_ctx.$slots, \"trigger\", {\n                key: 0\n              }) : createCommentVNode(\"v-if\", true), !_ctx.$slots.trigger && _ctx.$slots[\"default\"] ? renderSlot(_ctx.$slots, \"default\", {\n                key: 1\n              }) : createCommentVNode(\"v-if\", true)];\n            }),\n            _: 3\n          }, 16)];\n        }),\n        _: 2\n      }, [_ctx.$slots.file ? {\n        name: \"default\",\n        fn: withCtx(function (_ref2) {\n          var file = _ref2.file,\n            index = _ref2.index;\n          return [renderSlot(_ctx.$slots, \"file\", {\n            file: file,\n            index: index\n          })];\n        })\n      } : void 0]), 1032, [\"disabled\", \"list-type\", \"files\", \"crossorigin\", \"handle-preview\", \"onRemove\"])) : createCommentVNode(\"v-if\", true), !unref(isPictureCard) || unref(isPictureCard) && !_ctx.showFileList ? (openBlock(), createBlock(UploadContent, mergeProps({\n        key: 1,\n        ref_key: \"uploadRef\",\n        ref: uploadRef\n      }, unref(uploadContentProps)), {\n        \"default\": withCtx(function () {\n          return [_ctx.$slots.trigger ? renderSlot(_ctx.$slots, \"trigger\", {\n            key: 0\n          }) : createCommentVNode(\"v-if\", true), !_ctx.$slots.trigger && _ctx.$slots[\"default\"] ? renderSlot(_ctx.$slots, \"default\", {\n            key: 1\n          }) : createCommentVNode(\"v-if\", true)];\n        }),\n        _: 3\n      }, 16)) : createCommentVNode(\"v-if\", true), _ctx.$slots.trigger ? renderSlot(_ctx.$slots, \"default\", {\n        key: 2\n      }) : createCommentVNode(\"v-if\", true), renderSlot(_ctx.$slots, \"tip\"), !unref(isPictureCard) && _ctx.showFileList ? (openBlock(), createBlock(UploadList, {\n        key: 3,\n        disabled: unref(disabled),\n        \"list-type\": _ctx.listType,\n        files: unref(uploadFiles),\n        crossorigin: _ctx.crossorigin,\n        \"handle-preview\": _ctx.onPreview,\n        onRemove: unref(handleRemove)\n      }, createSlots({\n        _: 2\n      }, [_ctx.$slots.file ? {\n        name: \"default\",\n        fn: withCtx(function (_ref3) {\n          var file = _ref3.file,\n            index = _ref3.index;\n          return [renderSlot(_ctx.$slots, \"file\", {\n            file: file,\n            index: index\n          })];\n        })\n      } : void 0]), 1032, [\"disabled\", \"list-type\", \"files\", \"crossorigin\", \"handle-preview\", \"onRemove\"])) : createCommentVNode(\"v-if\", true)]);\n    };\n  }\n}));\nvar Upload = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"upload.vue\"]]);\nexport { Upload as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}