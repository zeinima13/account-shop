{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport { getCurrentInstance, shallowRef, computed, ref, onMounted, watch } from 'vue';\nimport { draggable } from '../utils/draggable.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { addUnit } from '../../../../utils/dom/style.mjs';\nvar useAlphaSlider = function useAlphaSlider(props) {\n  var instance = getCurrentInstance();\n  var _useLocale = useLocale(),\n    t = _useLocale.t;\n  var thumb = shallowRef();\n  var bar = shallowRef();\n  var alpha = computed(function () {\n    return props.color.get(\"alpha\");\n  });\n  var alphaLabel = computed(function () {\n    return t(\"el.colorpicker.alphaLabel\");\n  });\n  function handleClick(event) {\n    var _a;\n    var target = event.target;\n    if (target !== thumb.value) {\n      handleDrag(event);\n    }\n    (_a = thumb.value) == null ? void 0 : _a.focus();\n  }\n  function handleDrag(event) {\n    if (!bar.value || !thumb.value) return;\n    var el = instance.vnode.el;\n    var rect = el.getBoundingClientRect();\n    var _getClientXY = getClientXY(event),\n      clientX = _getClientXY.clientX,\n      clientY = _getClientXY.clientY;\n    if (!props.vertical) {\n      var left = clientX - rect.left;\n      left = Math.max(thumb.value.offsetWidth / 2, left);\n      left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);\n      props.color.set(\"alpha\", Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 100));\n    } else {\n      var top = clientY - rect.top;\n      top = Math.max(thumb.value.offsetHeight / 2, top);\n      top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);\n      props.color.set(\"alpha\", Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 100));\n    }\n  }\n  function handleKeydown(event) {\n    var code = event.code,\n      shiftKey = event.shiftKey;\n    var step = shiftKey ? 10 : 1;\n    switch (code) {\n      case EVENT_CODE.left:\n      case EVENT_CODE.down:\n        event.preventDefault();\n        event.stopPropagation();\n        incrementPosition(-step);\n        break;\n      case EVENT_CODE.right:\n      case EVENT_CODE.up:\n        event.preventDefault();\n        event.stopPropagation();\n        incrementPosition(step);\n        break;\n    }\n  }\n  function incrementPosition(step) {\n    var next = alpha.value + step;\n    next = next < 0 ? 0 : next > 100 ? 100 : next;\n    props.color.set(\"alpha\", next);\n  }\n  return {\n    thumb: thumb,\n    bar: bar,\n    alpha: alpha,\n    alphaLabel: alphaLabel,\n    handleDrag: handleDrag,\n    handleClick: handleClick,\n    handleKeydown: handleKeydown\n  };\n};\nvar useAlphaSliderDOM = function useAlphaSliderDOM(props, _ref) {\n  var bar = _ref.bar,\n    thumb = _ref.thumb,\n    handleDrag = _ref.handleDrag;\n  var instance = getCurrentInstance();\n  var ns = useNamespace(\"color-alpha-slider\");\n  var thumbLeft = ref(0);\n  var thumbTop = ref(0);\n  var background = ref();\n  function getThumbLeft() {\n    if (!thumb.value) return 0;\n    if (props.vertical) return 0;\n    var el = instance.vnode.el;\n    var alpha = props.color.get(\"alpha\");\n    if (!el) return 0;\n    return Math.round(alpha * (el.offsetWidth - thumb.value.offsetWidth / 2) / 100);\n  }\n  function getThumbTop() {\n    if (!thumb.value) return 0;\n    var el = instance.vnode.el;\n    if (!props.vertical) return 0;\n    var alpha = props.color.get(\"alpha\");\n    if (!el) return 0;\n    return Math.round(alpha * (el.offsetHeight - thumb.value.offsetHeight / 2) / 100);\n  }\n  function getBackground() {\n    if (props.color && props.color.value) {\n      var _props$color$toRgb = props.color.toRgb(),\n        r = _props$color$toRgb.r,\n        g = _props$color$toRgb.g,\n        b = _props$color$toRgb.b;\n      return \"linear-gradient(to right, rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", 0) 0%, rgba(\").concat(r, \", \").concat(g, \", \").concat(b, \", 1) 100%)\");\n    }\n    return \"\";\n  }\n  function update() {\n    thumbLeft.value = getThumbLeft();\n    thumbTop.value = getThumbTop();\n    background.value = getBackground();\n  }\n  onMounted(function () {\n    if (!bar.value || !thumb.value) return;\n    var dragConfig = {\n      drag: function drag(event) {\n        handleDrag(event);\n      },\n      end: function end(event) {\n        handleDrag(event);\n      }\n    };\n    draggable(bar.value, dragConfig);\n    draggable(thumb.value, dragConfig);\n    update();\n  });\n  watch(function () {\n    return props.color.get(\"alpha\");\n  }, function () {\n    return update();\n  });\n  watch(function () {\n    return props.color.value;\n  }, function () {\n    return update();\n  });\n  var rootKls = computed(function () {\n    return [ns.b(), ns.is(\"vertical\", props.vertical)];\n  });\n  var barKls = computed(function () {\n    return ns.e(\"bar\");\n  });\n  var thumbKls = computed(function () {\n    return ns.e(\"thumb\");\n  });\n  var barStyle = computed(function () {\n    return {\n      background: background.value\n    };\n  });\n  var thumbStyle = computed(function () {\n    return {\n      left: addUnit(thumbLeft.value),\n      top: addUnit(thumbTop.value)\n    };\n  });\n  return {\n    rootKls: rootKls,\n    barKls: barKls,\n    barStyle: barStyle,\n    thumbKls: thumbKls,\n    thumbStyle: thumbStyle,\n    update: update\n  };\n};\nexport { useAlphaSlider, useAlphaSliderDOM };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}