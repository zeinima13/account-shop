{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { defineComponent, inject, ref, provide, onMounted, watch, unref, onBeforeUnmount, openBlock, createElementBlock, mergeProps, createVNode, withCtx, renderSlot } from 'vue';\nimport { isNil } from 'lodash-unified';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nimport { POPPER_CONTENT_INJECTION_KEY } from './constants.mjs';\nimport { popperContentProps, popperContentEmits } from './content.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { usePopperContentFocusTrap } from './composables/use-focus-trap.mjs';\nimport { usePopperContent } from './composables/use-content.mjs';\nimport { usePopperContentDOM } from './composables/use-content-dom.mjs';\nimport { formItemContextKey } from '../../form/src/constants.mjs';\nimport { NOOP } from '@vue/shared';\nimport { isElement } from '../../../utils/types.mjs';\nvar __default__ = defineComponent({\n  name: \"ElPopperContent\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: popperContentProps,\n  emits: popperContentEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var _usePopperContentFocu = usePopperContentFocusTrap(props, emit),\n      focusStartRef = _usePopperContentFocu.focusStartRef,\n      trapped = _usePopperContentFocu.trapped,\n      onFocusAfterReleased = _usePopperContentFocu.onFocusAfterReleased,\n      onFocusAfterTrapped = _usePopperContentFocu.onFocusAfterTrapped,\n      onFocusInTrap = _usePopperContentFocu.onFocusInTrap,\n      onFocusoutPrevented = _usePopperContentFocu.onFocusoutPrevented,\n      onReleaseRequested = _usePopperContentFocu.onReleaseRequested;\n    var _usePopperContent = usePopperContent(props),\n      attributes = _usePopperContent.attributes,\n      arrowRef = _usePopperContent.arrowRef,\n      contentRef = _usePopperContent.contentRef,\n      styles = _usePopperContent.styles,\n      instanceRef = _usePopperContent.instanceRef,\n      role = _usePopperContent.role,\n      update = _usePopperContent.update;\n    var _usePopperContentDOM = usePopperContentDOM(props, {\n        styles: styles,\n        attributes: attributes,\n        role: role\n      }),\n      ariaModal = _usePopperContentDOM.ariaModal,\n      arrowStyle = _usePopperContentDOM.arrowStyle,\n      contentAttrs = _usePopperContentDOM.contentAttrs,\n      contentClass = _usePopperContentDOM.contentClass,\n      contentStyle = _usePopperContentDOM.contentStyle,\n      updateZIndex = _usePopperContentDOM.updateZIndex;\n    var formItemContext = inject(formItemContextKey, void 0);\n    var arrowOffset = ref();\n    provide(POPPER_CONTENT_INJECTION_KEY, {\n      arrowStyle: arrowStyle,\n      arrowRef: arrowRef,\n      arrowOffset: arrowOffset\n    });\n    if (formItemContext) {\n      provide(formItemContextKey, _objectSpread(_objectSpread({}, formItemContext), {}, {\n        addInputId: NOOP,\n        removeInputId: NOOP\n      }));\n    }\n    var triggerTargetAriaStopWatch = void 0;\n    var updatePopper = function updatePopper() {\n      var shouldUpdateZIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      update();\n      shouldUpdateZIndex && updateZIndex();\n    };\n    var togglePopperAlive = function togglePopperAlive() {\n      updatePopper(false);\n      if (props.visible && props.focusOnShow) {\n        trapped.value = true;\n      } else if (props.visible === false) {\n        trapped.value = false;\n      }\n    };\n    onMounted(function () {\n      watch(function () {\n        return props.triggerTargetEl;\n      }, function (triggerTargetEl, prevTriggerTargetEl) {\n        triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();\n        triggerTargetAriaStopWatch = void 0;\n        var el = unref(triggerTargetEl || contentRef.value);\n        var prevEl = unref(prevTriggerTargetEl || contentRef.value);\n        if (isElement(el)) {\n          triggerTargetAriaStopWatch = watch([role, function () {\n            return props.ariaLabel;\n          }, ariaModal, function () {\n            return props.id;\n          }], function (watches) {\n            [\"role\", \"aria-label\", \"aria-modal\", \"id\"].forEach(function (key, idx) {\n              isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);\n            });\n          }, {\n            immediate: true\n          });\n        }\n        if (prevEl !== el && isElement(prevEl)) {\n          [\"role\", \"aria-label\", \"aria-modal\", \"id\"].forEach(function (key) {\n            prevEl.removeAttribute(key);\n          });\n        }\n      }, {\n        immediate: true\n      });\n      watch(function () {\n        return props.visible;\n      }, togglePopperAlive, {\n        immediate: true\n      });\n    });\n    onBeforeUnmount(function () {\n      triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();\n      triggerTargetAriaStopWatch = void 0;\n    });\n    expose({\n      popperContentRef: contentRef,\n      popperInstanceRef: instanceRef,\n      updatePopper: updatePopper,\n      contentStyle: contentStyle\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", mergeProps({\n        ref_key: \"contentRef\",\n        ref: contentRef\n      }, unref(contentAttrs), {\n        style: unref(contentStyle),\n        \"class\": unref(contentClass),\n        tabindex: \"-1\",\n        onMouseenter: function onMouseenter(e) {\n          return _ctx.$emit(\"mouseenter\", e);\n        },\n        onMouseleave: function onMouseleave(e) {\n          return _ctx.$emit(\"mouseleave\", e);\n        }\n      }), [createVNode(unref(ElFocusTrap), {\n        trapped: unref(trapped),\n        \"trap-on-focus-in\": true,\n        \"focus-trap-el\": unref(contentRef),\n        \"focus-start-el\": unref(focusStartRef),\n        onFocusAfterTrapped: unref(onFocusAfterTrapped),\n        onFocusAfterReleased: unref(onFocusAfterReleased),\n        onFocusin: unref(onFocusInTrap),\n        onFocusoutPrevented: unref(onFocusoutPrevented),\n        onReleaseRequested: unref(onReleaseRequested)\n      }, {\n        \"default\": withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"default\")];\n        }),\n        _: 3\n      }, 8, [\"trapped\", \"focus-trap-el\", \"focus-start-el\", \"onFocusAfterTrapped\", \"onFocusAfterReleased\", \"onFocusin\", \"onFocusoutPrevented\", \"onReleaseRequested\"])], 16, [\"onMouseenter\", \"onMouseleave\"]);\n    };\n  }\n}));\nvar ElPopperContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"content.vue\"]]);\nexport { ElPopperContent as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}