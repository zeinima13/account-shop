{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"payment-container\"\n};\nconst _hoisted_2 = {\n  class: \"payment-methods\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"payment-instructions\"\n};\nconst _hoisted_4 = {\n  class: \"instruction-content\"\n};\nconst _hoisted_5 = {\n  class: \"action-buttons\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_descriptions_item = _resolveComponent(\"el-descriptions-item\");\n  const _component_el_descriptions = _resolveComponent(\"el-descriptions\");\n  const _component_el_radio_button = _resolveComponent(\"el-radio-button\");\n  const _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n  const _component_el_alert = _resolveComponent(\"el-alert\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_card = _resolveComponent(\"el-card\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_card, {\n    class: \"payment-card\"\n  }, {\n    header: _withCtx(() => _cache[1] || (_cache[1] = [_createElementVNode(\"div\", {\n      class: \"card-header\"\n    }, [_createElementVNode(\"span\", null, \"订单信息\")], -1 /* HOISTED */)])),\n    default: _withCtx(() => [_createVNode(_component_el_descriptions, {\n      column: 1,\n      border: \"\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_descriptions_item, {\n        label: \"订单号\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($setup.orderId), 1 /* TEXT */)]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_descriptions_item, {\n        label: \"支付金额\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($setup.totalAmount) + \" USDT\", 1 /* TEXT */)]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }), _createElementVNode(\"div\", _hoisted_2, [_cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"USDT - 请选择您的支付方式\", -1 /* HOISTED */)), _createVNode(_component_el_radio_group, {\n      modelValue: $setup.selectedMethod,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedMethod = $event)\n    }, {\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.paymentMethods, method => {\n        return _openBlock(), _createBlock(_component_el_radio_button, {\n          key: method.name,\n          label: method.name\n        }, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(method.label), 1 /* TEXT */)]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"label\"]);\n      }), 128 /* KEYED_FRAGMENT */))]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"modelValue\"])]), $setup.selectedMethod ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createVNode(_component_el_alert, {\n      title: \"请在支付完成后点击下方已完成支付按钮\",\n      type: \"warning\",\n      closable: false\n    }), _createElementVNode(\"div\", _hoisted_4, _toDisplayString($setup.getInstructions($setup.selectedMethod)), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_5, [_createVNode(_component_el_button, {\n      type: \"primary\",\n      onClick: $setup.confirmPayment\n    }, {\n      default: _withCtx(() => _cache[3] || (_cache[3] = [_createTextVNode(\"已完成支付\")])),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n      onClick: $setup.cancelOrder\n    }, {\n      default: _withCtx(() => _cache[4] || (_cache[4] = [_createTextVNode(\"取消订单\")])),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"])])]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createVNode","_component_el_card","header","_withCtx","_cache","_createElementVNode","default","_component_el_descriptions","column","border","_component_el_descriptions_item","label","_createTextVNode","_toDisplayString","$setup","orderId","_","totalAmount","_hoisted_2","_component_el_radio_group","modelValue","selectedMethod","$event","_Fragment","_renderList","paymentMethods","method","_createBlock","_component_el_radio_button","name","_hoisted_3","_component_el_alert","title","type","closable","_hoisted_4","getInstructions","_createCommentVNode","_hoisted_5","_component_el_button","onClick","confirmPayment","cancelOrder"],"sources":["C:\\Users\\ASUS\\CascadeProjects\\account-shop\\src\\views\\Payment.vue"],"sourcesContent":["<template>\n  <div class=\"payment-container\">\n    <el-card class=\"payment-card\">\n      <template #header>\n        <div class=\"card-header\">\n          <span>订单信息</span>\n        </div>\n      </template>\n      \n      <el-descriptions :column=\"1\" border>\n        <el-descriptions-item label=\"订单号\">{{ orderId }}</el-descriptions-item>\n        <el-descriptions-item label=\"支付金额\">{{ totalAmount }} USDT</el-descriptions-item>\n      </el-descriptions>\n\n      <div class=\"payment-methods\">\n        <h3>USDT - 请选择您的支付方式</h3>\n        <el-radio-group v-model=\"selectedMethod\">\n          <el-radio-button v-for=\"method in paymentMethods\" \n            :key=\"method.name\" \n            :label=\"method.name\">\n            {{ method.label }}\n          </el-radio-button>\n        </el-radio-group>\n      </div>\n\n      <div class=\"payment-instructions\" v-if=\"selectedMethod\">\n        <el-alert\n          title=\"请在支付完成后点击下方已完成支付按钮\"\n          type=\"warning\"\n          :closable=\"false\"\n        />\n        <div class=\"instruction-content\">\n          {{ getInstructions(selectedMethod) }}\n        </div>\n      </div>\n\n      <div class=\"action-buttons\">\n        <el-button type=\"primary\" @click=\"confirmPayment\">已完成支付</el-button>\n        <el-button @click=\"cancelOrder\">取消订单</el-button>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\n\nexport default {\n  name: 'Payment',\n  setup() {\n    const route = useRoute()\n    const router = useRouter()\n    const orderId = ref('')\n    const totalAmount = ref(0)\n    const selectedMethod = ref('')\n\n    const paymentMethods = [\n      { name: 'imToken', label: 'imToken - TRC20/ERC20/BEP20' },\n      { name: 'TokenPocket', label: 'TokenPocket - TRC20/ERC20/BEP20' },\n      { name: 'MetaMask', label: 'MetaMask - ERC20' }\n    ]\n\n    onMounted(() => {\n      // 生成订单号\n      orderId.value = 'BL' + Date.now()\n      // 计算总金额\n      const { productId, quantity } = route.query\n      // 这里应该从API获取商品价格\n      totalAmount.value = 99 * quantity\n    })\n\n    const getInstructions = (method) => {\n      return `请使用${method}钱包扫描二维码完成支付，或直接转账至以下地址：\\nTRC20地址：TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t`\n    }\n\n    const confirmPayment = () => {\n      // 这里应该调用API验证支付状态\n      ElMessage.success('支付成功！')\n      router.push('/orders')\n    }\n\n    const cancelOrder = () => {\n      router.push('/')\n    }\n\n    return {\n      orderId,\n      totalAmount,\n      selectedMethod,\n      paymentMethods,\n      getInstructions,\n      confirmPayment,\n      cancelOrder\n    }\n  }\n}\n</script>\n\n<style scoped>\n.payment-container {\n  max-width: 800px;\n  margin: 20px auto;\n  padding: 0 20px;\n}\n\n.payment-card {\n  margin-bottom: 20px;\n}\n\n.card-header {\n  font-size: 18px;\n  font-weight: bold;\n}\n\n.payment-methods {\n  margin: 20px 0;\n}\n\n.payment-instructions {\n  margin: 20px 0;\n}\n\n.instruction-content {\n  margin: 20px 0;\n  padding: 20px;\n  background: #f5f7fa;\n  border-radius: 4px;\n  white-space: pre-line;\n}\n\n.action-buttons {\n  margin-top: 20px;\n  text-align: center;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAmB;;EAarBA,KAAK,EAAC;AAAiB;;EAdlCC,GAAA;EAyBWD,KAAK,EAAC;;;EAMJA,KAAK,EAAC;AAAqB;;EAK7BA,KAAK,EAAC;AAAgB;;;;;;;;;uBAnC/BE,mBAAA,CAwCM,OAxCNC,UAwCM,GAvCJC,YAAA,CAsCUC,kBAAA;IAtCDL,KAAK,EAAC;EAAc;IAChBM,MAAM,EAAAC,QAAA,CACf,MAEMC,MAAA,QAAAA,MAAA,OAFNC,mBAAA,CAEM;MAFDT,KAAK,EAAC;IAAa,IACtBS,mBAAA,CAAiB,cAAX,MAAI,E;IALpBC,OAAA,EAAAH,QAAA,CASM,MAGkB,CAHlBH,YAAA,CAGkBO,0BAAA;MAHAC,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAN;;MATnCH,OAAA,EAAAH,QAAA,CAUQ,MAAsE,CAAtEH,YAAA,CAAsEU,+BAAA;QAAhDC,KAAK,EAAC;MAAK;QAVzCL,OAAA,EAAAH,QAAA,CAU0C,MAAa,CAVvDS,gBAAA,CAAAC,gBAAA,CAU6CC,MAAA,CAAAC,OAAO,iB;QAVpDC,CAAA;UAWQhB,YAAA,CAAgFU,+BAAA;QAA1DC,KAAK,EAAC;MAAM;QAX1CL,OAAA,EAAAH,QAAA,CAW2C,MAAiB,CAX5DS,gBAAA,CAAAC,gBAAA,CAW8CC,MAAA,CAAAG,WAAW,IAAG,OAAK,gB;QAXjED,CAAA;;MAAAA,CAAA;QAcMX,mBAAA,CASM,OATNa,UASM,G,0BARJb,mBAAA,CAAyB,YAArB,kBAAgB,sBACpBL,YAAA,CAMiBmB,yBAAA;MAtBzBC,UAAA,EAgBiCN,MAAA,CAAAO,cAAc;MAhB/C,uBAAAjB,MAAA,QAAAA,MAAA,MAAAkB,MAAA,IAgBiCR,MAAA,CAAAO,cAAc,GAAAC,MAAA;;MAhB/ChB,OAAA,EAAAH,QAAA,CAiB2B,MAAgC,E,kBAAjDL,mBAAA,CAIkByB,SAAA,QArB5BC,WAAA,CAiB4CV,MAAA,CAAAW,cAAc,EAAxBC,MAAM;6BAA9BC,YAAA,CAIkBC,0BAAA;UAHf/B,GAAG,EAAE6B,MAAM,CAACG,IAAI;UAChBlB,KAAK,EAAEe,MAAM,CAACG;;UAnB3BvB,OAAA,EAAAH,QAAA,CAoBY,MAAkB,CApB9BS,gBAAA,CAAAC,gBAAA,CAoBea,MAAM,CAACf,KAAK,iB;UApB3BK,CAAA;;;MAAAA,CAAA;yCAyB8CF,MAAA,CAAAO,cAAc,I,cAAtDvB,mBAAA,CASM,OATNgC,UASM,GARJ9B,YAAA,CAIE+B,mBAAA;MAHAC,KAAK,EAAC,oBAAoB;MAC1BC,IAAI,EAAC,SAAS;MACbC,QAAQ,EAAE;QAEb7B,mBAAA,CAEM,OAFN8B,UAEM,EAAAtB,gBAAA,CADDC,MAAA,CAAAsB,eAAe,CAACtB,MAAA,CAAAO,cAAc,kB,KAhC3CgB,mBAAA,gBAoCMhC,mBAAA,CAGM,OAHNiC,UAGM,GAFJtC,YAAA,CAAmEuC,oBAAA;MAAxDN,IAAI,EAAC,SAAS;MAAEO,OAAK,EAAE1B,MAAA,CAAA2B;;MArC1CnC,OAAA,EAAAH,QAAA,CAqC0D,MAAKC,MAAA,QAAAA,MAAA,OArC/DQ,gBAAA,CAqC0D,OAAK,E;MArC/DI,CAAA;oCAsCQhB,YAAA,CAAgDuC,oBAAA;MAApCC,OAAK,EAAE1B,MAAA,CAAA4B;IAAW;MAtCtCpC,OAAA,EAAAH,QAAA,CAsCwC,MAAIC,MAAA,QAAAA,MAAA,OAtC5CQ,gBAAA,CAsCwC,MAAI,E;MAtC5CI,CAAA;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}