{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, computed, provide, toRefs, watch, openBlock, createBlock, resolveDynamicComponent, unref, normalizeClass, withCtx, renderSlot, nextTick } from 'vue';\nimport { pick } from 'lodash-unified';\nimport { checkboxGroupProps, checkboxGroupEmits } from './checkbox-group.mjs';\nimport { checkboxGroupContextKey } from './constants.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nvar __default__ = defineComponent({\n  name: \"ElCheckboxGroup\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: checkboxGroupProps,\n  emits: checkboxGroupEmits,\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var ns = useNamespace(\"checkbox\");\n    var _useFormItem = useFormItem(),\n      formItem = _useFormItem.formItem;\n    var _useFormItemInputId = useFormItemInputId(props, {\n        formItemContext: formItem\n      }),\n      groupId = _useFormItemInputId.inputId,\n      isLabeledByFormItem = _useFormItemInputId.isLabeledByFormItem;\n    var changeEvent = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(value) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              emit(UPDATE_MODEL_EVENT, value);\n              _context.next = 3;\n              return nextTick();\n            case 3:\n              emit(\"change\", value);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function changeEvent(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var modelValue = computed({\n      get: function get() {\n        return props.modelValue;\n      },\n      set: function set(val) {\n        changeEvent(val);\n      }\n    });\n    provide(checkboxGroupContextKey, _objectSpread(_objectSpread({}, pick(toRefs(props), [\"size\", \"min\", \"max\", \"disabled\", \"validateEvent\", \"fill\", \"textColor\"])), {}, {\n      modelValue: modelValue,\n      changeEvent: changeEvent\n    }));\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      if (props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\")[\"catch\"](function (err) {\n          return debugWarn(err);\n        });\n      }\n    });\n    return function (_ctx, _cache) {\n      var _a;\n      return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {\n        id: unref(groupId),\n        \"class\": normalizeClass(unref(ns).b(\"group\")),\n        role: \"group\",\n        \"aria-label\": !unref(isLabeledByFormItem) ? _ctx.ariaLabel || \"checkbox-group\" : void 0,\n        \"aria-labelledby\": unref(isLabeledByFormItem) ? (_a = unref(formItem)) == null ? void 0 : _a.labelId : void 0\n      }, {\n        \"default\": withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"default\")];\n        }),\n        _: 3\n      }, 8, [\"id\", \"class\", \"aria-label\", \"aria-labelledby\"]);\n    };\n  }\n}));\nvar CheckboxGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"checkbox-group.vue\"]]);\nexport { CheckboxGroup as default };","map":{"version":3,"names":["name","ns","useNamespace","_useFormItem","useFormItem","formItem","_useFormItemInputId","useFormItemInputId","props","formItemContext","groupId","inputId","isLabeledByFormItem","changeEvent","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","value","wrap","_callee$","_context","prev","next","emit","UPDATE_MODEL_EVENT","nextTick","stop","_x","apply","arguments","modelValue","computed","get","set","val","provide","checkboxGroupContextKey","_objectSpread","pick","toRefs","watch","validateEvent","validate","err","debugWarn","_ctx","_cache","_a","openBlock","createBlock","resolveDynamicComponent","tag"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-group.vue"],"sourcesContent":["<template>\n  <component\n    :is=\"tag\"\n    :id=\"groupId\"\n    :class=\"ns.b('group')\"\n    role=\"group\"\n    :aria-label=\"\n      !isLabeledByFormItem ? ariaLabel || 'checkbox-group' : undefined\n    \"\n    :aria-labelledby=\"isLabeledByFormItem ? formItem?.labelId : undefined\"\n  >\n    <slot />\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, provide, toRefs, watch } from 'vue'\nimport { pick } from 'lodash-unified'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormItem, useFormItemInputId } from '@element-plus/components/form'\nimport { checkboxGroupEmits, checkboxGroupProps } from './checkbox-group'\nimport { checkboxGroupContextKey } from './constants'\n\nimport type { CheckboxGroupValueType } from './checkbox-group'\n\ndefineOptions({\n  name: 'ElCheckboxGroup',\n})\n\nconst props = defineProps(checkboxGroupProps)\nconst emit = defineEmits(checkboxGroupEmits)\nconst ns = useNamespace('checkbox')\n\nconst { formItem } = useFormItem()\nconst { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst changeEvent = async (value: CheckboxGroupValueType) => {\n  emit(UPDATE_MODEL_EVENT, value)\n  await nextTick()\n  emit('change', value)\n}\n\nconst modelValue = computed({\n  get() {\n    return props.modelValue\n  },\n  set(val: CheckboxGroupValueType) {\n    changeEvent(val)\n  },\n})\n\nprovide(checkboxGroupContextKey, {\n  ...pick(toRefs(props), [\n    'size',\n    'min',\n    'max',\n    'disabled',\n    'validateEvent',\n    'fill',\n    'textColor',\n  ]),\n  modelValue,\n  changeEvent,\n})\n\nwatch(\n  () => props.modelValue,\n  () => {\n    if (props.validateEvent) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n</script>\n"],"mappings":";;;;;;;;;;;;iCA2Bc;EACZA,IAAM;AACR;;;;;;;IAIM,IAAAC,EAAA,GAAKC,YAAA,CAAa,UAAU;IAE5B,IAAAC,YAAA,GAAeC,WAAY;MAAzBC,QAAS,GAAAF,YAAA,CAATE,QAAS;IACjB,IAAAC,mBAAA,GAAkDC,kBAAA,CAAmBC,KAAO;QAC1EC,eAAiB,EAAAJ;MAAA,CAClB;MAFgBK,OAAA,GAAAJ,mBAAA,CAATK,OAAS;MAASC,mBAAoB,GAAAN,mBAAA,CAApBM,mBAAoB;IAIxC,IAAAC,WAAA;MAAA,IAAAC,KAAA,GAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAc,SAAAC,QAAOC,KAAkC;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAC3DC,IAAA,CAAKC,kBAAA,EAAoBP,KAAK;cAAAG,QAAA,CAAAE,IAAA;cAAA,OACxBG,QAAS;YAAA;cACfF,IAAA,CAAK,UAAUN,KAAK;YAAA;YAAA;cAAA,OAAAG,QAAA,CAAAM,IAAA;UAAA;QAAA,GAAAV,OAAA;MAAA,CACtB;MAAA,gBAJML,YAAAgB,EAAA;QAAA,OAAAf,KAAA,CAAAgB,KAAA,OAAAC,SAAA;MAAA;IAAA,GAIN;IAEA,IAAMC,UAAA,GAAaC,QAAS;MAC1BC,GAAM,WAANA,GAAMA,CAAA;QACJ,OAAO1B,KAAM,CAAAwB,UAAA;MAAA,CACf;MACAG,GAAA,WAAAA,IAAIC,GAA6B;QAC/BvB,WAAA,CAAYuB,GAAG;MAAA;IACjB,CACD;IAEDC,OAAA,CAAQC,uBAAyB,EAAAC,aAAA,CAAAA,aAAA,KAC5BC,IAAA,CAAKC,MAAO,CAAAjC,KAAK,CAAG,GACrB,QACA,OACA,OACA,YACA,iBACA,QACA,YACD;MACDwB,UAAA,EAAAA,UAAA;MACAnB,WAAA,EAAAA;IAAA,EACD;IAED6B,KAAA;MAAA,OAAAlC,KAAA,CAAAwB,UAAA;IAAA;MACE,IAAAxB,KAAY,CAAAmC,aAAA;QACNtC,QAAA,oBAAAA,QAAA,CAAAuC,QAAA,8BAAAC,GAAA;UAAA,OAAAC,SAAA,CAAAD,GAAA;QAAA;MACJ;IACE,CAAU;IACZ,iBAAAE,IAAA,EAAAC,MAAA;MACF,IAAAC,EAAA;MACF,OAAAC,SAAA,IAAAC,WAAA,CAAAC,uBAAA,CAAAL,IAAA,CAAAM,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}