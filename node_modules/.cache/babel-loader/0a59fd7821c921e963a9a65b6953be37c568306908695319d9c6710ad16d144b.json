{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { inject, ref, computed, toRaw } from 'vue';\nimport { isEqual } from 'lodash-unified';\nimport { checkboxGroupContextKey } from '../constants.mjs';\nimport { isPropAbsent, isBoolean } from '../../../../utils/types.mjs';\nimport { isArray, isObject } from '@vue/shared';\nimport { useFormSize } from '../../../form/src/hooks/use-form-common-props.mjs';\nvar useCheckboxStatus = function useCheckboxStatus(props, slots, _ref) {\n  var model = _ref.model;\n  var checkboxGroup = inject(checkboxGroupContextKey, void 0);\n  var isFocused = ref(false);\n  var actualValue = computed(function () {\n    if (!isPropAbsent(props.value)) {\n      return props.value;\n    }\n    return props.label;\n  });\n  var isChecked = computed(function () {\n    var value = model.value;\n    if (isBoolean(value)) {\n      return value;\n    } else if (isArray(value)) {\n      if (isObject(actualValue.value)) {\n        return value.map(toRaw).some(function (o) {\n          return isEqual(o, actualValue.value);\n        });\n      } else {\n        return value.map(toRaw).includes(actualValue.value);\n      }\n    } else if (value !== null && value !== void 0) {\n      return value === props.trueValue || value === props.trueLabel;\n    } else {\n      return !!value;\n    }\n  });\n  var checkboxButtonSize = useFormSize(computed(function () {\n    var _a;\n    return (_a = checkboxGroup == null ? void 0 : checkboxGroup.size) == null ? void 0 : _a.value;\n  }), {\n    prop: true\n  });\n  var checkboxSize = useFormSize(computed(function () {\n    var _a;\n    return (_a = checkboxGroup == null ? void 0 : checkboxGroup.size) == null ? void 0 : _a.value;\n  }));\n  var hasOwnLabel = computed(function () {\n    return !!slots[\"default\"] || !isPropAbsent(actualValue.value);\n  });\n  return {\n    checkboxButtonSize: checkboxButtonSize,\n    isChecked: isChecked,\n    isFocused: isFocused,\n    checkboxSize: checkboxSize,\n    hasOwnLabel: hasOwnLabel,\n    actualValue: actualValue\n  };\n};\nexport { useCheckboxStatus };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}