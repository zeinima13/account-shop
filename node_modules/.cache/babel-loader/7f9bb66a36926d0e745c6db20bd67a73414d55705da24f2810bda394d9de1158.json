{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref, computed, watch, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, createBlock, withCtx, resolveDynamicComponent, renderSlot } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { avatarProps, avatarEmits } from './avatar2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isString } from '@vue/shared';\nimport { isNumber } from '../../../utils/types.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nvar __default__ = defineComponent({\n  name: \"ElAvatar\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: avatarProps,\n  emits: avatarEmits,\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var ns = useNamespace(\"avatar\");\n    var hasLoadError = ref(false);\n    var avatarClass = computed(function () {\n      var size = props.size,\n        icon = props.icon,\n        shape = props.shape;\n      var classList = [ns.b()];\n      if (isString(size)) classList.push(ns.m(size));\n      if (icon) classList.push(ns.m(\"icon\"));\n      if (shape) classList.push(ns.m(shape));\n      return classList;\n    });\n    var sizeStyle = computed(function () {\n      var size = props.size;\n      return isNumber(size) ? ns.cssVarBlock({\n        size: addUnit(size) || \"\"\n      }) : void 0;\n    });\n    var fitStyle = computed(function () {\n      return {\n        objectFit: props.fit\n      };\n    });\n    watch(function () {\n      return props.src;\n    }, function () {\n      return hasLoadError.value = false;\n    });\n    function handleError(e) {\n      hasLoadError.value = true;\n      emit(\"error\", e);\n    }\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"span\", {\n        \"class\": normalizeClass(unref(avatarClass)),\n        style: normalizeStyle(unref(sizeStyle))\n      }, [(_ctx.src || _ctx.srcSet) && !hasLoadError.value ? (openBlock(), createElementBlock(\"img\", {\n        key: 0,\n        src: _ctx.src,\n        alt: _ctx.alt,\n        srcset: _ctx.srcSet,\n        style: normalizeStyle(unref(fitStyle)),\n        onError: handleError\n      }, null, 44, [\"src\", \"alt\", \"srcset\"])) : _ctx.icon ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 1\n      }, {\n        \"default\": withCtx(function () {\n          return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))];\n        }),\n        _: 1\n      })) : renderSlot(_ctx.$slots, \"default\", {\n        key: 2\n      })], 6);\n    };\n  }\n}));\nvar Avatar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"avatar.vue\"]]);\nexport { Avatar as default };","map":{"version":3,"names":["name","ns","useNamespace","hasLoadError","ref","avatarClass","computed","size","props","icon","shape","classList","b","isString","push","m","sizeStyle","isNumber","cssVarBlock","addUnit","fitStyle","objectFit","fit","watch","src","value","handleError","e","emit"],"sources":["../../../../../../packages/components/avatar/src/avatar.vue"],"sourcesContent":["<template>\n  <span :class=\"avatarClass\" :style=\"sizeStyle\">\n    <img\n      v-if=\"(src || srcSet) && !hasLoadError\"\n      :src=\"src\"\n      :alt=\"alt\"\n      :srcset=\"srcSet\"\n      :style=\"fitStyle\"\n      @error=\"handleError\"\n    />\n    <el-icon v-else-if=\"icon\">\n      <component :is=\"icon\" />\n    </el-icon>\n    <slot v-else />\n  </span>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref, watch } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { useNamespace } from '@element-plus/hooks'\nimport { addUnit, isNumber, isString } from '@element-plus/utils'\nimport { avatarEmits, avatarProps } from './avatar'\n\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElAvatar',\n})\n\nconst props = defineProps(avatarProps)\nconst emit = defineEmits(avatarEmits)\n\nconst ns = useNamespace('avatar')\n\nconst hasLoadError = ref(false)\n\nconst avatarClass = computed(() => {\n  const { size, icon, shape } = props\n  const classList = [ns.b()]\n  if (isString(size)) classList.push(ns.m(size))\n  if (icon) classList.push(ns.m('icon'))\n  if (shape) classList.push(ns.m(shape))\n  return classList\n})\n\nconst sizeStyle = computed(() => {\n  const { size } = props\n  return isNumber(size)\n    ? (ns.cssVarBlock({\n        size: addUnit(size) || '',\n      }) as CSSProperties)\n    : undefined\n})\n\nconst fitStyle = computed<CSSProperties>(() => ({\n  objectFit: props.fit,\n}))\n\n// need reset hasLoadError to false if src changed\nwatch(\n  () => props.src,\n  () => (hasLoadError.value = false)\n)\n\nfunction handleError(e: Event) {\n  hasLoadError.value = true\n  emit('error', e)\n}\n</script>\n"],"mappings":";;;;;;;;;;iCA0Bc;EACZA,IAAM;AACR;;;;;;;IAKM,IAAAC,EAAA,GAAKC,YAAA,CAAa,QAAQ;IAE1B,IAAAC,YAAA,GAAeC,GAAA,CAAI,KAAK;IAExB,IAAAC,WAAA,GAAcC,QAAA,CAAS,YAAM;MACjC,IAAQC,IAAA,GAAsBC,KAAA,CAAtBD,IAAA;QAAME,IAAM,GAAUD,KAAA,CAAhBC,IAAM;QAAAC,KAAA,GAAUF,KAAA,CAAVE,KAAA;MACpB,IAAMC,SAAY,IAACV,EAAG,CAAAW,CAAA,EAAG;MACrB,IAAAC,QAAA,CAASN,IAAI,CAAG,EACpBI,SAAoB,CAAAG,IAAA,CAAAb,EAAA,CAAAc,CAAA,CAAAR,IAAQ;MAC5B,IAAIE,IAAA,EACGE,SAAA,CAAAG,IAAA,CAAAb,EAAA,CAAAc,CAAA;MACR,IAAAL,KAAA,EAEKC,SAAA,CAAAG,IAAY,CAAAb,EAAA,CAAAc,CAAA,CAAAL,KAAe;MACzB,OAAAC,SAAW;IACjB;IAEM,IAAAK,SAAc,GAAAV,QAAS;MACzB,IACAC,IAAA,GAAAC,KAAA,CAAAD,IAAA;MACL,OAAAU,QAAA,CAAAV,IAAA,IAAAN,EAAA,CAAAiB,WAAA;QAEKX,IAAA,EAAAY,OAAW,CAAAZ,IAAA,KAA+B;MAAA,WACnC;IAAM,CACjB;IAGF,IAAAa,QAAA,GAAAd,QAAA;MAAA;QACEe,SAAY,EAAAb,KAAA,CAAAc;MAAA,CACZ;IAAA;IACFC,KAAA;MAAA,OAAAf,KAAA,CAAAgB,GAAA;IAAA;MAAA,OAAArB,YAAA,CAAAsB,KAAA;IAAA;IAEA,SAASC,YAAYC,CAAU;MAC7BxB,YAAA,CAAasB,KAAQ;MACrBG,IAAA,CAAK,SAASD,CAAC;IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}