{"ast":null,"code":"import _typeof from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _classCallCheck from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.is-nan.js\";\nimport \"core-js/modules/es.number.parse-float.js\";\nimport \"core-js/modules/es.number.parse-int.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { hasOwn, isString } from '@vue/shared';\nvar hsv2hsl = function hsv2hsl(hue, sat, val) {\n  return [hue, sat * val / ((hue = (2 - sat) * val) < 1 ? hue : 2 - hue) || 0, hue / 2];\n};\nvar isOnePointZero = function isOnePointZero(n) {\n  return isString(n) && n.includes(\".\") && Number.parseFloat(n) === 1;\n};\nvar isPercentage = function isPercentage(n) {\n  return isString(n) && n.includes(\"%\");\n};\nvar bound01 = function bound01(value, max) {\n  if (isOnePointZero(value)) value = \"100%\";\n  var processPercent = isPercentage(value);\n  value = Math.min(max, Math.max(0, Number.parseFloat(\"\".concat(value))));\n  if (processPercent) {\n    value = Number.parseInt(\"\".concat(value * max), 10) / 100;\n  }\n  if (Math.abs(value - max) < 1e-6) {\n    return 1;\n  }\n  return value % max / Number.parseFloat(max);\n};\nvar INT_HEX_MAP = {\n  10: \"A\",\n  11: \"B\",\n  12: \"C\",\n  13: \"D\",\n  14: \"E\",\n  15: \"F\"\n};\nvar hexOne = function hexOne(value) {\n  value = Math.min(Math.round(value), 255);\n  var high = Math.floor(value / 16);\n  var low = value % 16;\n  return \"\".concat(INT_HEX_MAP[high] || high).concat(INT_HEX_MAP[low] || low);\n};\nvar toHex = function toHex(_ref) {\n  var r = _ref.r,\n    g = _ref.g,\n    b = _ref.b;\n  if (Number.isNaN(+r) || Number.isNaN(+g) || Number.isNaN(+b)) return \"\";\n  return \"#\".concat(hexOne(r)).concat(hexOne(g)).concat(hexOne(b));\n};\nvar HEX_INT_MAP = {\n  A: 10,\n  B: 11,\n  C: 12,\n  D: 13,\n  E: 14,\n  F: 15\n};\nvar parseHexChannel = function parseHexChannel(hex) {\n  if (hex.length === 2) {\n    return (HEX_INT_MAP[hex[0].toUpperCase()] || +hex[0]) * 16 + (HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1]);\n  }\n  return HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1];\n};\nvar hsl2hsv = function hsl2hsv(hue, sat, light) {\n  sat = sat / 100;\n  light = light / 100;\n  var smin = sat;\n  var lmin = Math.max(light, 0.01);\n  light *= 2;\n  sat *= light <= 1 ? light : 2 - light;\n  smin *= lmin <= 1 ? lmin : 2 - lmin;\n  var v = (light + sat) / 2;\n  var sv = light === 0 ? 2 * smin / (lmin + smin) : 2 * sat / (light + sat);\n  return {\n    h: hue,\n    s: sv * 100,\n    v: v * 100\n  };\n};\nvar rgb2hsv = function rgb2hsv(r, g, b) {\n  r = bound01(r, 255);\n  g = bound01(g, 255);\n  b = bound01(b, 255);\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var h;\n  var v = max;\n  var d = max - min;\n  var s = max === 0 ? 0 : d / max;\n  if (max === min) {\n    h = 0;\n  } else {\n    switch (max) {\n      case r:\n        {\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        }\n      case g:\n        {\n          h = (b - r) / d + 2;\n          break;\n        }\n      case b:\n        {\n          h = (r - g) / d + 4;\n          break;\n        }\n    }\n    h /= 6;\n  }\n  return {\n    h: h * 360,\n    s: s * 100,\n    v: v * 100\n  };\n};\nvar hsv2rgb = function hsv2rgb(h, s, v) {\n  h = bound01(h, 360) * 6;\n  s = bound01(s, 100);\n  v = bound01(v, 100);\n  var i = Math.floor(h);\n  var f = h - i;\n  var p = v * (1 - s);\n  var q = v * (1 - f * s);\n  var t = v * (1 - (1 - f) * s);\n  var mod = i % 6;\n  var r = [v, q, p, p, t, v][mod];\n  var g = [t, v, v, q, p, p][mod];\n  var b = [p, p, t, v, v, q][mod];\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n};\nvar Color = /*#__PURE__*/function () {\n  function Color() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Color);\n    this._hue = 0;\n    this._saturation = 100;\n    this._value = 100;\n    this._alpha = 100;\n    this.enableAlpha = false;\n    this.format = \"hex\";\n    this.value = \"\";\n    for (var option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option];\n      }\n    }\n    if (options.value) {\n      this.fromString(options.value);\n    } else {\n      this.doOnChange();\n    }\n  }\n  return _createClass(Color, [{\n    key: \"set\",\n    value: function set(prop, value) {\n      if (arguments.length === 1 && _typeof(prop) === \"object\") {\n        for (var p in prop) {\n          if (hasOwn(prop, p)) {\n            this.set(p, prop[p]);\n          }\n        }\n        return;\n      }\n      this[\"_\".concat(prop)] = value;\n      this.doOnChange();\n    }\n  }, {\n    key: \"get\",\n    value: function get(prop) {\n      if (prop === \"alpha\") {\n        return Math.floor(this[\"_\".concat(prop)]);\n      }\n      return this[\"_\".concat(prop)];\n    }\n  }, {\n    key: \"toRgb\",\n    value: function toRgb() {\n      return hsv2rgb(this._hue, this._saturation, this._value);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      var _this = this;\n      if (!value) {\n        this._hue = 0;\n        this._saturation = 100;\n        this._value = 100;\n        this.doOnChange();\n        return;\n      }\n      var fromHSV = function fromHSV(h, s, v) {\n        _this._hue = Math.max(0, Math.min(360, h));\n        _this._saturation = Math.max(0, Math.min(100, s));\n        _this._value = Math.max(0, Math.min(100, v));\n        _this.doOnChange();\n      };\n      if (value.includes(\"hsl\")) {\n        var parts = value.replace(/hsla|hsl|\\(|\\)/gm, \"\").split(/\\s|,/g).filter(function (val) {\n          return val !== \"\";\n        }).map(function (val, index) {\n          return index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10);\n        });\n        if (parts.length === 4) {\n          this._alpha = Number.parseFloat(parts[3]) * 100;\n        } else if (parts.length === 3) {\n          this._alpha = 100;\n        }\n        if (parts.length >= 3) {\n          var _hsl2hsv = hsl2hsv(parts[0], parts[1], parts[2]),\n            h = _hsl2hsv.h,\n            s = _hsl2hsv.s,\n            v = _hsl2hsv.v;\n          fromHSV(h, s, v);\n        }\n      } else if (value.includes(\"hsv\")) {\n        var _parts = value.replace(/hsva|hsv|\\(|\\)/gm, \"\").split(/\\s|,/g).filter(function (val) {\n          return val !== \"\";\n        }).map(function (val, index) {\n          return index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10);\n        });\n        if (_parts.length === 4) {\n          this._alpha = Number.parseFloat(_parts[3]) * 100;\n        } else if (_parts.length === 3) {\n          this._alpha = 100;\n        }\n        if (_parts.length >= 3) {\n          fromHSV(_parts[0], _parts[1], _parts[2]);\n        }\n      } else if (value.includes(\"rgb\")) {\n        var _parts2 = value.replace(/rgba|rgb|\\(|\\)/gm, \"\").split(/\\s|,/g).filter(function (val) {\n          return val !== \"\";\n        }).map(function (val, index) {\n          return index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10);\n        });\n        if (_parts2.length === 4) {\n          this._alpha = Number.parseFloat(_parts2[3]) * 100;\n        } else if (_parts2.length === 3) {\n          this._alpha = 100;\n        }\n        if (_parts2.length >= 3) {\n          var _rgb2hsv = rgb2hsv(_parts2[0], _parts2[1], _parts2[2]),\n            _h = _rgb2hsv.h,\n            _s = _rgb2hsv.s,\n            _v = _rgb2hsv.v;\n          fromHSV(_h, _s, _v);\n        }\n      } else if (value.includes(\"#\")) {\n        var hex = value.replace(\"#\", \"\").trim();\n        if (!/^[0-9a-fA-F]{3}$|^[0-9a-fA-F]{6}$|^[0-9a-fA-F]{8}$/.test(hex)) return;\n        var r, g, b;\n        if (hex.length === 3) {\n          r = parseHexChannel(hex[0] + hex[0]);\n          g = parseHexChannel(hex[1] + hex[1]);\n          b = parseHexChannel(hex[2] + hex[2]);\n        } else if (hex.length === 6 || hex.length === 8) {\n          r = parseHexChannel(hex.slice(0, 2));\n          g = parseHexChannel(hex.slice(2, 4));\n          b = parseHexChannel(hex.slice(4, 6));\n        }\n        if (hex.length === 8) {\n          this._alpha = parseHexChannel(hex.slice(6)) / 255 * 100;\n        } else if (hex.length === 3 || hex.length === 6) {\n          this._alpha = 100;\n        }\n        var _rgb2hsv2 = rgb2hsv(r, g, b),\n          _h2 = _rgb2hsv2.h,\n          _s2 = _rgb2hsv2.s,\n          _v2 = _rgb2hsv2.v;\n        fromHSV(_h2, _s2, _v2);\n      }\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(color) {\n      return Math.abs(color._hue - this._hue) < 2 && Math.abs(color._saturation - this._saturation) < 1 && Math.abs(color._value - this._value) < 1 && Math.abs(color._alpha - this._alpha) < 1;\n    }\n  }, {\n    key: \"doOnChange\",\n    value: function doOnChange() {\n      var _hue = this._hue,\n        _saturation = this._saturation,\n        _value = this._value,\n        _alpha = this._alpha,\n        format = this.format;\n      if (this.enableAlpha) {\n        switch (format) {\n          case \"hsl\":\n            {\n              var hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);\n              this.value = \"hsla(\".concat(_hue, \", \").concat(Math.round(hsl[1] * 100), \"%, \").concat(Math.round(hsl[2] * 100), \"%, \").concat(this.get(\"alpha\") / 100, \")\");\n              break;\n            }\n          case \"hsv\":\n            {\n              this.value = \"hsva(\".concat(_hue, \", \").concat(Math.round(_saturation), \"%, \").concat(Math.round(_value), \"%, \").concat(this.get(\"alpha\") / 100, \")\");\n              break;\n            }\n          case \"hex\":\n            {\n              this.value = \"\".concat(toHex(hsv2rgb(_hue, _saturation, _value))).concat(hexOne(_alpha * 255 / 100));\n              break;\n            }\n          default:\n            {\n              var _hsv2rgb = hsv2rgb(_hue, _saturation, _value),\n                r = _hsv2rgb.r,\n                g = _hsv2rgb.g,\n                b = _hsv2rgb.b;\n              this.value = \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(this.get(\"alpha\") / 100, \")\");\n            }\n        }\n      } else {\n        switch (format) {\n          case \"hsl\":\n            {\n              var _hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);\n              this.value = \"hsl(\".concat(_hue, \", \").concat(Math.round(_hsl[1] * 100), \"%, \").concat(Math.round(_hsl[2] * 100), \"%)\");\n              break;\n            }\n          case \"hsv\":\n            {\n              this.value = \"hsv(\".concat(_hue, \", \").concat(Math.round(_saturation), \"%, \").concat(Math.round(_value), \"%)\");\n              break;\n            }\n          case \"rgb\":\n            {\n              var _hsv2rgb2 = hsv2rgb(_hue, _saturation, _value),\n                _r = _hsv2rgb2.r,\n                _g = _hsv2rgb2.g,\n                _b = _hsv2rgb2.b;\n              this.value = \"rgb(\".concat(_r, \", \").concat(_g, \", \").concat(_b, \")\");\n              break;\n            }\n          default:\n            {\n              this.value = toHex(hsv2rgb(_hue, _saturation, _value));\n            }\n        }\n      }\n    }\n  }]);\n}();\nexport { Color as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}