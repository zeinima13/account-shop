{"ast":null,"code":"import _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport dayjs from 'dayjs';\nimport { isArray } from '@vue/shared';\nimport { rangeArr } from '../../time-picker/src/utils.mjs';\nvar isValidRange = function isValidRange(range) {\n  if (!isArray(range)) return false;\n  var _range = _slicedToArray(range, 2),\n    left = _range[0],\n    right = _range[1];\n  return dayjs.isDayjs(left) && dayjs.isDayjs(right) && left.isSameOrBefore(right);\n};\nvar getDefaultValue = function getDefaultValue(defaultValue, _ref) {\n  var lang = _ref.lang,\n    unit = _ref.unit,\n    unlinkPanels = _ref.unlinkPanels;\n  var start;\n  if (isArray(defaultValue)) {\n    var _defaultValue$map = defaultValue.map(function (d) {\n        return dayjs(d).locale(lang);\n      }),\n      _defaultValue$map2 = _slicedToArray(_defaultValue$map, 2),\n      left = _defaultValue$map2[0],\n      right = _defaultValue$map2[1];\n    if (!unlinkPanels) {\n      right = left.add(1, unit);\n    }\n    return [left, right];\n  } else if (defaultValue) {\n    start = dayjs(defaultValue);\n  } else {\n    start = dayjs();\n  }\n  start = start.locale(lang);\n  return [start, start.add(1, unit)];\n};\nvar buildPickerTable = function buildPickerTable(dimension, rows, _ref2) {\n  var columnIndexOffset = _ref2.columnIndexOffset,\n    startDate = _ref2.startDate,\n    nextEndDate = _ref2.nextEndDate,\n    now = _ref2.now,\n    unit = _ref2.unit,\n    relativeDateGetter = _ref2.relativeDateGetter,\n    setCellMetadata = _ref2.setCellMetadata,\n    setRowMetadata = _ref2.setRowMetadata;\n  for (var rowIndex = 0; rowIndex < dimension.row; rowIndex++) {\n    var row = rows[rowIndex];\n    for (var columnIndex = 0; columnIndex < dimension.column; columnIndex++) {\n      var cell = row[columnIndex + columnIndexOffset];\n      if (!cell) {\n        cell = {\n          row: rowIndex,\n          column: columnIndex,\n          type: \"normal\",\n          inRange: false,\n          start: false,\n          end: false\n        };\n      }\n      var index = rowIndex * dimension.column + columnIndex;\n      var nextStartDate = relativeDateGetter(index);\n      cell.dayjs = nextStartDate;\n      cell.date = nextStartDate.toDate();\n      cell.timestamp = nextStartDate.valueOf();\n      cell.type = \"normal\";\n      cell.inRange = !!(startDate && nextStartDate.isSameOrAfter(startDate, unit) && nextEndDate && nextStartDate.isSameOrBefore(nextEndDate, unit)) || !!(startDate && nextStartDate.isSameOrBefore(startDate, unit) && nextEndDate && nextStartDate.isSameOrAfter(nextEndDate, unit));\n      if (startDate == null ? void 0 : startDate.isSameOrAfter(nextEndDate)) {\n        cell.start = !!nextEndDate && nextStartDate.isSame(nextEndDate, unit);\n        cell.end = startDate && nextStartDate.isSame(startDate, unit);\n      } else {\n        cell.start = !!startDate && nextStartDate.isSame(startDate, unit);\n        cell.end = !!nextEndDate && nextStartDate.isSame(nextEndDate, unit);\n      }\n      var isToday = nextStartDate.isSame(now, unit);\n      if (isToday) {\n        cell.type = \"today\";\n      }\n      setCellMetadata == null ? void 0 : setCellMetadata(cell, {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      });\n      row[columnIndex + columnIndexOffset] = cell;\n    }\n    setRowMetadata == null ? void 0 : setRowMetadata(row);\n  }\n};\nvar datesInMonth = function datesInMonth(year, month, lang) {\n  var firstDay = dayjs().locale(lang).startOf(\"month\").month(month).year(year);\n  var numOfDays = firstDay.daysInMonth();\n  return rangeArr(numOfDays).map(function (n) {\n    return firstDay.add(n, \"day\").toDate();\n  });\n};\nvar getValidDateOfMonth = function getValidDateOfMonth(year, month, lang, disabledDate) {\n  var _value = dayjs().year(year).month(month).startOf(\"month\");\n  var _date = datesInMonth(year, month, lang).find(function (date) {\n    return !(disabledDate == null ? void 0 : disabledDate(date));\n  });\n  if (_date) {\n    return dayjs(_date).locale(lang);\n  }\n  return _value.locale(lang);\n};\nvar getValidDateOfYear = function getValidDateOfYear(value, lang, disabledDate) {\n  var year = value.year();\n  if (!(disabledDate == null ? void 0 : disabledDate(value.toDate()))) {\n    return value.locale(lang);\n  }\n  var month = value.month();\n  if (!datesInMonth(year, month, lang).every(disabledDate)) {\n    return getValidDateOfMonth(year, month, lang, disabledDate);\n  }\n  for (var i = 0; i < 12; i++) {\n    if (!datesInMonth(year, i, lang).every(disabledDate)) {\n      return getValidDateOfMonth(year, i, lang, disabledDate);\n    }\n  }\n  return value;\n};\nexport { buildPickerTable, datesInMonth, getDefaultValue, getValidDateOfMonth, getValidDateOfYear, isValidRange };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}