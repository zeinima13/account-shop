{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { usePropsAlias } from './use-props-alias.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../../constants/event.mjs';\nvar useMove = function useMove(props, checkedState, emit) {\n  var propsAlias = usePropsAlias(props);\n  var _emit = function _emit(value, direction, movedKeys) {\n    emit(UPDATE_MODEL_EVENT, value);\n    emit(CHANGE_EVENT, value, direction, movedKeys);\n  };\n  var addToLeft = function addToLeft() {\n    var currentValue = props.modelValue.slice();\n    checkedState.rightChecked.forEach(function (item) {\n      var index = currentValue.indexOf(item);\n      if (index > -1) {\n        currentValue.splice(index, 1);\n      }\n    });\n    _emit(currentValue, \"left\", checkedState.rightChecked);\n  };\n  var addToRight = function addToRight() {\n    var currentValue = props.modelValue.slice();\n    var itemsToBeMoved = props.data.filter(function (item) {\n      var itemKey = item[propsAlias.value.key];\n      return checkedState.leftChecked.includes(itemKey) && !props.modelValue.includes(itemKey);\n    }).map(function (item) {\n      return item[propsAlias.value.key];\n    });\n    currentValue = props.targetOrder === \"unshift\" ? itemsToBeMoved.concat(currentValue) : currentValue.concat(itemsToBeMoved);\n    if (props.targetOrder === \"original\") {\n      currentValue = props.data.filter(function (item) {\n        return currentValue.includes(item[propsAlias.value.key]);\n      }).map(function (item) {\n        return item[propsAlias.value.key];\n      });\n    }\n    _emit(currentValue, \"right\", checkedState.leftChecked);\n  };\n  return {\n    addToLeft: addToLeft,\n    addToRight: addToRight\n  };\n};\nexport { useMove };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}