{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { ref, computed } from 'vue';\nimport { castArray } from 'lodash-unified';\nimport { debugWarn } from '../../../utils/error.mjs';\nvar SCOPE = \"ElForm\";\nfunction useFormLabelWidth() {\n  var potentialLabelWidthArr = ref([]);\n  var autoLabelWidth = computed(function () {\n    if (!potentialLabelWidthArr.value.length) return \"0\";\n    var max = Math.max.apply(Math, _toConsumableArray(potentialLabelWidthArr.value));\n    return max ? \"\".concat(max, \"px\") : \"\";\n  });\n  function getLabelWidthIndex(width) {\n    var index = potentialLabelWidthArr.value.indexOf(width);\n    if (index === -1 && autoLabelWidth.value === \"0\") {\n      debugWarn(SCOPE, \"unexpected width \".concat(width));\n    }\n    return index;\n  }\n  function registerLabelWidth(val, oldVal) {\n    if (val && oldVal) {\n      var index = getLabelWidthIndex(oldVal);\n      potentialLabelWidthArr.value.splice(index, 1, val);\n    } else if (val) {\n      potentialLabelWidthArr.value.push(val);\n    }\n  }\n  function deregisterLabelWidth(val) {\n    var index = getLabelWidthIndex(val);\n    if (index > -1) {\n      potentialLabelWidthArr.value.splice(index, 1);\n    }\n  }\n  return {\n    autoLabelWidth: autoLabelWidth,\n    registerLabelWidth: registerLabelWidth,\n    deregisterLabelWidth: deregisterLabelWidth\n  };\n}\nvar filterFields = function filterFields(fields, props) {\n  var normalized = castArray(props);\n  return normalized.length > 0 ? fields.filter(function (field) {\n    return field.prop && normalized.includes(field.prop);\n  }) : fields;\n};\nexport { filterFields, useFormLabelWidth };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}