{"ast":null,"code":"import { ref } from 'vue';\nvar usePopperContentFocusTrap = function usePopperContentFocusTrap(props, emit) {\n  var trapped = ref(false);\n  var focusStartRef = ref();\n  var onFocusAfterTrapped = function onFocusAfterTrapped() {\n    emit(\"focus\");\n  };\n  var onFocusAfterReleased = function onFocusAfterReleased(event) {\n    var _a;\n    if (((_a = event.detail) == null ? void 0 : _a.focusReason) !== \"pointer\") {\n      focusStartRef.value = \"first\";\n      emit(\"blur\");\n    }\n  };\n  var onFocusInTrap = function onFocusInTrap(event) {\n    if (props.visible && !trapped.value) {\n      if (event.target) {\n        focusStartRef.value = event.target;\n      }\n      trapped.value = true;\n    }\n  };\n  var onFocusoutPrevented = function onFocusoutPrevented(event) {\n    if (!props.trapping) {\n      if (event.detail.focusReason === \"pointer\") {\n        event.preventDefault();\n      }\n      trapped.value = false;\n    }\n  };\n  var onReleaseRequested = function onReleaseRequested() {\n    trapped.value = false;\n    emit(\"close\");\n  };\n  return {\n    focusStartRef: focusStartRef,\n    trapped: trapped,\n    onFocusAfterReleased: onFocusAfterReleased,\n    onFocusAfterTrapped: onFocusAfterTrapped,\n    onFocusInTrap: onFocusInTrap,\n    onFocusoutPrevented: onFocusoutPrevented,\n    onReleaseRequested: onReleaseRequested\n  };\n};\nexport { usePopperContentFocusTrap };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}