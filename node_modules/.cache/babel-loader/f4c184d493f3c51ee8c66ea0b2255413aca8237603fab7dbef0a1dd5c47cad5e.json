{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { ref, getCurrentInstance, inject, computed, unref, provide } from 'vue';\nimport { configProviderContextKey } from '../constants.mjs';\nimport { useNamespace, defaultNamespace, namespaceContextKey } from '../../../../hooks/use-namespace/index.mjs';\nimport { useZIndex, defaultInitialZIndex, zIndexContextKey } from '../../../../hooks/use-z-index/index.mjs';\nimport { useLocale, localeContextKey } from '../../../../hooks/use-locale/index.mjs';\nimport { SIZE_INJECTION_KEY } from '../../../../hooks/use-size/index.mjs';\nimport { emptyValuesContextKey } from '../../../../hooks/use-empty-values/index.mjs';\nimport { debugWarn } from '../../../../utils/error.mjs';\nimport { keysOf } from '../../../../utils/objects.mjs';\nvar globalConfig = ref();\nfunction useGlobalConfig(key) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n  var config = getCurrentInstance() ? inject(configProviderContextKey, globalConfig) : globalConfig;\n  if (key) {\n    return computed(function () {\n      var _a, _b;\n      return (_b = (_a = config.value) == null ? void 0 : _a[key]) != null ? _b : defaultValue;\n    });\n  } else {\n    return config;\n  }\n}\nfunction useGlobalComponentSettings(block, sizeFallback) {\n  var config = useGlobalConfig();\n  var ns = useNamespace(block, computed(function () {\n    var _a;\n    return ((_a = config.value) == null ? void 0 : _a.namespace) || defaultNamespace;\n  }));\n  var locale = useLocale(computed(function () {\n    var _a;\n    return (_a = config.value) == null ? void 0 : _a.locale;\n  }));\n  var zIndex = useZIndex(computed(function () {\n    var _a;\n    return ((_a = config.value) == null ? void 0 : _a.zIndex) || defaultInitialZIndex;\n  }));\n  var size = computed(function () {\n    var _a;\n    return unref(sizeFallback) || ((_a = config.value) == null ? void 0 : _a.size) || \"\";\n  });\n  provideGlobalConfig(computed(function () {\n    return unref(config) || {};\n  }));\n  return {\n    ns: ns,\n    locale: locale,\n    zIndex: zIndex,\n    size: size\n  };\n}\nvar provideGlobalConfig = function provideGlobalConfig(config, app) {\n  var global = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var _a;\n  var inSetup = !!getCurrentInstance();\n  var oldConfig = inSetup ? useGlobalConfig() : void 0;\n  var provideFn = (_a = app == null ? void 0 : app.provide) != null ? _a : inSetup ? provide : void 0;\n  if (!provideFn) {\n    debugWarn(\"provideGlobalConfig\", \"provideGlobalConfig() can only be used inside setup().\");\n    return;\n  }\n  var context = computed(function () {\n    var cfg = unref(config);\n    if (!(oldConfig == null ? void 0 : oldConfig.value)) return cfg;\n    return mergeConfig(oldConfig.value, cfg);\n  });\n  provideFn(configProviderContextKey, context);\n  provideFn(localeContextKey, computed(function () {\n    return context.value.locale;\n  }));\n  provideFn(namespaceContextKey, computed(function () {\n    return context.value.namespace;\n  }));\n  provideFn(zIndexContextKey, computed(function () {\n    return context.value.zIndex;\n  }));\n  provideFn(SIZE_INJECTION_KEY, {\n    size: computed(function () {\n      return context.value.size || \"\";\n    })\n  });\n  provideFn(emptyValuesContextKey, computed(function () {\n    return {\n      emptyValues: context.value.emptyValues,\n      valueOnClear: context.value.valueOnClear\n    };\n  }));\n  if (global || !globalConfig.value) {\n    globalConfig.value = context.value;\n  }\n  return context;\n};\nvar mergeConfig = function mergeConfig(a, b) {\n  var keys = _toConsumableArray(/* @__PURE__ */new Set([].concat(_toConsumableArray(keysOf(a)), _toConsumableArray(keysOf(b)))));\n  var obj = {};\n  var _iterator = _createForOfIteratorHelper(keys),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      obj[key] = b[key] !== void 0 ? b[key] : a[key];\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return obj;\n};\nexport { provideGlobalConfig, useGlobalComponentSettings, useGlobalConfig };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}