{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { computed } from 'vue';\nimport { useCheckboxDisabled } from './use-checkbox-disabled.mjs';\nimport { useCheckboxEvent } from './use-checkbox-event.mjs';\nimport { useCheckboxModel } from './use-checkbox-model.mjs';\nimport { useCheckboxStatus } from './use-checkbox-status.mjs';\nimport { useFormItem, useFormItemInputId } from '../../../form/src/hooks/use-form-item.mjs';\nimport { useDeprecated } from '../../../../hooks/use-deprecated/index.mjs';\nimport { isPropAbsent } from '../../../../utils/types.mjs';\nimport { isArray } from '@vue/shared';\nvar useCheckbox = function useCheckbox(props, slots) {\n  var _useFormItem = useFormItem(),\n    elFormItem = _useFormItem.formItem;\n  var _useCheckboxModel = useCheckboxModel(props),\n    model = _useCheckboxModel.model,\n    isGroup = _useCheckboxModel.isGroup,\n    isLimitExceeded = _useCheckboxModel.isLimitExceeded;\n  var _useCheckboxStatus = useCheckboxStatus(props, slots, {\n      model: model\n    }),\n    isFocused = _useCheckboxStatus.isFocused,\n    isChecked = _useCheckboxStatus.isChecked,\n    checkboxButtonSize = _useCheckboxStatus.checkboxButtonSize,\n    checkboxSize = _useCheckboxStatus.checkboxSize,\n    hasOwnLabel = _useCheckboxStatus.hasOwnLabel,\n    actualValue = _useCheckboxStatus.actualValue;\n  var _useCheckboxDisabled = useCheckboxDisabled({\n      model: model,\n      isChecked: isChecked\n    }),\n    isDisabled = _useCheckboxDisabled.isDisabled;\n  var _useFormItemInputId = useFormItemInputId(props, {\n      formItemContext: elFormItem,\n      disableIdGeneration: hasOwnLabel,\n      disableIdManagement: isGroup\n    }),\n    inputId = _useFormItemInputId.inputId,\n    isLabeledByFormItem = _useFormItemInputId.isLabeledByFormItem;\n  var _useCheckboxEvent = useCheckboxEvent(props, {\n      model: model,\n      isLimitExceeded: isLimitExceeded,\n      hasOwnLabel: hasOwnLabel,\n      isDisabled: isDisabled,\n      isLabeledByFormItem: isLabeledByFormItem\n    }),\n    handleChange = _useCheckboxEvent.handleChange,\n    onClickRoot = _useCheckboxEvent.onClickRoot;\n  var setStoreValue = function setStoreValue() {\n    function addToStore() {\n      var _a, _b;\n      if (isArray(model.value) && !model.value.includes(actualValue.value)) {\n        model.value.push(actualValue.value);\n      } else {\n        model.value = (_b = (_a = props.trueValue) != null ? _a : props.trueLabel) != null ? _b : true;\n      }\n    }\n    props.checked && addToStore();\n  };\n  setStoreValue();\n  useDeprecated({\n    from: \"label act as value\",\n    replacement: \"value\",\n    version: \"3.0.0\",\n    scope: \"el-checkbox\",\n    ref: \"https://element-plus.org/en-US/component/checkbox.html\"\n  }, computed(function () {\n    return isGroup.value && isPropAbsent(props.value);\n  }));\n  useDeprecated({\n    from: \"true-label\",\n    replacement: \"true-value\",\n    version: \"3.0.0\",\n    scope: \"el-checkbox\",\n    ref: \"https://element-plus.org/en-US/component/checkbox.html\"\n  }, computed(function () {\n    return !!props.trueLabel;\n  }));\n  useDeprecated({\n    from: \"false-label\",\n    replacement: \"false-value\",\n    version: \"3.0.0\",\n    scope: \"el-checkbox\",\n    ref: \"https://element-plus.org/en-US/component/checkbox.html\"\n  }, computed(function () {\n    return !!props.falseLabel;\n  }));\n  return {\n    inputId: inputId,\n    isLabeledByFormItem: isLabeledByFormItem,\n    isChecked: isChecked,\n    isDisabled: isDisabled,\n    isFocused: isFocused,\n    checkboxButtonSize: checkboxButtonSize,\n    checkboxSize: checkboxSize,\n    hasOwnLabel: hasOwnLabel,\n    model: model,\n    actualValue: actualValue,\n    handleChange: handleChange,\n    onClickRoot: onClickRoot\n  };\n};\nexport { useCheckbox };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}