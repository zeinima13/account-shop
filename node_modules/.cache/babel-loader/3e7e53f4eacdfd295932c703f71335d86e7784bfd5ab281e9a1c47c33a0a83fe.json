{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { defineComponent, getCurrentInstance, inject, ref, computed, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementBlock, Fragment, renderList, createVNode, createTextVNode, toDisplayString, renderSlot, createCommentVNode } from 'vue';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport ElCascaderNode from './node2.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nvar _sfc_main = defineComponent({\n  name: \"ElCascaderMenu\",\n  components: {\n    Loading: Loading,\n    ElIcon: ElIcon,\n    ElScrollbar: ElScrollbar,\n    ElCascaderNode: ElCascaderNode\n  },\n  props: {\n    nodes: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    }\n  },\n  setup: function setup(props) {\n    var instance = getCurrentInstance();\n    var ns = useNamespace(\"cascader-menu\");\n    var _useLocale = useLocale(),\n      t = _useLocale.t;\n    var id = useId();\n    var activeNode = null;\n    var hoverTimer = null;\n    var panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    var hoverZone = ref(null);\n    var isEmpty = computed(function () {\n      return !props.nodes.length;\n    });\n    var isLoading = computed(function () {\n      return !panel.initialLoaded;\n    });\n    var menuId = computed(function () {\n      return \"\".concat(id.value, \"-\").concat(props.index);\n    });\n    var handleExpand = function handleExpand(e) {\n      activeNode = e.target;\n    };\n    var handleMouseMove = function handleMouseMove(e) {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return;\n      if (activeNode.contains(e.target)) {\n        clearHoverTimer();\n        var el = instance.vnode.el;\n        var _el$getBoundingClient = el.getBoundingClientRect(),\n          left = _el$getBoundingClient.left;\n        var offsetWidth = el.offsetWidth,\n          offsetHeight = el.offsetHeight;\n        var startX = e.clientX - left;\n        var top = activeNode.offsetTop;\n        var bottom = top + activeNode.offsetHeight;\n        hoverZone.value.innerHTML = \"\\n          <path style=\\\"pointer-events: auto;\\\" fill=\\\"transparent\\\" d=\\\"M\".concat(startX, \" \").concat(top, \" L\").concat(offsetWidth, \" 0 V\").concat(top, \" Z\\\" />\\n          <path style=\\\"pointer-events: auto;\\\" fill=\\\"transparent\\\" d=\\\"M\").concat(startX, \" \").concat(bottom, \" L\").concat(offsetWidth, \" \").concat(offsetHeight, \" V\").concat(bottom, \" Z\\\" />\\n        \");\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);\n      }\n    };\n    var clearHoverTimer = function clearHoverTimer() {\n      if (!hoverTimer) return;\n      clearTimeout(hoverTimer);\n      hoverTimer = null;\n    };\n    var clearHoverZone = function clearHoverZone() {\n      if (!hoverZone.value) return;\n      hoverZone.value.innerHTML = \"\";\n      clearHoverTimer();\n    };\n    return {\n      ns: ns,\n      panel: panel,\n      hoverZone: hoverZone,\n      isEmpty: isEmpty,\n      isLoading: isLoading,\n      menuId: menuId,\n      t: t,\n      handleExpand: handleExpand,\n      handleMouseMove: handleMouseMove,\n      clearHoverZone: clearHoverZone\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_cascader_node = resolveComponent(\"el-cascader-node\");\n  var _component_loading = resolveComponent(\"loading\");\n  var _component_el_icon = resolveComponent(\"el-icon\");\n  var _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n  return openBlock(), createBlock(_component_el_scrollbar, {\n    key: _ctx.menuId,\n    tag: \"ul\",\n    role: \"menu\",\n    \"class\": normalizeClass(_ctx.ns.b()),\n    \"wrap-class\": _ctx.ns.e(\"wrap\"),\n    \"view-class\": [_ctx.ns.e(\"list\"), _ctx.ns.is(\"empty\", _ctx.isEmpty)],\n    onMousemove: _ctx.handleMouseMove,\n    onMouseleave: _ctx.clearHoverZone\n  }, {\n    \"default\": withCtx(function () {\n      var _a;\n      return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.nodes, function (node) {\n        return openBlock(), createBlock(_component_el_cascader_node, {\n          key: node.uid,\n          node: node,\n          \"menu-id\": _ctx.menuId,\n          onExpand: _ctx.handleExpand\n        }, null, 8, [\"node\", \"menu-id\", \"onExpand\"]);\n      }), 128)), _ctx.isLoading ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"class\": normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, [createVNode(_component_el_icon, {\n        size: \"14\",\n        \"class\": normalizeClass(_ctx.ns.is(\"loading\"))\n      }, {\n        \"default\": withCtx(function () {\n          return [createVNode(_component_loading)];\n        }),\n        _: 1\n      }, 8, [\"class\"]), createTextVNode(\" \" + toDisplayString(_ctx.t(\"el.cascader.loading\")), 1)], 2)) : _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        \"class\": normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, [renderSlot(_ctx.$slots, \"empty\", {}, function () {\n        return [createTextVNode(toDisplayString(_ctx.t(\"el.cascader.noData\")), 1)];\n      })], 2)) : ((_a = _ctx.panel) == null ? void 0 : _a.isHoverMenu) ? (openBlock(), createElementBlock(\"svg\", {\n        key: 2,\n        ref: \"hoverZone\",\n        \"class\": normalizeClass(_ctx.ns.e(\"hover-zone\"))\n      }, null, 2)) : createCommentVNode(\"v-if\", true)];\n    }),\n    _: 3\n  }, 8, [\"class\", \"wrap-class\", \"view-class\", \"onMousemove\", \"onMouseleave\"]);\n}\nvar ElCascaderMenu = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"menu.vue\"]]);\nexport { ElCascaderMenu as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}