{"ast":null,"code":"import _defineProperty from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { defineComponent, inject, ref, computed, unref, watch, onMounted, provide, openBlock, createElementBlock, normalizeStyle, normalizeClass, renderSlot, createVNode, withCtx, Fragment, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { offset } from '@floating-ui/dom';\nimport ElVisuallyHidden from '../../visual-hidden/src/visual-hidden2.mjs';\nimport { tooltipV2RootKey, tooltipV2ContentKey } from './constants.mjs';\nimport { tooltipV2ContentProps } from './content.mjs';\nimport { tooltipV2CommonProps } from './common.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useFloating, arrowMiddleware } from '../../../hooks/use-floating/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar __default__ = defineComponent({\n  name: \"ElTooltipV2Content\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: _objectSpread(_objectSpread({}, tooltipV2ContentProps), tooltipV2CommonProps),\n  setup: function setup(__props) {\n    var props = __props;\n    var _inject = inject(tooltipV2RootKey),\n      triggerRef = _inject.triggerRef,\n      contentId = _inject.contentId;\n    var placement = ref(props.placement);\n    var strategy = ref(props.strategy);\n    var arrowRef = ref(null);\n    var _useFloating = useFloating({\n        placement: placement,\n        strategy: strategy,\n        middleware: computed(function () {\n          var middleware = [offset(props.offset)];\n          if (props.showArrow) {\n            middleware.push(arrowMiddleware({\n              arrowRef: arrowRef\n            }));\n          }\n          return middleware;\n        })\n      }),\n      referenceRef = _useFloating.referenceRef,\n      contentRef = _useFloating.contentRef,\n      middlewareData = _useFloating.middlewareData,\n      x = _useFloating.x,\n      y = _useFloating.y,\n      update = _useFloating.update;\n    var zIndex = useZIndex().nextZIndex();\n    var ns = useNamespace(\"tooltip-v2\");\n    var side = computed(function () {\n      return placement.value.split(\"-\")[0];\n    });\n    var contentStyle = computed(function () {\n      return {\n        position: unref(strategy),\n        top: \"\".concat(unref(y) || 0, \"px\"),\n        left: \"\".concat(unref(x) || 0, \"px\"),\n        zIndex: zIndex\n      };\n    });\n    var arrowStyle = computed(function () {\n      if (!props.showArrow) return {};\n      var _unref = unref(middlewareData),\n        arrow = _unref.arrow;\n      return _defineProperty(_defineProperty({}, \"--\".concat(ns.namespace.value, \"-tooltip-v2-arrow-x\"), \"\".concat(arrow == null ? void 0 : arrow.x, \"px\") || \"\"), \"--\".concat(ns.namespace.value, \"-tooltip-v2-arrow-y\"), \"\".concat(arrow == null ? void 0 : arrow.y, \"px\") || \"\");\n    });\n    var contentClass = computed(function () {\n      return [ns.e(\"content\"), ns.is(\"dark\", props.effect === \"dark\"), ns.is(unref(strategy)), props.contentClass];\n    });\n    watch(arrowRef, function () {\n      return update();\n    });\n    watch(function () {\n      return props.placement;\n    }, function (val) {\n      return placement.value = val;\n    });\n    onMounted(function () {\n      watch(function () {\n        return props.reference || triggerRef.value;\n      }, function (el) {\n        referenceRef.value = el || void 0;\n      }, {\n        immediate: true\n      });\n    });\n    provide(tooltipV2ContentKey, {\n      arrowRef: arrowRef\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"contentRef\",\n        ref: contentRef,\n        style: normalizeStyle(unref(contentStyle)),\n        \"data-tooltip-v2-root\": \"\"\n      }, [!_ctx.nowrap ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"data-side\": unref(side),\n        \"class\": normalizeClass(unref(contentClass))\n      }, [renderSlot(_ctx.$slots, \"default\", {\n        contentStyle: unref(contentStyle),\n        contentClass: unref(contentClass)\n      }), createVNode(unref(ElVisuallyHidden), {\n        id: unref(contentId),\n        role: \"tooltip\"\n      }, {\n        \"default\": withCtx(function () {\n          return [_ctx.ariaLabel ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [createTextVNode(toDisplayString(_ctx.ariaLabel), 1)], 64)) : renderSlot(_ctx.$slots, \"default\", {\n            key: 1\n          })];\n        }),\n        _: 3\n      }, 8, [\"id\"]), renderSlot(_ctx.$slots, \"arrow\", {\n        style: normalizeStyle(unref(arrowStyle)),\n        side: unref(side)\n      })], 10, [\"data-side\"])) : createCommentVNode(\"v-if\", true)], 4);\n    };\n  }\n}));\nvar TooltipV2Content = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"content.vue\"]]);\nexport { TooltipV2Content as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}