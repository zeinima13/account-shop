{"ast":null,"code":"import _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport { shallowRef, ref, computed, watch } from 'vue';\nimport { useFormDisabled, useFormSize } from '../../../form/src/hooks/use-form-common-props.mjs';\nimport { isUndefined } from '../../../../utils/types.mjs';\nimport { INPUT_EVENT, UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../../constants/event.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria.mjs';\nimport { useFocusController } from '../../../../hooks/use-focus-controller/index.mjs';\nimport { debugWarn } from '../../../../utils/error.mjs';\nimport { useComposition } from '../../../../hooks/use-composition/index.mjs';\nfunction useInputTag(_ref) {\n  var props = _ref.props,\n    emit = _ref.emit,\n    formItem = _ref.formItem;\n  var disabled = useFormDisabled();\n  var size = useFormSize();\n  var inputRef = shallowRef();\n  var inputValue = ref();\n  var tagSize = computed(function () {\n    return [\"small\"].includes(size.value) ? \"small\" : \"default\";\n  });\n  var placeholder = computed(function () {\n    var _a;\n    return ((_a = props.modelValue) == null ? void 0 : _a.length) ? void 0 : props.placeholder;\n  });\n  var closable = computed(function () {\n    return !(props.readonly || disabled.value);\n  });\n  var inputLimit = computed(function () {\n    var _a, _b;\n    return isUndefined(props.max) ? false : ((_b = (_a = props.modelValue) == null ? void 0 : _a.length) != null ? _b : 0) >= props.max;\n  });\n  var handleInput = function handleInput(event) {\n    if (inputLimit.value) {\n      inputValue.value = void 0;\n      return;\n    }\n    if (isComposing.value) return;\n    emit(INPUT_EVENT, event.target.value);\n  };\n  var handleKeydown = function handleKeydown(event) {\n    var _a;\n    if (isComposing.value) return;\n    switch (event.code) {\n      case props.trigger:\n        event.preventDefault();\n        event.stopPropagation();\n        handleAddTag();\n        break;\n      case EVENT_CODE.numpadEnter:\n        if (props.trigger === EVENT_CODE.enter) {\n          event.preventDefault();\n          event.stopPropagation();\n          handleAddTag();\n        }\n        break;\n      case EVENT_CODE.backspace:\n        if (!inputValue.value && ((_a = props.modelValue) == null ? void 0 : _a.length)) {\n          event.preventDefault();\n          event.stopPropagation();\n          handleRemoveTag(props.modelValue.length - 1);\n        }\n        break;\n    }\n  };\n  var handleAddTag = function handleAddTag() {\n    var _a, _b;\n    var value = (_a = inputValue.value) == null ? void 0 : _a.trim();\n    if (!value || inputLimit.value) return;\n    var list = [].concat(_toConsumableArray((_b = props.modelValue) != null ? _b : []), [value]);\n    emit(UPDATE_MODEL_EVENT, list);\n    emit(CHANGE_EVENT, list);\n    emit(\"add-tag\", value);\n    inputValue.value = void 0;\n  };\n  var handleRemoveTag = function handleRemoveTag(index) {\n    var _a;\n    var value = ((_a = props.modelValue) != null ? _a : []).slice();\n    var _value$splice = value.splice(index, 1),\n      _value$splice2 = _slicedToArray(_value$splice, 1),\n      item = _value$splice2[0];\n    emit(UPDATE_MODEL_EVENT, value);\n    emit(CHANGE_EVENT, value);\n    emit(\"remove-tag\", item);\n  };\n  var handleClear = function handleClear() {\n    inputValue.value = void 0;\n    emit(UPDATE_MODEL_EVENT, void 0);\n    emit(CHANGE_EVENT, void 0);\n    emit(\"clear\");\n  };\n  var handleDragged = function handleDragged(draggingIndex, dropIndex, type) {\n    var _a;\n    var value = ((_a = props.modelValue) != null ? _a : []).slice();\n    var _value$splice3 = value.splice(draggingIndex, 1),\n      _value$splice4 = _slicedToArray(_value$splice3, 1),\n      draggedItem = _value$splice4[0];\n    var step = dropIndex > draggingIndex && type === \"before\" ? -1 : dropIndex < draggingIndex && type === \"after\" ? 1 : 0;\n    value.splice(dropIndex + step, 0, draggedItem);\n    emit(UPDATE_MODEL_EVENT, value);\n    emit(CHANGE_EVENT, value);\n  };\n  var focus = function focus() {\n    var _a;\n    (_a = inputRef.value) == null ? void 0 : _a.focus();\n  };\n  var blur = function blur() {\n    var _a;\n    (_a = inputRef.value) == null ? void 0 : _a.blur();\n  };\n  var _useFocusController = useFocusController(inputRef, {\n      beforeFocus: function beforeFocus() {\n        return disabled.value;\n      },\n      afterBlur: function afterBlur() {\n        var _a;\n        handleAddTag();\n        if (props.validateEvent) {\n          (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\")[\"catch\"](function (err) {\n            return debugWarn(err);\n          });\n        }\n      }\n    }),\n    wrapperRef = _useFocusController.wrapperRef,\n    isFocused = _useFocusController.isFocused;\n  var _useComposition = useComposition({\n      afterComposition: handleInput\n    }),\n    isComposing = _useComposition.isComposing,\n    handleCompositionStart = _useComposition.handleCompositionStart,\n    handleCompositionUpdate = _useComposition.handleCompositionUpdate,\n    handleCompositionEnd = _useComposition.handleCompositionEnd;\n  watch(function () {\n    return props.modelValue;\n  }, function () {\n    var _a;\n    if (props.validateEvent) {\n      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, CHANGE_EVENT)[\"catch\"](function (err) {\n        return debugWarn(err);\n      });\n    }\n  });\n  return {\n    inputRef: inputRef,\n    wrapperRef: wrapperRef,\n    isFocused: isFocused,\n    isComposing: isComposing,\n    inputValue: inputValue,\n    size: size,\n    tagSize: tagSize,\n    placeholder: placeholder,\n    closable: closable,\n    disabled: disabled,\n    inputLimit: inputLimit,\n    handleDragged: handleDragged,\n    handleInput: handleInput,\n    handleKeydown: handleKeydown,\n    handleAddTag: handleAddTag,\n    handleRemoveTag: handleRemoveTag,\n    handleClear: handleClear,\n    handleCompositionStart: handleCompositionStart,\n    handleCompositionUpdate: handleCompositionUpdate,\n    handleCompositionEnd: handleCompositionEnd,\n    focus: focus,\n    blur: blur\n  };\n}\nexport { useInputTag };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}