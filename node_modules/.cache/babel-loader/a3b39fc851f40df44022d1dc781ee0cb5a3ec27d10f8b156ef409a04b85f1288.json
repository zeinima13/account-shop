{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { defineComponent, inject, watch } from 'vue';\nimport { selectKey } from '../../select/src/token.mjs';\nimport { isClient } from '@vueuse/core';\nvar CacheOptions = defineComponent({\n  props: {\n    data: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  setup: function setup(props) {\n    var select = inject(selectKey);\n    watch(function () {\n      return props.data;\n    }, function () {\n      var _a;\n      props.data.forEach(function (item) {\n        if (!select.states.cachedOptions.has(item.value)) {\n          select.states.cachedOptions.set(item.value, item);\n        }\n      });\n      var inputs = ((_a = select.selectRef) == null ? void 0 : _a.querySelectorAll(\"input\")) || [];\n      if (isClient && !Array.from(inputs).includes(document.activeElement)) {\n        select.setSelected();\n      }\n    }, {\n      flush: \"post\",\n      immediate: true\n    });\n    return function () {\n      return void 0;\n    };\n  }\n});\nexport { CacheOptions as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}