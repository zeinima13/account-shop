{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { defineComponent, inject, ref, computed, unref, provide, nextTick, resolveComponent, openBlock, createBlock, withCtx, renderSlot } from 'vue';\nimport { ElCollectionItem, ROVING_FOCUS_COLLECTION_INJECTION_KEY as COLLECTION_INJECTION_KEY } from './roving-focus-group.mjs';\nimport { ROVING_FOCUS_GROUP_INJECTION_KEY, ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY } from './tokens.mjs';\nimport { getFocusIntent, reorderArray, focusFirst } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nvar _sfc_main = defineComponent({\n  components: {\n    ElRovingFocusCollectionItem: ElCollectionItem\n  },\n  props: {\n    focusable: {\n      type: Boolean,\n      \"default\": true\n    },\n    active: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  emits: [\"mousedown\", \"focus\", \"keydown\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var _inject = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0),\n      currentTabbedId = _inject.currentTabbedId,\n      loop = _inject.loop,\n      onItemFocus = _inject.onItemFocus,\n      onItemShiftTab = _inject.onItemShiftTab;\n    var _inject2 = inject(COLLECTION_INJECTION_KEY, void 0),\n      getItems = _inject2.getItems;\n    var id = useId();\n    var rovingFocusGroupItemRef = ref(null);\n    var handleMousedown = composeEventHandlers(function (e) {\n      emit(\"mousedown\", e);\n    }, function (e) {\n      if (!props.focusable) {\n        e.preventDefault();\n      } else {\n        onItemFocus(unref(id));\n      }\n    });\n    var handleFocus = composeEventHandlers(function (e) {\n      emit(\"focus\", e);\n    }, function () {\n      onItemFocus(unref(id));\n    });\n    var handleKeydown = composeEventHandlers(function (e) {\n      emit(\"keydown\", e);\n    }, function (e) {\n      var code = e.code,\n        shiftKey = e.shiftKey,\n        target = e.target,\n        currentTarget = e.currentTarget;\n      if (code === EVENT_CODE.tab && shiftKey) {\n        onItemShiftTab();\n        return;\n      }\n      if (target !== currentTarget) return;\n      var focusIntent = getFocusIntent(e);\n      if (focusIntent) {\n        e.preventDefault();\n        var items = getItems().filter(function (item) {\n          return item.focusable;\n        });\n        var elements = items.map(function (item) {\n          return item.ref;\n        });\n        switch (focusIntent) {\n          case \"last\":\n            {\n              elements.reverse();\n              break;\n            }\n          case \"prev\":\n          case \"next\":\n            {\n              if (focusIntent === \"prev\") {\n                elements.reverse();\n              }\n              var currentIdx = elements.indexOf(currentTarget);\n              elements = loop.value ? reorderArray(elements, currentIdx + 1) : elements.slice(currentIdx + 1);\n              break;\n            }\n        }\n        nextTick(function () {\n          focusFirst(elements);\n        });\n      }\n    });\n    var isCurrentTab = computed(function () {\n      return currentTabbedId.value === unref(id);\n    });\n    provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {\n      rovingFocusGroupItemRef: rovingFocusGroupItemRef,\n      tabIndex: computed(function () {\n        return unref(isCurrentTab) ? 0 : -1;\n      }),\n      handleMousedown: handleMousedown,\n      handleFocus: handleFocus,\n      handleKeydown: handleKeydown\n    });\n    return {\n      id: id,\n      handleKeydown: handleKeydown,\n      handleFocus: handleFocus,\n      handleMousedown: handleMousedown\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_roving_focus_collection_item = resolveComponent(\"el-roving-focus-collection-item\");\n  return openBlock(), createBlock(_component_el_roving_focus_collection_item, {\n    id: _ctx.id,\n    focusable: _ctx.focusable,\n    active: _ctx.active\n  }, {\n    \"default\": withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"default\")];\n    }),\n    _: 3\n  }, 8, [\"id\", \"focusable\", \"active\"]);\n}\nvar ElRovingFocusItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"roving-focus-item.vue\"]]);\nexport { ElRovingFocusItem as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}