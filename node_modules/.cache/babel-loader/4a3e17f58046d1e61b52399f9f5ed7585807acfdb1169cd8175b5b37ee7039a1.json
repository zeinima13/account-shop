{"ast":null,"code":"import _defineProperty from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { ref, computed } from 'vue';\nimport { useProps } from './useProps.mjs';\nfunction useAllowCreate(props, states) {\n  var _useProps = useProps(props),\n    aliasProps = _useProps.aliasProps,\n    getLabel = _useProps.getLabel,\n    getValue = _useProps.getValue;\n  var createOptionCount = ref(0);\n  var cachedSelectedOption = ref();\n  var enableAllowCreateMode = computed(function () {\n    return props.allowCreate && props.filterable;\n  });\n  function hasExistingOption(query) {\n    var hasOption = function hasOption(option) {\n      return getLabel(option) === query;\n    };\n    return props.options && props.options.some(hasOption) || states.createdOptions.some(hasOption);\n  }\n  function selectNewOption(option) {\n    if (!enableAllowCreateMode.value) {\n      return;\n    }\n    if (props.multiple && option.created) {\n      createOptionCount.value++;\n    } else {\n      cachedSelectedOption.value = option;\n    }\n  }\n  function createNewOption(query) {\n    if (enableAllowCreateMode.value) {\n      if (query && query.length > 0) {\n        if (hasExistingOption(query)) {\n          return;\n        }\n        var newOption = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, aliasProps.value.value, query), aliasProps.value.label, query), \"created\", true), aliasProps.value.disabled, false);\n        if (states.createdOptions.length >= createOptionCount.value) {\n          states.createdOptions[createOptionCount.value] = newOption;\n        } else {\n          states.createdOptions.push(newOption);\n        }\n      } else {\n        if (props.multiple) {\n          states.createdOptions.length = createOptionCount.value;\n        } else {\n          var selectedOption = cachedSelectedOption.value;\n          states.createdOptions.length = 0;\n          if (selectedOption && selectedOption.created) {\n            states.createdOptions.push(selectedOption);\n          }\n        }\n      }\n    }\n  }\n  function removeNewOption(option) {\n    if (!enableAllowCreateMode.value || !option || !option.created || option.created && props.reserveKeyword && states.inputValue === getLabel(option)) {\n      return;\n    }\n    var idx = states.createdOptions.findIndex(function (it) {\n      return getValue(it) === getValue(option);\n    });\n    if (~idx) {\n      states.createdOptions.splice(idx, 1);\n      createOptionCount.value--;\n    }\n  }\n  function clearAllNewOption() {\n    if (enableAllowCreateMode.value) {\n      states.createdOptions.length = 0;\n      createOptionCount.value = 0;\n    }\n  }\n  return {\n    createNewOption: createNewOption,\n    removeNewOption: removeNewOption,\n    selectNewOption: selectNewOption,\n    clearAllNewOption: clearAllNewOption\n  };\n}\nexport { useAllowCreate };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}