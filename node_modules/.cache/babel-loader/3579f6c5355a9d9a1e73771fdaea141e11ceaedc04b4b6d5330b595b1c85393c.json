{"ast":null,"code":"import { getCurrentInstance, shallowRef, ref, watch, onMounted } from 'vue';\nimport { useEventListener } from '@vueuse/core';\nimport { isElement } from '../../utils/types.mjs';\nimport { isFunction } from '@vue/shared';\nfunction useFocusController(target) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    beforeFocus = _ref.beforeFocus,\n    afterFocus = _ref.afterFocus,\n    beforeBlur = _ref.beforeBlur,\n    afterBlur = _ref.afterBlur;\n  var instance = getCurrentInstance();\n  var emit = instance.emit;\n  var wrapperRef = shallowRef();\n  var isFocused = ref(false);\n  var handleFocus = function handleFocus(event) {\n    var cancelFocus = isFunction(beforeFocus) ? beforeFocus(event) : false;\n    if (cancelFocus || isFocused.value) return;\n    isFocused.value = true;\n    emit(\"focus\", event);\n    afterFocus == null ? void 0 : afterFocus();\n  };\n  var handleBlur = function handleBlur(event) {\n    var _a;\n    var cancelBlur = isFunction(beforeBlur) ? beforeBlur(event) : false;\n    if (cancelBlur || event.relatedTarget && ((_a = wrapperRef.value) == null ? void 0 : _a.contains(event.relatedTarget))) return;\n    isFocused.value = false;\n    emit(\"blur\", event);\n    afterBlur == null ? void 0 : afterBlur();\n  };\n  var handleClick = function handleClick() {\n    var _a, _b;\n    if (((_a = wrapperRef.value) == null ? void 0 : _a.contains(document.activeElement)) && wrapperRef.value !== document.activeElement) return;\n    (_b = target.value) == null ? void 0 : _b.focus();\n  };\n  watch(wrapperRef, function (el) {\n    if (el) {\n      el.setAttribute(\"tabindex\", \"-1\");\n    }\n  });\n  useEventListener(wrapperRef, \"focus\", handleFocus, true);\n  useEventListener(wrapperRef, \"blur\", handleBlur, true);\n  useEventListener(wrapperRef, \"click\", handleClick, true);\n  if (process.env.NODE_ENV === \"test\") {\n    onMounted(function () {\n      var targetEl = isElement(target.value) ? target.value : document.querySelector(\"input,textarea\");\n      if (targetEl) {\n        useEventListener(targetEl, \"focus\", handleFocus, true);\n        useEventListener(targetEl, \"blur\", handleBlur, true);\n      }\n    });\n  }\n  return {\n    isFocused: isFocused,\n    wrapperRef: wrapperRef,\n    handleFocus: handleFocus,\n    handleBlur: handleBlur\n  };\n}\nexport { useFocusController };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}