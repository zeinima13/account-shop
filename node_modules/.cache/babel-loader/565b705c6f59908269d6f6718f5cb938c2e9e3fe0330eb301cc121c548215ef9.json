{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { getCurrentInstance, unref, nextTick } from 'vue';\nimport { isNull } from 'lodash-unified';\nimport useWatcher from './watcher.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nfunction replaceColumn(array, column) {\n  return array.map(function (item) {\n    var _a;\n    if (item.id === column.id) {\n      return column;\n    } else if ((_a = item.children) == null ? void 0 : _a.length) {\n      item.children = replaceColumn(item.children, column);\n    }\n    return item;\n  });\n}\nfunction sortColumn(array) {\n  array.forEach(function (item) {\n    var _a, _b;\n    item.no = (_a = item.getColumnIndex) == null ? void 0 : _a.call(item);\n    if ((_b = item.children) == null ? void 0 : _b.length) {\n      sortColumn(item.children);\n    }\n  });\n  array.sort(function (cur, pre) {\n    return cur.no - pre.no;\n  });\n}\nfunction useStore() {\n  var instance = getCurrentInstance();\n  var watcher = useWatcher();\n  var ns = useNamespace(\"table\");\n  var mutations = {\n    setData: function setData(states, data) {\n      var dataInstanceChanged = unref(states._data) !== data;\n      states.data.value = data;\n      states._data.value = data;\n      instance.store.execQuery();\n      instance.store.updateCurrentRowData();\n      instance.store.updateExpandRows();\n      instance.store.updateTreeData(instance.store.states.defaultExpandAll.value);\n      if (unref(states.reserveSelection)) {\n        instance.store.assertRowKey();\n        instance.store.updateSelectionByRowKey();\n      } else {\n        if (dataInstanceChanged) {\n          instance.store.clearSelection();\n        } else {\n          instance.store.cleanSelection();\n        }\n      }\n      instance.store.updateAllSelected();\n      if (instance.$ready) {\n        instance.store.scheduleLayout();\n      }\n    },\n    insertColumn: function insertColumn(states, column, parent, updateColumnOrder) {\n      var array = unref(states._columns);\n      var newColumns = [];\n      if (!parent) {\n        array.push(column);\n        newColumns = array;\n      } else {\n        if (parent && !parent.children) {\n          parent.children = [];\n        }\n        parent.children.push(column);\n        newColumns = replaceColumn(array, parent);\n      }\n      sortColumn(newColumns);\n      states._columns.value = newColumns;\n      states.updateOrderFns.push(updateColumnOrder);\n      if (column.type === \"selection\") {\n        states.selectable.value = column.selectable;\n        states.reserveSelection.value = column.reserveSelection;\n      }\n      if (instance.$ready) {\n        instance.store.updateColumns();\n        instance.store.scheduleLayout();\n      }\n    },\n    updateColumnOrder: function updateColumnOrder(states, column) {\n      var _a;\n      var newColumnIndex = (_a = column.getColumnIndex) == null ? void 0 : _a.call(column);\n      if (newColumnIndex === column.no) return;\n      sortColumn(states._columns.value);\n      if (instance.$ready) {\n        instance.store.updateColumns();\n      }\n    },\n    removeColumn: function removeColumn(states, column, parent, updateColumnOrder) {\n      var array = unref(states._columns) || [];\n      if (parent) {\n        parent.children.splice(parent.children.findIndex(function (item) {\n          return item.id === column.id;\n        }), 1);\n        nextTick(function () {\n          var _a;\n          if (((_a = parent.children) == null ? void 0 : _a.length) === 0) {\n            delete parent.children;\n          }\n        });\n        states._columns.value = replaceColumn(array, parent);\n      } else {\n        var index = array.indexOf(column);\n        if (index > -1) {\n          array.splice(index, 1);\n          states._columns.value = array;\n        }\n      }\n      var updateFnIndex = states.updateOrderFns.indexOf(updateColumnOrder);\n      updateFnIndex > -1 && states.updateOrderFns.splice(updateFnIndex, 1);\n      if (instance.$ready) {\n        instance.store.updateColumns();\n        instance.store.scheduleLayout();\n      }\n    },\n    sort: function sort(states, options) {\n      var prop = options.prop,\n        order = options.order,\n        init = options.init;\n      if (prop) {\n        var column = unref(states.columns).find(function (column2) {\n          return column2.property === prop;\n        });\n        if (column) {\n          column.order = order;\n          instance.store.updateSort(column, prop, order);\n          instance.store.commit(\"changeSortCondition\", {\n            init: init\n          });\n        }\n      }\n    },\n    changeSortCondition: function changeSortCondition(states, options) {\n      var sortingColumn = states.sortingColumn,\n        sortProp = states.sortProp,\n        sortOrder = states.sortOrder;\n      var columnValue = unref(sortingColumn),\n        propValue = unref(sortProp),\n        orderValue = unref(sortOrder);\n      if (isNull(orderValue)) {\n        states.sortingColumn.value = null;\n        states.sortProp.value = null;\n      }\n      var ignore = {\n        filter: true\n      };\n      instance.store.execQuery(ignore);\n      if (!options || !(options.silent || options.init)) {\n        instance.emit(\"sort-change\", {\n          column: columnValue,\n          prop: propValue,\n          order: orderValue\n        });\n      }\n      instance.store.updateTableScrollY();\n    },\n    filterChange: function filterChange(_states, options) {\n      var column = options.column,\n        values = options.values,\n        silent = options.silent;\n      var newFilters = instance.store.updateFilters(column, values);\n      instance.store.execQuery();\n      if (!silent) {\n        instance.emit(\"filter-change\", newFilters);\n      }\n      instance.store.updateTableScrollY();\n    },\n    toggleAllSelection: function toggleAllSelection() {\n      instance.store.toggleAllSelection();\n    },\n    rowSelectedChanged: function rowSelectedChanged(_states, row) {\n      instance.store.toggleRowSelection(row);\n      instance.store.updateAllSelected();\n    },\n    setHoverRow: function setHoverRow(states, row) {\n      states.hoverRow.value = row;\n    },\n    setCurrentRow: function setCurrentRow(_states, row) {\n      instance.store.updateCurrentRow(row);\n    }\n  };\n  var commit = function commit(name) {\n    var mutations2 = instance.store.mutations;\n    if (mutations2[name]) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      mutations2[name].apply(instance, [instance.store.states].concat(args));\n    } else {\n      throw new Error(\"Action not found: \".concat(name));\n    }\n  };\n  var updateTableScrollY = function updateTableScrollY() {\n    nextTick(function () {\n      return instance.layout.updateScrollY.apply(instance.layout);\n    });\n  };\n  return _objectSpread(_objectSpread({\n    ns: ns\n  }, watcher), {}, {\n    mutations: mutations,\n    commit: commit,\n    updateTableScrollY: updateTableScrollY\n  });\n}\nexport { useStore as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}