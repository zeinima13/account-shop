{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { isVNode, render, createVNode } from 'vue';\nimport MessageBoxConstructor from './index.mjs';\nimport { isClient } from '@vueuse/core';\nimport { isString, isObject, hasOwn, isFunction } from '@vue/shared';\nimport { isUndefined, isElement } from '../../../utils/types.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nvar messageInstance = /* @__PURE__ */new Map();\nvar getAppendToElement = function getAppendToElement(props) {\n  var appendTo = document.body;\n  if (props.appendTo) {\n    if (isString(props.appendTo)) {\n      appendTo = document.querySelector(props.appendTo);\n    }\n    if (isElement(props.appendTo)) {\n      appendTo = props.appendTo;\n    }\n    if (!isElement(appendTo)) {\n      debugWarn(\"ElMessageBox\", \"the appendTo option is not an HTMLElement. Falling back to document.body.\");\n      appendTo = document.body;\n    }\n  }\n  return appendTo;\n};\nvar initInstance = function initInstance(props, container) {\n  var appContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var vnode = createVNode(MessageBoxConstructor, props, isFunction(props.message) || isVNode(props.message) ? {\n    \"default\": isFunction(props.message) ? props.message : function () {\n      return props.message;\n    }\n  } : null);\n  vnode.appContext = appContext;\n  render(vnode, container);\n  getAppendToElement(props).appendChild(container.firstElementChild);\n  return vnode.component;\n};\nvar genContainer = function genContainer() {\n  return document.createElement(\"div\");\n};\nvar showMessage = function showMessage(options, appContext) {\n  var container = genContainer();\n  options.onVanish = function () {\n    render(null, container);\n    messageInstance[\"delete\"](vm);\n  };\n  options.onAction = function (action) {\n    var currentMsg = messageInstance.get(vm);\n    var resolve;\n    if (options.showInput) {\n      resolve = {\n        value: vm.inputValue,\n        action: action\n      };\n    } else {\n      resolve = action;\n    }\n    if (options.callback) {\n      options.callback(resolve, instance.proxy);\n    } else {\n      if (action === \"cancel\" || action === \"close\") {\n        if (options.distinguishCancelAndClose && action !== \"cancel\") {\n          currentMsg.reject(\"close\");\n        } else {\n          currentMsg.reject(\"cancel\");\n        }\n      } else {\n        currentMsg.resolve(resolve);\n      }\n    }\n  };\n  var instance = initInstance(options, container, appContext);\n  var vm = instance.proxy;\n  for (var prop in options) {\n    if (hasOwn(options, prop) && !hasOwn(vm.$props, prop)) {\n      vm[prop] = options[prop];\n    }\n  }\n  vm.visible = true;\n  return vm;\n};\nfunction MessageBox(options) {\n  var appContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (!isClient) return Promise.reject();\n  var callback;\n  if (isString(options) || isVNode(options)) {\n    options = {\n      message: options\n    };\n  } else {\n    callback = options.callback;\n  }\n  return new Promise(function (resolve, reject) {\n    var vm = showMessage(options, appContext != null ? appContext : MessageBox._context);\n    messageInstance.set(vm, {\n      options: options,\n      callback: callback,\n      resolve: resolve,\n      reject: reject\n    });\n  });\n}\nvar MESSAGE_BOX_VARIANTS = [\"alert\", \"confirm\", \"prompt\"];\nvar MESSAGE_BOX_DEFAULT_OPTS = {\n  alert: {\n    closeOnPressEscape: false,\n    closeOnClickModal: false\n  },\n  confirm: {\n    showCancelButton: true\n  },\n  prompt: {\n    showCancelButton: true,\n    showInput: true\n  }\n};\nMESSAGE_BOX_VARIANTS.forEach(function (boxType) {\n  MessageBox[boxType] = messageBoxFactory(boxType);\n});\nfunction messageBoxFactory(boxType) {\n  return function (message, title, options, appContext) {\n    var titleOrOpts = \"\";\n    if (isObject(title)) {\n      options = title;\n      titleOrOpts = \"\";\n    } else if (isUndefined(title)) {\n      titleOrOpts = \"\";\n    } else {\n      titleOrOpts = title;\n    }\n    return MessageBox(Object.assign(_objectSpread({\n      title: titleOrOpts,\n      message: message,\n      type: \"\"\n    }, MESSAGE_BOX_DEFAULT_OPTS[boxType]), options, {\n      boxType: boxType\n    }), appContext);\n  };\n}\nMessageBox.close = function () {\n  messageInstance.forEach(function (_, vm) {\n    vm.doClose();\n  });\n  messageInstance.clear();\n};\nMessageBox._context = null;\nexport { MessageBox as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}