{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { getCurrentInstance, watch } from 'vue';\nimport { parseWidth, parseMinWidth } from '../util.mjs';\nimport { hasOwn } from '@vue/shared';\nfunction getAllAliases(props, aliases) {\n  return props.reduce(function (prev, cur) {\n    prev[cur] = cur;\n    return prev;\n  }, aliases);\n}\nfunction useWatcher(owner, props_) {\n  var instance = getCurrentInstance();\n  var registerComplexWatchers = function registerComplexWatchers() {\n    var props = [\"fixed\"];\n    var aliases = {\n      realWidth: \"width\",\n      realMinWidth: \"minWidth\"\n    };\n    var allAliases = getAllAliases(props, aliases);\n    Object.keys(allAliases).forEach(function (key) {\n      var columnKey = aliases[key];\n      if (hasOwn(props_, columnKey)) {\n        watch(function () {\n          return props_[columnKey];\n        }, function (newVal) {\n          var value = newVal;\n          if (columnKey === \"width\" && key === \"realWidth\") {\n            value = parseWidth(newVal);\n          }\n          if (columnKey === \"minWidth\" && key === \"realMinWidth\") {\n            value = parseMinWidth(newVal);\n          }\n          instance.columnConfig.value[columnKey] = value;\n          instance.columnConfig.value[key] = value;\n          var updateColumns = columnKey === \"fixed\";\n          owner.value.store.scheduleLayout(updateColumns);\n        });\n      }\n    });\n  };\n  var registerNormalWatchers = function registerNormalWatchers() {\n    var props = [\"label\", \"filters\", \"filterMultiple\", \"filteredValue\", \"sortable\", \"index\", \"formatter\", \"className\", \"labelClassName\", \"filterClassName\", \"showOverflowTooltip\"];\n    var aliases = {\n      property: \"prop\",\n      align: \"realAlign\",\n      headerAlign: \"realHeaderAlign\"\n    };\n    var allAliases = getAllAliases(props, aliases);\n    Object.keys(allAliases).forEach(function (key) {\n      var columnKey = aliases[key];\n      if (hasOwn(props_, columnKey)) {\n        watch(function () {\n          return props_[columnKey];\n        }, function (newVal) {\n          instance.columnConfig.value[key] = newVal;\n        });\n      }\n    });\n  };\n  return {\n    registerComplexWatchers: registerComplexWatchers,\n    registerNormalWatchers: registerNormalWatchers\n  };\n}\nexport { useWatcher as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}