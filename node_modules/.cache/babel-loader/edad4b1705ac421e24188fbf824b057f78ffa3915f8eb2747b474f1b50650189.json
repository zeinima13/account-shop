{"ast":null,"code":"import { shallowRef, ref, onMounted } from 'vue';\nimport { useThrottleFn, useEventListener } from '@vueuse/core';\nimport { throwError } from '../../../utils/error.mjs';\nvar useBackTop = function useBackTop(props, emit, componentName) {\n  var el = shallowRef();\n  var container = shallowRef();\n  var visible = ref(false);\n  var handleScroll = function handleScroll() {\n    if (el.value) visible.value = el.value.scrollTop >= props.visibilityHeight;\n  };\n  var handleClick = function handleClick(event) {\n    var _a;\n    (_a = el.value) == null ? void 0 : _a.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n    emit(\"click\", event);\n  };\n  var handleScrollThrottled = useThrottleFn(handleScroll, 300, true);\n  useEventListener(container, \"scroll\", handleScrollThrottled);\n  onMounted(function () {\n    var _a;\n    container.value = document;\n    el.value = document.documentElement;\n    if (props.target) {\n      el.value = (_a = document.querySelector(props.target)) != null ? _a : void 0;\n      if (!el.value) {\n        throwError(componentName, \"target does not exist: \".concat(props.target));\n      }\n      container.value = el.value;\n    }\n    handleScroll();\n  });\n  return {\n    visible: visible,\n    handleClick: handleClick\n  };\n};\nexport { useBackTop };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}