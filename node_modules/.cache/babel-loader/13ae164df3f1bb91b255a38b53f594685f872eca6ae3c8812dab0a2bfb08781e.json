{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { inject, computed, h } from 'vue';\nimport { merge } from 'lodash-unified';\nimport { getRowIdentity } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport useEvents from './events-helper.mjs';\nimport useStyles from './styles-helper.mjs';\nimport TdWrapper from './td-wrapper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { isBoolean, isPropAbsent } from '../../../../utils/types.mjs';\nfunction useRender(props) {\n  var parent = inject(TABLE_INJECTION_KEY);\n  var ns = useNamespace(\"table\");\n  var _useEvents = useEvents(props),\n    handleDoubleClick = _useEvents.handleDoubleClick,\n    handleClick = _useEvents.handleClick,\n    handleContextMenu = _useEvents.handleContextMenu,\n    handleMouseEnter = _useEvents.handleMouseEnter,\n    handleMouseLeave = _useEvents.handleMouseLeave,\n    handleCellMouseEnter = _useEvents.handleCellMouseEnter,\n    handleCellMouseLeave = _useEvents.handleCellMouseLeave,\n    tooltipContent = _useEvents.tooltipContent,\n    tooltipTrigger = _useEvents.tooltipTrigger;\n  var _useStyles = useStyles(props),\n    getRowStyle = _useStyles.getRowStyle,\n    getRowClass = _useStyles.getRowClass,\n    getCellStyle = _useStyles.getCellStyle,\n    getCellClass = _useStyles.getCellClass,\n    getSpan = _useStyles.getSpan,\n    getColspanRealWidth = _useStyles.getColspanRealWidth;\n  var firstDefaultColumnIndex = computed(function () {\n    return props.store.states.columns.value.findIndex(function (_ref) {\n      var type = _ref.type;\n      return type === \"default\";\n    });\n  });\n  var getKeyOfRow = function getKeyOfRow(row, index) {\n    var rowKey = parent.props.rowKey;\n    if (rowKey) {\n      return getRowIdentity(row, rowKey);\n    }\n    return index;\n  };\n  var rowRender = function rowRender(row, $index, treeRowData) {\n    var expanded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var tooltipEffect = props.tooltipEffect,\n      tooltipOptions = props.tooltipOptions,\n      store = props.store;\n    var _store$states = store.states,\n      indent = _store$states.indent,\n      columns = _store$states.columns;\n    var rowClasses = getRowClass(row, $index);\n    var display = true;\n    if (treeRowData) {\n      rowClasses.push(ns.em(\"row\", \"level-\".concat(treeRowData.level)));\n      display = treeRowData.display;\n    }\n    var displayStyle = display ? null : {\n      display: \"none\"\n    };\n    return h(\"tr\", {\n      style: [displayStyle, getRowStyle(row, $index)],\n      \"class\": rowClasses,\n      key: getKeyOfRow(row, $index),\n      onDblclick: function onDblclick($event) {\n        return handleDoubleClick($event, row);\n      },\n      onClick: function onClick($event) {\n        return handleClick($event, row);\n      },\n      onContextmenu: function onContextmenu($event) {\n        return handleContextMenu($event, row);\n      },\n      onMouseenter: function onMouseenter() {\n        return handleMouseEnter($index);\n      },\n      onMouseleave: handleMouseLeave\n    }, columns.value.map(function (column, cellIndex) {\n      var _getSpan = getSpan(row, column, $index, cellIndex),\n        rowspan = _getSpan.rowspan,\n        colspan = _getSpan.colspan;\n      if (!rowspan || !colspan) {\n        return null;\n      }\n      var columnData = Object.assign({}, column);\n      columnData.realWidth = getColspanRealWidth(columns.value, colspan, cellIndex);\n      var data = {\n        store: props.store,\n        _self: props.context || parent,\n        column: columnData,\n        row: row,\n        $index: $index,\n        cellIndex: cellIndex,\n        expanded: expanded\n      };\n      if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n        data.treeNode = {\n          indent: treeRowData.level * indent.value,\n          level: treeRowData.level\n        };\n        if (isBoolean(treeRowData.expanded)) {\n          data.treeNode.expanded = treeRowData.expanded;\n          if (\"loading\" in treeRowData) {\n            data.treeNode.loading = treeRowData.loading;\n          }\n          if (\"noLazyChildren\" in treeRowData) {\n            data.treeNode.noLazyChildren = treeRowData.noLazyChildren;\n          }\n        }\n      }\n      var baseKey = \"\".concat(getKeyOfRow(row, $index), \",\").concat(cellIndex);\n      var patchKey = columnData.columnKey || columnData.rawColumnKey || \"\";\n      var mergedTooltipOptions = column.showOverflowTooltip && merge({\n        effect: tooltipEffect\n      }, tooltipOptions, column.showOverflowTooltip);\n      return h(TdWrapper, {\n        style: getCellStyle($index, cellIndex, row, column),\n        \"class\": getCellClass($index, cellIndex, row, column, colspan - 1),\n        key: \"\".concat(patchKey).concat(baseKey),\n        rowspan: rowspan,\n        colspan: colspan,\n        onMouseenter: function onMouseenter($event) {\n          return handleCellMouseEnter($event, row, mergedTooltipOptions);\n        },\n        onMouseleave: handleCellMouseLeave\n      }, {\n        \"default\": function _default() {\n          return cellChildren(cellIndex, column, data);\n        }\n      });\n    }));\n  };\n  var cellChildren = function cellChildren(cellIndex, column, data) {\n    return column.renderCell(data);\n  };\n  var wrappedRowRender = function wrappedRowRender(row, $index) {\n    var store = props.store;\n    var isRowExpanded = store.isRowExpanded,\n      assertRowKey = store.assertRowKey;\n    var _store$states2 = store.states,\n      treeData = _store$states2.treeData,\n      lazyTreeNodeMap = _store$states2.lazyTreeNodeMap,\n      childrenColumnName = _store$states2.childrenColumnName,\n      rowKey = _store$states2.rowKey;\n    var columns = store.states.columns.value;\n    var hasExpandColumn = columns.some(function (_ref2) {\n      var type = _ref2.type;\n      return type === \"expand\";\n    });\n    if (hasExpandColumn) {\n      var expanded = isRowExpanded(row);\n      var tr = rowRender(row, $index, void 0, expanded);\n      var renderExpanded = parent.renderExpanded;\n      if (expanded) {\n        if (!renderExpanded) {\n          console.error(\"[Element Error]renderExpanded is required.\");\n          return tr;\n        }\n        return [[tr, h(\"tr\", {\n          key: \"expanded-row__\".concat(tr.key)\n        }, [h(\"td\", {\n          colspan: columns.length,\n          \"class\": \"\".concat(ns.e(\"cell\"), \" \").concat(ns.e(\"expanded-cell\"))\n        }, [renderExpanded({\n          row: row,\n          $index: $index,\n          store: store,\n          expanded: expanded\n        })])])]];\n      } else {\n        return [[tr]];\n      }\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey();\n      var key = getRowIdentity(row, rowKey.value);\n      var cur = treeData.value[key];\n      var treeRowData = null;\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true\n        };\n        if (isBoolean(cur.lazy)) {\n          if (isBoolean(cur.loaded) && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length);\n          }\n          treeRowData.loading = cur.loading;\n        }\n      }\n      var tmp = [rowRender(row, $index, treeRowData)];\n      if (cur) {\n        var i = 0;\n        var _traverse = function traverse(children, parent2) {\n          if (!(children && children.length && parent2)) return;\n          children.forEach(function (node) {\n            var innerTreeRowData = {\n              display: parent2.display && parent2.expanded,\n              level: parent2.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false\n            };\n            var childKey = getRowIdentity(node, rowKey.value);\n            if (isPropAbsent(childKey)) {\n              throw new Error(\"For nested data item, row-key is required.\");\n            }\n            cur = _objectSpread({}, treeData.value[childKey]);\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded;\n              cur.level = cur.level || innerTreeRowData.level;\n              cur.display = !!(cur.expanded && innerTreeRowData.display);\n              if (isBoolean(cur.lazy)) {\n                if (isBoolean(cur.loaded) && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);\n                }\n                innerTreeRowData.loading = cur.loading;\n              }\n            }\n            i++;\n            tmp.push(rowRender(node, $index + i, innerTreeRowData));\n            if (cur) {\n              var nodes2 = lazyTreeNodeMap.value[childKey] || node[childrenColumnName.value];\n              _traverse(nodes2, cur);\n            }\n          });\n        };\n        cur.display = true;\n        var nodes = lazyTreeNodeMap.value[key] || row[childrenColumnName.value];\n        _traverse(nodes, cur);\n      }\n      return tmp;\n    } else {\n      return rowRender(row, $index, void 0);\n    }\n  };\n  return {\n    wrappedRowRender: wrappedRowRender,\n    tooltipContent: tooltipContent,\n    tooltipTrigger: tooltipTrigger\n  };\n}\nexport { useRender as default };","map":{"version":3,"names":["useRender","props","parent","inject","TABLE_INJECTION_KEY","ns","useNamespace","_useEvents","useEvents","handleDoubleClick","handleClick","handleContextMenu","handleMouseEnter","handleMouseLeave","handleCellMouseEnter","handleCellMouseLeave","tooltipContent","tooltipTrigger","_useStyles","useStyles","getRowStyle","getRowClass","getCellStyle","getCellClass","getSpan","getColspanRealWidth","firstDefaultColumnIndex","computed","store","states","columns","value","findIndex","_ref","type","getKeyOfRow","row","index","rowKey","getRowIdentity","rowRender","$index","treeRowData","expanded","arguments","length","undefined","tooltipEffect","tooltipOptions","_store$states","indent","rowClasses","display","push","em","concat","level","displayStyle","h","style","key","onDblclick","$event","onClick","onContextmenu","onMouseenter","onMouseleave","map","column","cellIndex","_getSpan","rowspan","colspan","columnData","Object","assign","realWidth","data","_self","context","treeNode","isBoolean","loading","noLazyChildren","baseKey","patchKey","columnKey","rawColumnKey","mergedTooltipOptions","showOverflowTooltip","merge","effect","TdWrapper","default","cellChildren","renderCell","wrappedRowRender","isRowExpanded","assertRowKey","_store$states2","treeData","lazyTreeNodeMap","childrenColumnName","hasExpandColumn","some","_ref2","tr","renderExpanded","console","error","e","keys","cur","lazy","loaded","children","tmp","i","traverse","parent2","forEach","node","innerTreeRowData","childKey","isPropAbsent","Error","_objectSpread","nodes2","nodes"],"sources":["../../../../../../../packages/components/table/src/table-body/render-helper.ts"],"sourcesContent":["// @ts-nocheck\nimport { computed, h, inject } from 'vue'\nimport { merge } from 'lodash-unified'\nimport { useNamespace } from '@element-plus/hooks'\nimport { isBoolean, isPropAbsent } from '@element-plus/utils'\nimport { getRowIdentity } from '../util'\nimport { TABLE_INJECTION_KEY } from '../tokens'\nimport useEvents from './events-helper'\nimport useStyles from './styles-helper'\nimport TdWrapper from './td-wrapper.vue'\nimport type { TableBodyProps } from './defaults'\nimport type { RenderRowData, TableProps, TreeNode } from '../table/defaults'\n\nfunction useRender<T>(props: Partial<TableBodyProps<T>>) {\n  const parent = inject(TABLE_INJECTION_KEY)\n  const ns = useNamespace('table')\n  const {\n    handleDoubleClick,\n    handleClick,\n    handleContextMenu,\n    handleMouseEnter,\n    handleMouseLeave,\n    handleCellMouseEnter,\n    handleCellMouseLeave,\n    tooltipContent,\n    tooltipTrigger,\n  } = useEvents(props)\n  const {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth,\n  } = useStyles(props)\n  const firstDefaultColumnIndex = computed(() => {\n    return props.store.states.columns.value.findIndex(\n      ({ type }) => type === 'default'\n    )\n  })\n  const getKeyOfRow = (row: T, index: number) => {\n    const rowKey = (parent.props as Partial<TableProps<T>>).rowKey\n    if (rowKey) {\n      return getRowIdentity(row, rowKey)\n    }\n    return index\n  }\n  const rowRender = (\n    row: T,\n    $index: number,\n    treeRowData?: TreeNode,\n    expanded = false\n  ) => {\n    const { tooltipEffect, tooltipOptions, store } = props\n    const { indent, columns } = store.states\n    const rowClasses = getRowClass(row, $index)\n    let display = true\n    if (treeRowData) {\n      rowClasses.push(ns.em('row', `level-${treeRowData.level}`))\n      display = treeRowData.display\n    }\n    const displayStyle = display\n      ? null\n      : {\n          display: 'none',\n        }\n    return h(\n      'tr',\n      {\n        style: [displayStyle, getRowStyle(row, $index)],\n        class: rowClasses,\n        key: getKeyOfRow(row, $index),\n        onDblclick: ($event) => handleDoubleClick($event, row),\n        onClick: ($event) => handleClick($event, row),\n        onContextmenu: ($event) => handleContextMenu($event, row),\n        onMouseenter: () => handleMouseEnter($index),\n        onMouseleave: handleMouseLeave,\n      },\n      columns.value.map((column, cellIndex) => {\n        const { rowspan, colspan } = getSpan(row, column, $index, cellIndex)\n        if (!rowspan || !colspan) {\n          return null\n        }\n        const columnData = Object.assign({}, column)\n        columnData.realWidth = getColspanRealWidth(\n          columns.value,\n          colspan,\n          cellIndex\n        )\n        const data: RenderRowData<T> = {\n          store: props.store,\n          _self: props.context || parent,\n          column: columnData,\n          row,\n          $index,\n          cellIndex,\n          expanded,\n        }\n        if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n          data.treeNode = {\n            indent: treeRowData.level * indent.value,\n            level: treeRowData.level,\n          }\n          if (isBoolean(treeRowData.expanded)) {\n            data.treeNode.expanded = treeRowData.expanded\n            // 表明是懒加载\n            if ('loading' in treeRowData) {\n              data.treeNode.loading = treeRowData.loading\n            }\n            if ('noLazyChildren' in treeRowData) {\n              data.treeNode.noLazyChildren = treeRowData.noLazyChildren\n            }\n          }\n        }\n        const baseKey = `${getKeyOfRow(row, $index)},${cellIndex}`\n        const patchKey = columnData.columnKey || columnData.rawColumnKey || ''\n        const mergedTooltipOptions =\n          column.showOverflowTooltip &&\n          merge(\n            {\n              effect: tooltipEffect,\n            },\n            tooltipOptions,\n            column.showOverflowTooltip\n          )\n        return h(\n          TdWrapper,\n          {\n            style: getCellStyle($index, cellIndex, row, column),\n            class: getCellClass($index, cellIndex, row, column, colspan - 1),\n            key: `${patchKey}${baseKey}`,\n            rowspan,\n            colspan,\n            onMouseenter: ($event) =>\n              handleCellMouseEnter($event, row, mergedTooltipOptions),\n            onMouseleave: handleCellMouseLeave,\n          },\n          {\n            default: () => cellChildren(cellIndex, column, data),\n          }\n        )\n      })\n    )\n  }\n  const cellChildren = (cellIndex, column, data) => {\n    return column.renderCell(data)\n  }\n\n  const wrappedRowRender = (row: T, $index: number) => {\n    const store = props.store\n    const { isRowExpanded, assertRowKey } = store\n    const { treeData, lazyTreeNodeMap, childrenColumnName, rowKey } =\n      store.states\n    const columns = store.states.columns.value\n    const hasExpandColumn = columns.some(({ type }) => type === 'expand')\n    if (hasExpandColumn) {\n      const expanded = isRowExpanded(row)\n      const tr = rowRender(row, $index, undefined, expanded)\n      const renderExpanded = parent.renderExpanded\n      if (expanded) {\n        if (!renderExpanded) {\n          console.error('[Element Error]renderExpanded is required.')\n          return tr\n        }\n        // 使用二维数组，避免修改 $index\n        // Use a matrix to avoid modifying $index\n        return [\n          [\n            tr,\n            h(\n              'tr',\n              {\n                key: `expanded-row__${tr.key as string}`,\n              },\n              [\n                h(\n                  'td',\n                  {\n                    colspan: columns.length,\n                    class: `${ns.e('cell')} ${ns.e('expanded-cell')}`,\n                  },\n                  [renderExpanded({ row, $index, store, expanded })]\n                ),\n              ]\n            ),\n          ],\n        ]\n      } else {\n        // 使用二维数组，避免修改 $index\n        // Use a two dimensional array avoid modifying $index\n        return [[tr]]\n      }\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey()\n      // TreeTable 时，rowKey 必须由用户设定，不使用 getKeyOfRow 计算\n      // 在调用 rowRender 函数时，仍然会计算 rowKey，不太好的操作\n      const key = getRowIdentity(row, rowKey.value)\n      let cur = treeData.value[key]\n      let treeRowData = null\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true,\n        }\n        if (isBoolean(cur.lazy)) {\n          if (isBoolean(cur.loaded) && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length)\n          }\n          treeRowData.loading = cur.loading\n        }\n      }\n      const tmp = [rowRender(row, $index, treeRowData)]\n      // 渲染嵌套数据\n      if (cur) {\n        // currentRow 记录的是 index，所以还需主动增加 TreeTable 的 index\n        let i = 0\n        const traverse = (children, parent) => {\n          if (!(children && children.length && parent)) return\n          children.forEach((node) => {\n            // 父节点的 display 状态影响子节点的显示状态\n            const innerTreeRowData = {\n              display: parent.display && parent.expanded,\n              level: parent.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false,\n            }\n            const childKey = getRowIdentity(node, rowKey.value)\n            if (isPropAbsent(childKey)) {\n              throw new Error('For nested data item, row-key is required.')\n            }\n            cur = { ...treeData.value[childKey] }\n            // 对于当前节点，分成有无子节点两种情况。\n            // 如果包含子节点的，设置 expanded 属性。\n            // 对于它子节点的 display 属性由它本身的 expanded 与 display 共同决定。\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded\n              // 懒加载的某些节点，level 未知\n              cur.level = cur.level || innerTreeRowData.level\n              cur.display = !!(cur.expanded && innerTreeRowData.display)\n              if (isBoolean(cur.lazy)) {\n                if (isBoolean(cur.loaded) && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(\n                    cur.children && cur.children.length\n                  )\n                }\n                innerTreeRowData.loading = cur.loading\n              }\n            }\n            i++\n            tmp.push(rowRender(node, $index + i, innerTreeRowData))\n            if (cur) {\n              const nodes =\n                lazyTreeNodeMap.value[childKey] ||\n                node[childrenColumnName.value]\n              traverse(nodes, cur)\n            }\n          })\n        }\n        // 对于 root 节点，display 一定为 true\n        cur.display = true\n        const nodes =\n          lazyTreeNodeMap.value[key] || row[childrenColumnName.value]\n        traverse(nodes, cur)\n      }\n      return tmp\n    } else {\n      return rowRender(row, $index, undefined)\n    }\n  }\n\n  return {\n    wrappedRowRender,\n    tooltipContent,\n    tooltipTrigger,\n  }\n}\n\nexport default useRender\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}