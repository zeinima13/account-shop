{"ast":null,"code":"import { getCurrentInstance, ref, computed, watch, nextTick, onMounted } from 'vue';\nimport { useTimeoutFn, isClient } from '@vueuse/core';\nimport { isUndefined } from 'lodash-unified';\nimport { useLockscreen } from '../../../hooks/use-lockscreen/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { useGlobalConfig } from '../../config-provider/src/hooks/use-global-config.mjs';\nimport { defaultNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nvar useDialog = function useDialog(props, targetRef) {\n  var _a;\n  var instance = getCurrentInstance();\n  var emit = instance.emit;\n  var _useZIndex = useZIndex(),\n    nextZIndex = _useZIndex.nextZIndex;\n  var lastPosition = \"\";\n  var titleId = useId();\n  var bodyId = useId();\n  var visible = ref(false);\n  var closed = ref(false);\n  var rendered = ref(false);\n  var zIndex = ref((_a = props.zIndex) != null ? _a : nextZIndex());\n  var openTimer = void 0;\n  var closeTimer = void 0;\n  var namespace = useGlobalConfig(\"namespace\", defaultNamespace);\n  var style = computed(function () {\n    var style2 = {};\n    var varPrefix = \"--\".concat(namespace.value, \"-dialog\");\n    if (!props.fullscreen) {\n      if (props.top) {\n        style2[\"\".concat(varPrefix, \"-margin-top\")] = props.top;\n      }\n      if (props.width) {\n        style2[\"\".concat(varPrefix, \"-width\")] = addUnit(props.width);\n      }\n    }\n    return style2;\n  });\n  var overlayDialogStyle = computed(function () {\n    if (props.alignCenter) {\n      return {\n        display: \"flex\"\n      };\n    }\n    return {};\n  });\n  function afterEnter() {\n    emit(\"opened\");\n  }\n  function afterLeave() {\n    emit(\"closed\");\n    emit(UPDATE_MODEL_EVENT, false);\n    if (props.destroyOnClose) {\n      rendered.value = false;\n    }\n  }\n  function beforeLeave() {\n    emit(\"close\");\n  }\n  function open() {\n    closeTimer == null ? void 0 : closeTimer();\n    openTimer == null ? void 0 : openTimer();\n    if (props.openDelay && props.openDelay > 0) {\n      var _useTimeoutFn = useTimeoutFn(function () {\n        return doOpen();\n      }, props.openDelay);\n      openTimer = _useTimeoutFn.stop;\n    } else {\n      doOpen();\n    }\n  }\n  function close() {\n    openTimer == null ? void 0 : openTimer();\n    closeTimer == null ? void 0 : closeTimer();\n    if (props.closeDelay && props.closeDelay > 0) {\n      var _useTimeoutFn2 = useTimeoutFn(function () {\n        return doClose();\n      }, props.closeDelay);\n      closeTimer = _useTimeoutFn2.stop;\n    } else {\n      doClose();\n    }\n  }\n  function handleClose() {\n    function hide(shouldCancel) {\n      if (shouldCancel) return;\n      closed.value = true;\n      visible.value = false;\n    }\n    if (props.beforeClose) {\n      props.beforeClose(hide);\n    } else {\n      close();\n    }\n  }\n  function onModalClick() {\n    if (props.closeOnClickModal) {\n      handleClose();\n    }\n  }\n  function doOpen() {\n    if (!isClient) return;\n    visible.value = true;\n  }\n  function doClose() {\n    visible.value = false;\n  }\n  function onOpenAutoFocus() {\n    emit(\"openAutoFocus\");\n  }\n  function onCloseAutoFocus() {\n    emit(\"closeAutoFocus\");\n  }\n  function onFocusoutPrevented(event) {\n    var _a2;\n    if (((_a2 = event.detail) == null ? void 0 : _a2.focusReason) === \"pointer\") {\n      event.preventDefault();\n    }\n  }\n  if (props.lockScroll) {\n    useLockscreen(visible);\n  }\n  function onCloseRequested() {\n    if (props.closeOnPressEscape) {\n      handleClose();\n    }\n  }\n  watch(function () {\n    return props.modelValue;\n  }, function (val) {\n    if (val) {\n      closed.value = false;\n      open();\n      rendered.value = true;\n      zIndex.value = isUndefined(props.zIndex) ? nextZIndex() : zIndex.value++;\n      nextTick(function () {\n        emit(\"open\");\n        if (targetRef.value) {\n          targetRef.value.parentElement.scrollTop = 0;\n          targetRef.value.parentElement.scrollLeft = 0;\n          targetRef.value.scrollTop = 0;\n        }\n      });\n    } else {\n      if (visible.value) {\n        close();\n      }\n    }\n  });\n  watch(function () {\n    return props.fullscreen;\n  }, function (val) {\n    if (!targetRef.value) return;\n    if (val) {\n      lastPosition = targetRef.value.style.transform;\n      targetRef.value.style.transform = \"\";\n    } else {\n      targetRef.value.style.transform = lastPosition;\n    }\n  });\n  onMounted(function () {\n    if (props.modelValue) {\n      visible.value = true;\n      rendered.value = true;\n      open();\n    }\n  });\n  return {\n    afterEnter: afterEnter,\n    afterLeave: afterLeave,\n    beforeLeave: beforeLeave,\n    handleClose: handleClose,\n    onModalClick: onModalClick,\n    close: close,\n    doClose: doClose,\n    onOpenAutoFocus: onOpenAutoFocus,\n    onCloseAutoFocus: onCloseAutoFocus,\n    onCloseRequested: onCloseRequested,\n    onFocusoutPrevented: onFocusoutPrevented,\n    titleId: titleId,\n    bodyId: bodyId,\n    closed: closed,\n    style: style,\n    overlayDialogStyle: overlayDialogStyle,\n    rendered: rendered,\n    visible: visible,\n    zIndex: zIndex\n  };\n};\nexport { useDialog };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}