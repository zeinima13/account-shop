{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { onMounted, onBeforeUnmount } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport { EVENT_CODE } from '../../constants/aria.mjs';\nvar registeredEscapeHandlers = [];\nvar cachedHandler = function cachedHandler(event) {\n  if (event.code === EVENT_CODE.esc) {\n    registeredEscapeHandlers.forEach(function (registeredHandler) {\n      return registeredHandler(event);\n    });\n  }\n};\nvar useEscapeKeydown = function useEscapeKeydown(handler) {\n  onMounted(function () {\n    if (registeredEscapeHandlers.length === 0) {\n      document.addEventListener(\"keydown\", cachedHandler);\n    }\n    if (isClient) registeredEscapeHandlers.push(handler);\n  });\n  onBeforeUnmount(function () {\n    registeredEscapeHandlers = registeredEscapeHandlers.filter(function (registeredHandler) {\n      return registeredHandler !== handler;\n    });\n    if (registeredEscapeHandlers.length === 0) {\n      if (isClient) document.removeEventListener(\"keydown\", cachedHandler);\n    }\n  });\n};\nexport { useEscapeKeydown };","map":{"version":3,"names":["registeredEscapeHandlers","cachedHandler","event","code","EVENT_CODE","esc","forEach","registeredHandler","useEscapeKeydown","handler","onMounted","length","document","addEventListener","isClient","push","onBeforeUnmount","filter","removeEventListener"],"sources":["../../../../../packages/hooks/use-escape-keydown/index.ts"],"sourcesContent":["import { onBeforeUnmount, onMounted } from 'vue'\nimport { isClient } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\n\nlet registeredEscapeHandlers: ((e: KeyboardEvent) => void)[] = []\n\nconst cachedHandler = (event: KeyboardEvent) => {\n  if (event.code === EVENT_CODE.esc) {\n    registeredEscapeHandlers.forEach((registeredHandler) =>\n      registeredHandler(event)\n    )\n  }\n}\n\nexport const useEscapeKeydown = (handler: (e: KeyboardEvent) => void) => {\n  onMounted(() => {\n    if (registeredEscapeHandlers.length === 0) {\n      document.addEventListener('keydown', cachedHandler)\n    }\n    if (isClient) registeredEscapeHandlers.push(handler)\n  })\n\n  onBeforeUnmount(() => {\n    registeredEscapeHandlers = registeredEscapeHandlers.filter(\n      (registeredHandler) => registeredHandler !== handler\n    )\n    if (registeredEscapeHandlers.length === 0) {\n      if (isClient) document.removeEventListener('keydown', cachedHandler)\n    }\n  })\n}\n"],"mappings":";;;;;;;;;;;AAGA,IAAIA,wBAAwB,GAAG,EAAE;AACjC,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,KAAK,EAAK;EAC/B,IAAIA,KAAK,CAACC,IAAI,KAAKC,UAAU,CAACC,GAAG,EAAE;IACjCL,wBAAwB,CAACM,OAAO,CAAC,UAACC,iBAAiB;MAAA,OAAKA,iBAAiB,CAACL,KAAK,CAAC;IAAA,EAAC;EACrF;AACA,CAAC;AACW,IAACM,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,OAAO,EAAK;EAC3CC,SAAS,CAAC,YAAM;IACd,IAAIV,wBAAwB,CAACW,MAAM,KAAK,CAAC,EAAE;MACzCC,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEZ,aAAa,CAAC;IACzD;IACI,IAAIa,QAAQ,EACVd,wBAAwB,CAACe,IAAI,CAACN,OAAO,CAAC;EAC5C,CAAG,CAAC;EACFO,eAAe,CAAC,YAAM;IACpBhB,wBAAwB,GAAGA,wBAAwB,CAACiB,MAAM,CAAC,UAACV,iBAAiB;MAAA,OAAKA,iBAAiB,KAAKE,OAAO;IAAA,EAAC;IAChH,IAAIT,wBAAwB,CAACW,MAAM,KAAK,CAAC,EAAE;MACzC,IAAIG,QAAQ,EACVF,QAAQ,CAACM,mBAAmB,CAAC,SAAS,EAAEjB,aAAa,CAAC;IAC9D;EACA,CAAG,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}