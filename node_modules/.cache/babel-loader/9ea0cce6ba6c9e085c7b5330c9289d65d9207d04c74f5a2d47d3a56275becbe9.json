{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { ref, provide } from 'vue';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { isFunction } from '@vue/shared';\nimport { removeClass, addClass } from '../../../../utils/dom/style.mjs';\nvar dragEventsKey = Symbol(\"dragEvents\");\nfunction useDragNodeHandler(_ref) {\n  var props = _ref.props,\n    ctx = _ref.ctx,\n    el$ = _ref.el$,\n    dropIndicator$ = _ref.dropIndicator$,\n    store = _ref.store;\n  var ns = useNamespace(\"tree\");\n  var dragState = ref({\n    showDropIndicator: false,\n    draggingNode: null,\n    dropNode: null,\n    allowDrop: true,\n    dropType: null\n  });\n  var treeNodeDragStart = function treeNodeDragStart(_ref2) {\n    var event = _ref2.event,\n      treeNode = _ref2.treeNode;\n    if (isFunction(props.allowDrag) && !props.allowDrag(treeNode.node)) {\n      event.preventDefault();\n      return false;\n    }\n    event.dataTransfer.effectAllowed = \"move\";\n    try {\n      event.dataTransfer.setData(\"text/plain\", \"\");\n    } catch (e) {}\n    dragState.value.draggingNode = treeNode;\n    ctx.emit(\"node-drag-start\", treeNode.node, event);\n  };\n  var treeNodeDragOver = function treeNodeDragOver(_ref3) {\n    var event = _ref3.event,\n      treeNode = _ref3.treeNode;\n    var dropNode = treeNode;\n    var oldDropNode = dragState.value.dropNode;\n    if (oldDropNode && oldDropNode.node.id !== dropNode.node.id) {\n      removeClass(oldDropNode.$el, ns.is(\"drop-inner\"));\n    }\n    var draggingNode = dragState.value.draggingNode;\n    if (!draggingNode || !dropNode) return;\n    var dropPrev = true;\n    var dropInner = true;\n    var dropNext = true;\n    var userAllowDropInner = true;\n    if (isFunction(props.allowDrop)) {\n      dropPrev = props.allowDrop(draggingNode.node, dropNode.node, \"prev\");\n      userAllowDropInner = dropInner = props.allowDrop(draggingNode.node, dropNode.node, \"inner\");\n      dropNext = props.allowDrop(draggingNode.node, dropNode.node, \"next\");\n    }\n    event.dataTransfer.dropEffect = dropInner || dropPrev || dropNext ? \"move\" : \"none\";\n    if ((dropPrev || dropInner || dropNext) && (oldDropNode == null ? void 0 : oldDropNode.node.id) !== dropNode.node.id) {\n      if (oldDropNode) {\n        ctx.emit(\"node-drag-leave\", draggingNode.node, oldDropNode.node, event);\n      }\n      ctx.emit(\"node-drag-enter\", draggingNode.node, dropNode.node, event);\n    }\n    if (dropPrev || dropInner || dropNext) {\n      dragState.value.dropNode = dropNode;\n    } else {\n      dragState.value.dropNode = null;\n    }\n    if (dropNode.node.nextSibling === draggingNode.node) {\n      dropNext = false;\n    }\n    if (dropNode.node.previousSibling === draggingNode.node) {\n      dropPrev = false;\n    }\n    if (dropNode.node.contains(draggingNode.node, false)) {\n      dropInner = false;\n    }\n    if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {\n      dropPrev = false;\n      dropInner = false;\n      dropNext = false;\n    }\n    var targetPosition = dropNode.$el.querySelector(\".\".concat(ns.be(\"node\", \"content\"))).getBoundingClientRect();\n    var treePosition = el$.value.getBoundingClientRect();\n    var dropType;\n    var prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;\n    var nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;\n    var indicatorTop = -9999;\n    var distance = event.clientY - targetPosition.top;\n    if (distance < targetPosition.height * prevPercent) {\n      dropType = \"before\";\n    } else if (distance > targetPosition.height * nextPercent) {\n      dropType = \"after\";\n    } else if (dropInner) {\n      dropType = \"inner\";\n    } else {\n      dropType = \"none\";\n    }\n    var iconPosition = dropNode.$el.querySelector(\".\".concat(ns.be(\"node\", \"expand-icon\"))).getBoundingClientRect();\n    var dropIndicator = dropIndicator$.value;\n    if (dropType === \"before\") {\n      indicatorTop = iconPosition.top - treePosition.top;\n    } else if (dropType === \"after\") {\n      indicatorTop = iconPosition.bottom - treePosition.top;\n    }\n    dropIndicator.style.top = \"\".concat(indicatorTop, \"px\");\n    dropIndicator.style.left = \"\".concat(iconPosition.right - treePosition.left, \"px\");\n    if (dropType === \"inner\") {\n      addClass(dropNode.$el, ns.is(\"drop-inner\"));\n    } else {\n      removeClass(dropNode.$el, ns.is(\"drop-inner\"));\n    }\n    dragState.value.showDropIndicator = dropType === \"before\" || dropType === \"after\";\n    dragState.value.allowDrop = dragState.value.showDropIndicator || userAllowDropInner;\n    dragState.value.dropType = dropType;\n    ctx.emit(\"node-drag-over\", draggingNode.node, dropNode.node, event);\n  };\n  var treeNodeDragEnd = function treeNodeDragEnd(event) {\n    var _dragState$value = dragState.value,\n      draggingNode = _dragState$value.draggingNode,\n      dropType = _dragState$value.dropType,\n      dropNode = _dragState$value.dropNode;\n    event.preventDefault();\n    if (event.dataTransfer) {\n      event.dataTransfer.dropEffect = \"move\";\n    }\n    if (draggingNode && dropNode) {\n      var draggingNodeCopy = {\n        data: draggingNode.node.data\n      };\n      if (dropType !== \"none\") {\n        draggingNode.node.remove();\n      }\n      if (dropType === \"before\") {\n        dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);\n      } else if (dropType === \"after\") {\n        dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);\n      } else if (dropType === \"inner\") {\n        dropNode.node.insertChild(draggingNodeCopy);\n      }\n      if (dropType !== \"none\") {\n        store.value.registerNode(draggingNodeCopy);\n        if (store.value.key) {\n          draggingNode.node.eachNode(function (node) {\n            var _a;\n            (_a = store.value.nodesMap[node.data[store.value.key]]) == null ? void 0 : _a.setChecked(node.checked, !store.value.checkStrictly);\n          });\n        }\n      }\n      removeClass(dropNode.$el, ns.is(\"drop-inner\"));\n      ctx.emit(\"node-drag-end\", draggingNode.node, dropNode.node, dropType, event);\n      if (dropType !== \"none\") {\n        ctx.emit(\"node-drop\", draggingNode.node, dropNode.node, dropType, event);\n      }\n    }\n    if (draggingNode && !dropNode) {\n      ctx.emit(\"node-drag-end\", draggingNode.node, null, dropType, event);\n    }\n    dragState.value.showDropIndicator = false;\n    dragState.value.draggingNode = null;\n    dragState.value.dropNode = null;\n    dragState.value.allowDrop = true;\n  };\n  provide(dragEventsKey, {\n    treeNodeDragStart: treeNodeDragStart,\n    treeNodeDragOver: treeNodeDragOver,\n    treeNodeDragEnd: treeNodeDragEnd\n  });\n  return {\n    dragState: dragState\n  };\n}\nexport { dragEventsKey, useDragNodeHandler };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}