{"ast":null,"code":"import _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.parse-float.js\";\nimport { defineComponent, inject, ref, computed, unref, onMounted, nextTick, watch, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString, createCommentVNode, withDirectives, createVNode, createElementVNode } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport { ElScrollbar } from '../../../scrollbar/index.mjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue';\nimport { timeUnits } from '../constants.mjs';\nimport { buildTimeList } from '../utils.mjs';\nimport { basicTimeSpinnerProps } from '../props/basic-time-spinner.mjs';\nimport { getTimeLists } from '../composables/use-time-picker.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { vRepeatClick } from '../../../../directives/repeat-click/index.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { getStyle } from '../../../../utils/dom/style.mjs';\nimport { isNumber } from '../../../../utils/types.mjs';\nvar _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"basic-time-spinner\",\n  props: basicTimeSpinnerProps,\n  emits: [\"change\", \"select-range\", \"set-option\"],\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var pickerBase = inject(\"EP_PICKER_BASE\");\n    var isRange = pickerBase.props.isRange;\n    var ns = useNamespace(\"time\");\n    var _getTimeLists = getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds),\n      getHoursList = _getTimeLists.getHoursList,\n      getMinutesList = _getTimeLists.getMinutesList,\n      getSecondsList = _getTimeLists.getSecondsList;\n    var isScrolling = false;\n    var currentScrollbar = ref();\n    var listHoursRef = ref();\n    var listMinutesRef = ref();\n    var listSecondsRef = ref();\n    var listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef\n    };\n    var spinnerItems = computed(function () {\n      return props.showSeconds ? timeUnits : timeUnits.slice(0, 2);\n    });\n    var timePartials = computed(function () {\n      var spinnerDate = props.spinnerDate;\n      var hours = spinnerDate.hour();\n      var minutes = spinnerDate.minute();\n      var seconds = spinnerDate.second();\n      return {\n        hours: hours,\n        minutes: minutes,\n        seconds: seconds\n      };\n    });\n    var timeList = computed(function () {\n      var _unref = unref(timePartials),\n        hours = _unref.hours,\n        minutes = _unref.minutes;\n      var role = props.role,\n        spinnerDate = props.spinnerDate;\n      var compare = !isRange ? spinnerDate : void 0;\n      return {\n        hours: getHoursList(role, compare),\n        minutes: getMinutesList(hours, role, compare),\n        seconds: getSecondsList(hours, minutes, role, compare)\n      };\n    });\n    var arrowControlTimeList = computed(function () {\n      var _unref2 = unref(timePartials),\n        hours = _unref2.hours,\n        minutes = _unref2.minutes,\n        seconds = _unref2.seconds;\n      return {\n        hours: buildTimeList(hours, 23),\n        minutes: buildTimeList(minutes, 59),\n        seconds: buildTimeList(seconds, 59)\n      };\n    });\n    var debouncedResetScroll = debounce(function (type) {\n      isScrolling = false;\n      adjustCurrentSpinner(type);\n    }, 200);\n    var getAmPmFlag = function getAmPmFlag(hour) {\n      var shouldShowAmPm = !!props.amPmMode;\n      if (!shouldShowAmPm) return \"\";\n      var isCapital = props.amPmMode === \"A\";\n      var content = hour < 12 ? \" am\" : \" pm\";\n      if (isCapital) content = content.toUpperCase();\n      return content;\n    };\n    var emitSelectRange = function emitSelectRange(type) {\n      var range;\n      switch (type) {\n        case \"hours\":\n          range = [0, 2];\n          break;\n        case \"minutes\":\n          range = [3, 5];\n          break;\n        case \"seconds\":\n          range = [6, 8];\n          break;\n      }\n      var _range = range,\n        _range2 = _slicedToArray(_range, 2),\n        left = _range2[0],\n        right = _range2[1];\n      emit(\"select-range\", left, right);\n      currentScrollbar.value = type;\n    };\n    var adjustCurrentSpinner = function adjustCurrentSpinner(type) {\n      adjustSpinner(type, unref(timePartials)[type]);\n    };\n    var adjustSpinners = function adjustSpinners() {\n      adjustCurrentSpinner(\"hours\");\n      adjustCurrentSpinner(\"minutes\");\n      adjustCurrentSpinner(\"seconds\");\n    };\n    var getScrollbarElement = function getScrollbarElement(el) {\n      return el.querySelector(\".\".concat(ns.namespace.value, \"-scrollbar__wrap\"));\n    };\n    var adjustSpinner = function adjustSpinner(type, value) {\n      if (props.arrowControl) return;\n      var scrollbar = unref(listRefsMap[type]);\n      if (scrollbar && scrollbar.$el) {\n        getScrollbarElement(scrollbar.$el).scrollTop = Math.max(0, value * typeItemHeight(type));\n      }\n    };\n    var typeItemHeight = function typeItemHeight(type) {\n      var scrollbar = unref(listRefsMap[type]);\n      var listItem = scrollbar == null ? void 0 : scrollbar.$el.querySelector(\"li\");\n      if (listItem) {\n        return Number.parseFloat(getStyle(listItem, \"height\")) || 0;\n      }\n      return 0;\n    };\n    var onIncrement = function onIncrement() {\n      scrollDown(1);\n    };\n    var onDecrement = function onDecrement() {\n      scrollDown(-1);\n    };\n    var scrollDown = function scrollDown(step) {\n      if (!currentScrollbar.value) {\n        emitSelectRange(\"hours\");\n      }\n      var label = currentScrollbar.value;\n      var now = unref(timePartials)[label];\n      var total = currentScrollbar.value === \"hours\" ? 24 : 60;\n      var next = findNextUnDisabled(label, now, step, total);\n      modifyDateField(label, next);\n      adjustSpinner(label, next);\n      nextTick(function () {\n        return emitSelectRange(label);\n      });\n    };\n    var findNextUnDisabled = function findNextUnDisabled(type, now, step, total) {\n      var next = (now + step + total) % total;\n      var list = unref(timeList)[type];\n      while (list[next] && next !== now) {\n        next = (next + step + total) % total;\n      }\n      return next;\n    };\n    var modifyDateField = function modifyDateField(type, value) {\n      var list = unref(timeList)[type];\n      var isDisabled = list[value];\n      if (isDisabled) return;\n      var _unref3 = unref(timePartials),\n        hours = _unref3.hours,\n        minutes = _unref3.minutes,\n        seconds = _unref3.seconds;\n      var changeTo;\n      switch (type) {\n        case \"hours\":\n          changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds);\n          break;\n        case \"minutes\":\n          changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds);\n          break;\n        case \"seconds\":\n          changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value);\n          break;\n      }\n      emit(\"change\", changeTo);\n    };\n    var handleClick = function handleClick(type, _ref2) {\n      var value = _ref2.value,\n        disabled = _ref2.disabled;\n      if (!disabled) {\n        modifyDateField(type, value);\n        emitSelectRange(type);\n        adjustSpinner(type, value);\n      }\n    };\n    var handleScroll = function handleScroll(type) {\n      var scrollbar = unref(listRefsMap[type]);\n      if (!scrollbar) return;\n      isScrolling = true;\n      debouncedResetScroll(type);\n      var value = Math.min(Math.round((getScrollbarElement(scrollbar.$el).scrollTop - (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) + 3) / typeItemHeight(type)), type === \"hours\" ? 23 : 59);\n      modifyDateField(type, value);\n    };\n    var scrollBarHeight = function scrollBarHeight(type) {\n      return unref(listRefsMap[type]).$el.offsetHeight;\n    };\n    var bindScrollEvent = function bindScrollEvent() {\n      var bindFunction = function bindFunction(type) {\n        var scrollbar = unref(listRefsMap[type]);\n        if (scrollbar && scrollbar.$el) {\n          getScrollbarElement(scrollbar.$el).onscroll = function () {\n            handleScroll(type);\n          };\n        }\n      };\n      bindFunction(\"hours\");\n      bindFunction(\"minutes\");\n      bindFunction(\"seconds\");\n    };\n    onMounted(function () {\n      nextTick(function () {\n        !props.arrowControl && bindScrollEvent();\n        adjustSpinners();\n        if (props.role === \"start\") emitSelectRange(\"hours\");\n      });\n    });\n    var setRef = function setRef(scrollbar, type) {\n      listRefsMap[type].value = scrollbar != null ? scrollbar : void 0;\n    };\n    emit(\"set-option\", [\"\".concat(props.role, \"_scrollDown\"), scrollDown]);\n    emit(\"set-option\", [\"\".concat(props.role, \"_emitSelectRange\"), emitSelectRange]);\n    watch(function () {\n      return props.spinnerDate;\n    }, function () {\n      if (isScrolling) return;\n      adjustSpinners();\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass([unref(ns).b(\"spinner\"), {\n          \"has-seconds\": _ctx.showSeconds\n        }])\n      }, [!_ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n        key: 0\n      }, renderList(unref(spinnerItems), function (item) {\n        return openBlock(), createBlock(unref(ElScrollbar), {\n          key: item,\n          ref_for: true,\n          ref: function ref(scrollbar) {\n            return setRef(scrollbar, item);\n          },\n          \"class\": normalizeClass(unref(ns).be(\"spinner\", \"wrapper\")),\n          \"wrap-style\": \"max-height: inherit;\",\n          \"view-class\": unref(ns).be(\"spinner\", \"list\"),\n          noresize: \"\",\n          tag: \"ul\",\n          onMouseenter: function onMouseenter($event) {\n            return emitSelectRange(item);\n          },\n          onMousemove: function onMousemove($event) {\n            return adjustCurrentSpinner(item);\n          }\n        }, {\n          \"default\": withCtx(function () {\n            return [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(timeList)[item], function (disabled, key) {\n              return openBlock(), createElementBlock(\"li\", {\n                key: key,\n                \"class\": normalizeClass([unref(ns).be(\"spinner\", \"item\"), unref(ns).is(\"active\", key === unref(timePartials)[item]), unref(ns).is(\"disabled\", disabled)]),\n                onClick: function onClick($event) {\n                  return handleClick(item, {\n                    value: key,\n                    disabled: disabled\n                  });\n                }\n              }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n                key: 0\n              }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + toDisplayString(getAmPmFlag(key)), 1)], 64)) : (openBlock(), createElementBlock(Fragment, {\n                key: 1\n              }, [createTextVNode(toDisplayString((\"0\" + key).slice(-2)), 1)], 64))], 10, [\"onClick\"]);\n            }), 128))];\n          }),\n          _: 2\n        }, 1032, [\"class\", \"view-class\", \"onMouseenter\", \"onMousemove\"]);\n      }), 128)) : createCommentVNode(\"v-if\", true), _ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n        key: 1\n      }, renderList(unref(spinnerItems), function (item) {\n        return openBlock(), createElementBlock(\"div\", {\n          key: item,\n          \"class\": normalizeClass([unref(ns).be(\"spinner\", \"wrapper\"), unref(ns).is(\"arrow\")]),\n          onMouseenter: function onMouseenter($event) {\n            return emitSelectRange(item);\n          }\n        }, [withDirectives((openBlock(), createBlock(unref(ElIcon), {\n          \"class\": normalizeClass([\"arrow-up\", unref(ns).be(\"spinner\", \"arrow\")])\n        }, {\n          \"default\": withCtx(function () {\n            return [createVNode(unref(ArrowUp))];\n          }),\n          _: 1\n        }, 8, [\"class\"])), [[unref(vRepeatClick), onDecrement]]), withDirectives((openBlock(), createBlock(unref(ElIcon), {\n          \"class\": normalizeClass([\"arrow-down\", unref(ns).be(\"spinner\", \"arrow\")])\n        }, {\n          \"default\": withCtx(function () {\n            return [createVNode(unref(ArrowDown))];\n          }),\n          _: 1\n        }, 8, [\"class\"])), [[unref(vRepeatClick), onIncrement]]), createElementVNode(\"ul\", {\n          \"class\": normalizeClass(unref(ns).be(\"spinner\", \"list\"))\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(arrowControlTimeList)[item], function (time, key) {\n          return openBlock(), createElementBlock(\"li\", {\n            key: key,\n            \"class\": normalizeClass([unref(ns).be(\"spinner\", \"item\"), unref(ns).is(\"active\", time === unref(timePartials)[item]), unref(ns).is(\"disabled\", unref(timeList)[item][time])])\n          }, [unref(isNumber)(time) ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + toDisplayString(getAmPmFlag(time)), 1)], 64)) : (openBlock(), createElementBlock(Fragment, {\n            key: 1\n          }, [createTextVNode(toDisplayString((\"0\" + time).slice(-2)), 1)], 64))], 64)) : createCommentVNode(\"v-if\", true)], 2);\n        }), 128))], 2)], 42, [\"onMouseenter\"]);\n      }), 128)) : createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n});\nvar TimeSpinner = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"basic-time-spinner.vue\"]]);\nexport { TimeSpinner as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}