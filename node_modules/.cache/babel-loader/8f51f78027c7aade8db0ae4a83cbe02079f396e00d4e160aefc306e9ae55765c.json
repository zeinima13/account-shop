{"ast":null,"code":"import _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { defineComponent, inject, computed, ref, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, toDisplayString, createVNode, createCommentVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport { union } from 'lodash-unified';\nimport { panelTimeRangeProps } from '../props/panel-time-range.mjs';\nimport { useTimePanel } from '../composables/use-time-panel.mjs';\nimport { useOldValue, buildAvailableTimeSlotGetter } from '../composables/use-time-picker.mjs';\nimport TimeSpinner from './basic-time-spinner.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { isArray } from '@vue/shared';\nimport { EVENT_CODE } from '../../../../constants/aria.mjs';\nvar _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"panel-time-range\",\n  props: panelTimeRangeProps,\n  emits: [\"pick\", \"select-range\", \"set-picker-option\"],\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var makeSelectRange = function makeSelectRange(start, end) {\n      var result = [];\n      for (var i = start; i <= end; i++) {\n        result.push(i);\n      }\n      return result;\n    };\n    var _useLocale = useLocale(),\n      t = _useLocale.t,\n      lang = _useLocale.lang;\n    var nsTime = useNamespace(\"time\");\n    var nsPicker = useNamespace(\"picker\");\n    var pickerBase = inject(\"EP_PICKER_BASE\");\n    var _pickerBase$props = pickerBase.props,\n      arrowControl = _pickerBase$props.arrowControl,\n      disabledHours = _pickerBase$props.disabledHours,\n      disabledMinutes = _pickerBase$props.disabledMinutes,\n      disabledSeconds = _pickerBase$props.disabledSeconds,\n      defaultValue = _pickerBase$props.defaultValue;\n    var startContainerKls = computed(function () {\n      return [nsTime.be(\"range-picker\", \"body\"), nsTime.be(\"panel\", \"content\"), nsTime.is(\"arrow\", arrowControl), showSeconds.value ? \"has-seconds\" : \"\"];\n    });\n    var endContainerKls = computed(function () {\n      return [nsTime.be(\"range-picker\", \"body\"), nsTime.be(\"panel\", \"content\"), nsTime.is(\"arrow\", arrowControl), showSeconds.value ? \"has-seconds\" : \"\"];\n    });\n    var startTime = computed(function () {\n      return props.parsedValue[0];\n    });\n    var endTime = computed(function () {\n      return props.parsedValue[1];\n    });\n    var oldValue = useOldValue(props);\n    var handleCancel = function handleCancel() {\n      emit(\"pick\", oldValue.value, false);\n    };\n    var showSeconds = computed(function () {\n      return props.format.includes(\"ss\");\n    });\n    var amPmMode = computed(function () {\n      if (props.format.includes(\"A\")) return \"A\";\n      if (props.format.includes(\"a\")) return \"a\";\n      return \"\";\n    });\n    var handleConfirm = function handleConfirm() {\n      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      emit(\"pick\", [startTime.value, endTime.value], visible);\n    };\n    var handleMinChange = function handleMinChange(date) {\n      handleChange(date.millisecond(0), endTime.value);\n    };\n    var handleMaxChange = function handleMaxChange(date) {\n      handleChange(startTime.value, date.millisecond(0));\n    };\n    var isValidValue = function isValidValue(_date) {\n      var parsedDate = _date.map(function (_) {\n        return dayjs(_).locale(lang.value);\n      });\n      var result = getRangeAvailableTime(parsedDate);\n      return parsedDate[0].isSame(result[0]) && parsedDate[1].isSame(result[1]);\n    };\n    var handleChange = function handleChange(start, end) {\n      if (!props.visible) {\n        return;\n      }\n      emit(\"pick\", [start, end], true);\n    };\n    var btnConfirmDisabled = computed(function () {\n      return startTime.value > endTime.value;\n    });\n    var selectionRange = ref([0, 2]);\n    var setMinSelectionRange = function setMinSelectionRange(start, end) {\n      emit(\"select-range\", start, end, \"min\");\n      selectionRange.value = [start, end];\n    };\n    var offset = computed(function () {\n      return showSeconds.value ? 11 : 8;\n    });\n    var setMaxSelectionRange = function setMaxSelectionRange(start, end) {\n      emit(\"select-range\", start, end, \"max\");\n      var _offset = unref(offset);\n      selectionRange.value = [start + _offset, end + _offset];\n    };\n    var changeSelectionRange = function changeSelectionRange(step) {\n      var list = showSeconds.value ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11];\n      var mapping = [\"hours\", \"minutes\"].concat(showSeconds.value ? [\"seconds\"] : []);\n      var index = list.indexOf(selectionRange.value[0]);\n      var next = (index + step + list.length) % list.length;\n      var half = list.length / 2;\n      if (next < half) {\n        timePickerOptions[\"start_emitSelectRange\"](mapping[next]);\n      } else {\n        timePickerOptions[\"end_emitSelectRange\"](mapping[next - half]);\n      }\n    };\n    var handleKeydown = function handleKeydown(event) {\n      var code = event.code;\n      var left = EVENT_CODE.left,\n        right = EVENT_CODE.right,\n        up = EVENT_CODE.up,\n        down = EVENT_CODE.down;\n      if ([left, right].includes(code)) {\n        var step = code === left ? -1 : 1;\n        changeSelectionRange(step);\n        event.preventDefault();\n        return;\n      }\n      if ([up, down].includes(code)) {\n        var _step = code === up ? -1 : 1;\n        var role = selectionRange.value[0] < offset.value ? \"start\" : \"end\";\n        timePickerOptions[\"\".concat(role, \"_scrollDown\")](_step);\n        event.preventDefault();\n        return;\n      }\n    };\n    var disabledHours_ = function disabledHours_(role, compare) {\n      var defaultDisable = disabledHours ? disabledHours(role) : [];\n      var isStart = role === \"start\";\n      var compareDate = compare || (isStart ? endTime.value : startTime.value);\n      var compareHour = compareDate.hour();\n      var nextDisable = isStart ? makeSelectRange(compareHour + 1, 23) : makeSelectRange(0, compareHour - 1);\n      return union(defaultDisable, nextDisable);\n    };\n    var disabledMinutes_ = function disabledMinutes_(hour, role, compare) {\n      var defaultDisable = disabledMinutes ? disabledMinutes(hour, role) : [];\n      var isStart = role === \"start\";\n      var compareDate = compare || (isStart ? endTime.value : startTime.value);\n      var compareHour = compareDate.hour();\n      if (hour !== compareHour) {\n        return defaultDisable;\n      }\n      var compareMinute = compareDate.minute();\n      var nextDisable = isStart ? makeSelectRange(compareMinute + 1, 59) : makeSelectRange(0, compareMinute - 1);\n      return union(defaultDisable, nextDisable);\n    };\n    var disabledSeconds_ = function disabledSeconds_(hour, minute, role, compare) {\n      var defaultDisable = disabledSeconds ? disabledSeconds(hour, minute, role) : [];\n      var isStart = role === \"start\";\n      var compareDate = compare || (isStart ? endTime.value : startTime.value);\n      var compareHour = compareDate.hour();\n      var compareMinute = compareDate.minute();\n      if (hour !== compareHour || minute !== compareMinute) {\n        return defaultDisable;\n      }\n      var compareSecond = compareDate.second();\n      var nextDisable = isStart ? makeSelectRange(compareSecond + 1, 59) : makeSelectRange(0, compareSecond - 1);\n      return union(defaultDisable, nextDisable);\n    };\n    var getRangeAvailableTime = function getRangeAvailableTime(_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        start = _ref3[0],\n        end = _ref3[1];\n      return [getAvailableTime(start, \"start\", true, end), getAvailableTime(end, \"end\", false, start)];\n    };\n    var _buildAvailableTimeSl = buildAvailableTimeSlotGetter(disabledHours_, disabledMinutes_, disabledSeconds_),\n      getAvailableHours = _buildAvailableTimeSl.getAvailableHours,\n      getAvailableMinutes = _buildAvailableTimeSl.getAvailableMinutes,\n      getAvailableSeconds = _buildAvailableTimeSl.getAvailableSeconds;\n    var _useTimePanel = useTimePanel({\n        getAvailableHours: getAvailableHours,\n        getAvailableMinutes: getAvailableMinutes,\n        getAvailableSeconds: getAvailableSeconds\n      }),\n      timePickerOptions = _useTimePanel.timePickerOptions,\n      getAvailableTime = _useTimePanel.getAvailableTime,\n      onSetOption = _useTimePanel.onSetOption;\n    var parseUserInput = function parseUserInput(days) {\n      if (!days) return null;\n      if (isArray(days)) {\n        return days.map(function (d) {\n          return dayjs(d, props.format).locale(lang.value);\n        });\n      }\n      return dayjs(days, props.format).locale(lang.value);\n    };\n    var formatToString = function formatToString(days) {\n      if (!days) return null;\n      if (isArray(days)) {\n        return days.map(function (d) {\n          return d.format(props.format);\n        });\n      }\n      return days.format(props.format);\n    };\n    var getDefaultValue = function getDefaultValue() {\n      if (isArray(defaultValue)) {\n        return defaultValue.map(function (d) {\n          return dayjs(d).locale(lang.value);\n        });\n      }\n      var defaultDay = dayjs(defaultValue).locale(lang.value);\n      return [defaultDay, defaultDay.add(60, \"m\")];\n    };\n    emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    emit(\"set-picker-option\", [\"parseUserInput\", parseUserInput]);\n    emit(\"set-picker-option\", [\"isValidValue\", isValidValue]);\n    emit(\"set-picker-option\", [\"handleKeydownInput\", handleKeydown]);\n    emit(\"set-picker-option\", [\"getDefaultValue\", getDefaultValue]);\n    emit(\"set-picker-option\", [\"getRangeAvailableTime\", getRangeAvailableTime]);\n    return function (_ctx, _cache) {\n      return _ctx.actualVisible ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"class\": normalizeClass([unref(nsTime).b(\"range-picker\"), unref(nsPicker).b(\"panel\")])\n      }, [createElementVNode(\"div\", {\n        \"class\": normalizeClass(unref(nsTime).be(\"range-picker\", \"content\"))\n      }, [createElementVNode(\"div\", {\n        \"class\": normalizeClass(unref(nsTime).be(\"range-picker\", \"cell\"))\n      }, [createElementVNode(\"div\", {\n        \"class\": normalizeClass(unref(nsTime).be(\"range-picker\", \"header\"))\n      }, toDisplayString(unref(t)(\"el.datepicker.startTime\")), 3), createElementVNode(\"div\", {\n        \"class\": normalizeClass(unref(startContainerKls))\n      }, [createVNode(TimeSpinner, {\n        ref: \"minSpinner\",\n        role: \"start\",\n        \"show-seconds\": unref(showSeconds),\n        \"am-pm-mode\": unref(amPmMode),\n        \"arrow-control\": unref(arrowControl),\n        \"spinner-date\": unref(startTime),\n        \"disabled-hours\": disabledHours_,\n        \"disabled-minutes\": disabledMinutes_,\n        \"disabled-seconds\": disabledSeconds_,\n        onChange: handleMinChange,\n        onSetOption: unref(onSetOption),\n        onSelectRange: setMinSelectionRange\n      }, null, 8, [\"show-seconds\", \"am-pm-mode\", \"arrow-control\", \"spinner-date\", \"onSetOption\"])], 2)], 2), createElementVNode(\"div\", {\n        \"class\": normalizeClass(unref(nsTime).be(\"range-picker\", \"cell\"))\n      }, [createElementVNode(\"div\", {\n        \"class\": normalizeClass(unref(nsTime).be(\"range-picker\", \"header\"))\n      }, toDisplayString(unref(t)(\"el.datepicker.endTime\")), 3), createElementVNode(\"div\", {\n        \"class\": normalizeClass(unref(endContainerKls))\n      }, [createVNode(TimeSpinner, {\n        ref: \"maxSpinner\",\n        role: \"end\",\n        \"show-seconds\": unref(showSeconds),\n        \"am-pm-mode\": unref(amPmMode),\n        \"arrow-control\": unref(arrowControl),\n        \"spinner-date\": unref(endTime),\n        \"disabled-hours\": disabledHours_,\n        \"disabled-minutes\": disabledMinutes_,\n        \"disabled-seconds\": disabledSeconds_,\n        onChange: handleMaxChange,\n        onSetOption: unref(onSetOption),\n        onSelectRange: setMaxSelectionRange\n      }, null, 8, [\"show-seconds\", \"am-pm-mode\", \"arrow-control\", \"spinner-date\", \"onSetOption\"])], 2)], 2)], 2), createElementVNode(\"div\", {\n        \"class\": normalizeClass(unref(nsTime).be(\"panel\", \"footer\"))\n      }, [createElementVNode(\"button\", {\n        type: \"button\",\n        \"class\": normalizeClass([unref(nsTime).be(\"panel\", \"btn\"), \"cancel\"]),\n        onClick: function onClick($event) {\n          return handleCancel();\n        }\n      }, toDisplayString(unref(t)(\"el.datepicker.cancel\")), 11, [\"onClick\"]), createElementVNode(\"button\", {\n        type: \"button\",\n        \"class\": normalizeClass([unref(nsTime).be(\"panel\", \"btn\"), \"confirm\"]),\n        disabled: unref(btnConfirmDisabled),\n        onClick: function onClick($event) {\n          return handleConfirm();\n        }\n      }, toDisplayString(unref(t)(\"el.datepicker.confirm\")), 11, [\"disabled\", \"onClick\"])], 2)], 2)) : createCommentVNode(\"v-if\", true);\n    };\n  }\n});\nvar TimeRangePanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"panel-time-range.vue\"]]);\nexport { TimeRangePanel as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}