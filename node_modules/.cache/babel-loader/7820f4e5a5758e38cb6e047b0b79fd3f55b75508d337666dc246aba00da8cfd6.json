{"ast":null,"code":"import _defineProperty from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { defineComponent, useAttrs as useAttrs$1, ref, computed, onBeforeUnmount, onMounted, openBlock, createBlock, unref, withCtx, createElementVNode, normalizeClass, normalizeStyle, createVNode, createElementBlock, renderSlot, Fragment, renderList, createTextVNode, toDisplayString, mergeProps, withKeys, withModifiers, createSlots } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport { onClickOutside } from '@vueuse/core';\nimport { Loading } from '@element-plus/icons-vue';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { autocompleteProps, autocompleteEmits } from './autocomplete.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useAttrs } from '../../../hooks/use-attrs/index.mjs';\nimport { useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { isArray } from '@vue/shared';\nimport { INPUT_EVENT, UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nvar COMPONENT_NAME = \"ElAutocomplete\";\nvar __default__ = defineComponent({\n  name: COMPONENT_NAME,\n  inheritAttrs: false\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: autocompleteProps,\n  emits: autocompleteEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var attrs = useAttrs();\n    var rawAttrs = useAttrs$1();\n    var disabled = useFormDisabled();\n    var ns = useNamespace(\"autocomplete\");\n    var inputRef = ref();\n    var regionRef = ref();\n    var popperRef = ref();\n    var listboxRef = ref();\n    var readonly = false;\n    var ignoreFocusEvent = false;\n    var suggestions = ref([]);\n    var highlightedIndex = ref(-1);\n    var dropdownWidth = ref(\"\");\n    var activated = ref(false);\n    var suggestionDisabled = ref(false);\n    var loading = ref(false);\n    var listboxId = useId();\n    var styles = computed(function () {\n      return rawAttrs.style;\n    });\n    var suggestionVisible = computed(function () {\n      var isValidData = suggestions.value.length > 0;\n      return (isValidData || loading.value) && activated.value;\n    });\n    var suggestionLoading = computed(function () {\n      return !props.hideLoading && loading.value;\n    });\n    var refInput = computed(function () {\n      if (inputRef.value) {\n        return Array.from(inputRef.value.$el.querySelectorAll(\"input\"));\n      }\n      return [];\n    });\n    var onSuggestionShow = function onSuggestionShow() {\n      if (suggestionVisible.value) {\n        dropdownWidth.value = \"\".concat(inputRef.value.$el.offsetWidth, \"px\");\n      }\n    };\n    var onHide = function onHide() {\n      highlightedIndex.value = -1;\n    };\n    var getData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(queryString) {\n        var cb, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!suggestionDisabled.value) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              cb = function cb(suggestionList) {\n                loading.value = false;\n                if (suggestionDisabled.value) return;\n                if (isArray(suggestionList)) {\n                  suggestions.value = suggestionList;\n                  highlightedIndex.value = props.highlightFirstItem ? 0 : -1;\n                } else {\n                  throwError(COMPONENT_NAME, \"autocomplete suggestions must be an array\");\n                }\n              };\n              loading.value = true;\n              if (!isArray(props.fetchSuggestions)) {\n                _context.next = 8;\n                break;\n              }\n              cb(props.fetchSuggestions);\n              _context.next = 12;\n              break;\n            case 8:\n              _context.next = 10;\n              return props.fetchSuggestions(queryString, cb);\n            case 10:\n              result = _context.sent;\n              if (isArray(result)) cb(result);\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function getData(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var debouncedGetData = debounce(getData, props.debounce);\n    var handleInput = function handleInput(value) {\n      var valuePresented = !!value;\n      emit(INPUT_EVENT, value);\n      emit(UPDATE_MODEL_EVENT, value);\n      suggestionDisabled.value = false;\n      activated.value || (activated.value = valuePresented);\n      if (!props.triggerOnFocus && !value) {\n        suggestionDisabled.value = true;\n        suggestions.value = [];\n        return;\n      }\n      debouncedGetData(value);\n    };\n    var handleMouseDown = function handleMouseDown(event) {\n      var _a;\n      if (disabled.value) return;\n      if (((_a = event.target) == null ? void 0 : _a.tagName) !== \"INPUT\" || refInput.value.includes(document.activeElement)) {\n        activated.value = true;\n      }\n    };\n    var handleChange = function handleChange(value) {\n      emit(CHANGE_EVENT, value);\n    };\n    var handleFocus = function handleFocus(evt) {\n      if (!ignoreFocusEvent) {\n        activated.value = true;\n        emit(\"focus\", evt);\n        if (props.triggerOnFocus && !readonly) {\n          debouncedGetData(String(props.modelValue));\n        }\n      } else {\n        ignoreFocusEvent = false;\n      }\n    };\n    var handleBlur = function handleBlur(evt) {\n      setTimeout(function () {\n        var _a;\n        if ((_a = popperRef.value) == null ? void 0 : _a.isFocusInsideContent()) {\n          ignoreFocusEvent = true;\n          return;\n        }\n        activated.value && close();\n        emit(\"blur\", evt);\n      });\n    };\n    var handleClear = function handleClear() {\n      activated.value = false;\n      emit(UPDATE_MODEL_EVENT, \"\");\n      emit(\"clear\");\n    };\n    var handleKeyEnter = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (suggestionVisible.value && highlightedIndex.value >= 0 && highlightedIndex.value < suggestions.value.length) {\n                handleSelect(suggestions.value[highlightedIndex.value]);\n              } else if (props.selectWhenUnmatched) {\n                emit(\"select\", {\n                  value: props.modelValue\n                });\n                suggestions.value = [];\n                highlightedIndex.value = -1;\n              }\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return function handleKeyEnter() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    var handleKeyEscape = function handleKeyEscape(evt) {\n      if (suggestionVisible.value) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        close();\n      }\n    };\n    var close = function close() {\n      activated.value = false;\n    };\n    var focus = function focus() {\n      var _a;\n      (_a = inputRef.value) == null ? void 0 : _a.focus();\n    };\n    var blur = function blur() {\n      var _a;\n      (_a = inputRef.value) == null ? void 0 : _a.blur();\n    };\n    var handleSelect = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(item) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              emit(INPUT_EVENT, item[props.valueKey]);\n              emit(UPDATE_MODEL_EVENT, item[props.valueKey]);\n              emit(\"select\", item);\n              suggestions.value = [];\n              highlightedIndex.value = -1;\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      return function handleSelect(_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    var highlight = function highlight(index) {\n      if (!suggestionVisible.value || loading.value) return;\n      if (index < 0) {\n        highlightedIndex.value = -1;\n        return;\n      }\n      if (index >= suggestions.value.length) {\n        index = suggestions.value.length - 1;\n      }\n      var suggestion = regionRef.value.querySelector(\".\".concat(ns.be(\"suggestion\", \"wrap\")));\n      var suggestionList = suggestion.querySelectorAll(\".\".concat(ns.be(\"suggestion\", \"list\"), \" li\"));\n      var highlightItem = suggestionList[index];\n      var scrollTop = suggestion.scrollTop;\n      var offsetTop = highlightItem.offsetTop,\n        scrollHeight = highlightItem.scrollHeight;\n      if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {\n        suggestion.scrollTop += scrollHeight;\n      }\n      if (offsetTop < scrollTop) {\n        suggestion.scrollTop -= scrollHeight;\n      }\n      highlightedIndex.value = index;\n      inputRef.value.ref.setAttribute(\"aria-activedescendant\", \"\".concat(listboxId.value, \"-item-\").concat(highlightedIndex.value));\n    };\n    var stopHandle = onClickOutside(listboxRef, function () {\n      suggestionVisible.value && close();\n    });\n    onBeforeUnmount(function () {\n      stopHandle == null ? void 0 : stopHandle();\n    });\n    onMounted(function () {\n      inputRef.value.ref.setAttribute(\"role\", \"textbox\");\n      inputRef.value.ref.setAttribute(\"aria-autocomplete\", \"list\");\n      inputRef.value.ref.setAttribute(\"aria-controls\", \"id\");\n      inputRef.value.ref.setAttribute(\"aria-activedescendant\", \"\".concat(listboxId.value, \"-item-\").concat(highlightedIndex.value));\n      readonly = inputRef.value.ref.hasAttribute(\"readonly\");\n    });\n    expose({\n      highlightedIndex: highlightedIndex,\n      activated: activated,\n      loading: loading,\n      inputRef: inputRef,\n      popperRef: popperRef,\n      suggestions: suggestions,\n      handleSelect: handleSelect,\n      handleKeyEnter: handleKeyEnter,\n      focus: focus,\n      blur: blur,\n      close: close,\n      highlight: highlight,\n      getData: getData\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"popperRef\",\n        ref: popperRef,\n        visible: unref(suggestionVisible),\n        placement: _ctx.placement,\n        \"fallback-placements\": [\"bottom-start\", \"top-start\"],\n        \"popper-class\": [unref(ns).e(\"popper\"), _ctx.popperClass],\n        teleported: _ctx.teleported,\n        \"gpu-acceleration\": false,\n        pure: \"\",\n        \"manual-mode\": \"\",\n        effect: \"light\",\n        trigger: \"click\",\n        transition: \"\".concat(unref(ns).namespace.value, \"-zoom-in-top\"),\n        persistent: \"\",\n        role: \"listbox\",\n        onBeforeShow: onSuggestionShow,\n        onHide: onHide\n      }, {\n        content: withCtx(function () {\n          return [createElementVNode(\"div\", {\n            ref_key: \"regionRef\",\n            ref: regionRef,\n            \"class\": normalizeClass([unref(ns).b(\"suggestion\"), unref(ns).is(\"loading\", unref(suggestionLoading))]),\n            style: normalizeStyle(_defineProperty(_defineProperty({}, _ctx.fitInputWidth ? \"width\" : \"minWidth\", dropdownWidth.value), \"outline\", \"none\")),\n            role: \"region\"\n          }, [createVNode(unref(ElScrollbar), {\n            id: unref(listboxId),\n            tag: \"ul\",\n            \"wrap-class\": unref(ns).be(\"suggestion\", \"wrap\"),\n            \"view-class\": unref(ns).be(\"suggestion\", \"list\"),\n            role: \"listbox\"\n          }, {\n            \"default\": withCtx(function () {\n              return [unref(suggestionLoading) ? (openBlock(), createElementBlock(\"li\", {\n                key: 0\n              }, [renderSlot(_ctx.$slots, \"loading\", {}, function () {\n                return [createVNode(unref(ElIcon), {\n                  \"class\": normalizeClass(unref(ns).is(\"loading\"))\n                }, {\n                  \"default\": withCtx(function () {\n                    return [createVNode(unref(Loading))];\n                  }),\n                  _: 1\n                }, 8, [\"class\"])];\n              })])) : (openBlock(true), createElementBlock(Fragment, {\n                key: 1\n              }, renderList(suggestions.value, function (item, index) {\n                return openBlock(), createElementBlock(\"li\", {\n                  id: \"\".concat(unref(listboxId), \"-item-\").concat(index),\n                  key: index,\n                  \"class\": normalizeClass({\n                    highlighted: highlightedIndex.value === index\n                  }),\n                  role: \"option\",\n                  \"aria-selected\": highlightedIndex.value === index,\n                  onClick: function onClick($event) {\n                    return handleSelect(item);\n                  }\n                }, [renderSlot(_ctx.$slots, \"default\", {\n                  item: item\n                }, function () {\n                  return [createTextVNode(toDisplayString(item[_ctx.valueKey]), 1)];\n                })], 10, [\"id\", \"aria-selected\", \"onClick\"]);\n              }), 128))];\n            }),\n            _: 3\n          }, 8, [\"id\", \"wrap-class\", \"view-class\"])], 6)];\n        }),\n        \"default\": withCtx(function () {\n          return [createElementVNode(\"div\", {\n            ref_key: \"listboxRef\",\n            ref: listboxRef,\n            \"class\": normalizeClass([unref(ns).b(), _ctx.$attrs[\"class\"]]),\n            style: normalizeStyle(unref(styles)),\n            role: \"combobox\",\n            \"aria-haspopup\": \"listbox\",\n            \"aria-expanded\": unref(suggestionVisible),\n            \"aria-owns\": unref(listboxId)\n          }, [createVNode(unref(ElInput), mergeProps({\n            ref_key: \"inputRef\",\n            ref: inputRef\n          }, unref(attrs), {\n            clearable: _ctx.clearable,\n            disabled: unref(disabled),\n            name: _ctx.name,\n            \"model-value\": _ctx.modelValue,\n            \"aria-label\": _ctx.ariaLabel,\n            onInput: handleInput,\n            onChange: handleChange,\n            onFocus: handleFocus,\n            onBlur: handleBlur,\n            onClear: handleClear,\n            onKeydown: [withKeys(withModifiers(function ($event) {\n              return highlight(highlightedIndex.value - 1);\n            }, [\"prevent\"]), [\"up\"]), withKeys(withModifiers(function ($event) {\n              return highlight(highlightedIndex.value + 1);\n            }, [\"prevent\"]), [\"down\"]), withKeys(handleKeyEnter, [\"enter\"]), withKeys(close, [\"tab\"]), withKeys(handleKeyEscape, [\"esc\"])],\n            onMousedown: handleMouseDown\n          }), createSlots({\n            _: 2\n          }, [_ctx.$slots.prepend ? {\n            name: \"prepend\",\n            fn: withCtx(function () {\n              return [renderSlot(_ctx.$slots, \"prepend\")];\n            })\n          } : void 0, _ctx.$slots.append ? {\n            name: \"append\",\n            fn: withCtx(function () {\n              return [renderSlot(_ctx.$slots, \"append\")];\n            })\n          } : void 0, _ctx.$slots.prefix ? {\n            name: \"prefix\",\n            fn: withCtx(function () {\n              return [renderSlot(_ctx.$slots, \"prefix\")];\n            })\n          } : void 0, _ctx.$slots.suffix ? {\n            name: \"suffix\",\n            fn: withCtx(function () {\n              return [renderSlot(_ctx.$slots, \"suffix\")];\n            })\n          } : void 0]), 1040, [\"clearable\", \"disabled\", \"name\", \"model-value\", \"aria-label\", \"onKeydown\"])], 14, [\"aria-expanded\", \"aria-owns\"])];\n        }),\n        _: 3\n      }, 8, [\"visible\", \"placement\", \"popper-class\", \"teleported\", \"transition\"]);\n    };\n  }\n}));\nvar Autocomplete = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"autocomplete.vue\"]]);\nexport { Autocomplete as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}