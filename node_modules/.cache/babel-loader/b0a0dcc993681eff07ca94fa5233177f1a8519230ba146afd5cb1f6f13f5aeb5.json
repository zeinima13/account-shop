{"ast":null,"code":"import _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { ref, computed } from 'vue';\nimport dayjs from 'dayjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { INPUT_EVENT, UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { isArray, isDate } from '@vue/shared';\nimport { debugWarn } from '../../../utils/error.mjs';\nvar adjacentMonth = function adjacentMonth(start, end) {\n  var firstMonthLastDay = start.endOf(\"month\");\n  var lastMonthFirstDay = end.startOf(\"month\");\n  var isSameWeek = firstMonthLastDay.isSame(lastMonthFirstDay, \"week\");\n  var lastMonthStartDay = isSameWeek ? lastMonthFirstDay.add(1, \"week\") : lastMonthFirstDay;\n  return [[start, firstMonthLastDay], [lastMonthStartDay.startOf(\"week\"), end]];\n};\nvar threeConsecutiveMonth = function threeConsecutiveMonth(start, end) {\n  var firstMonthLastDay = start.endOf(\"month\");\n  var secondMonthFirstDay = start.add(1, \"month\").startOf(\"month\");\n  var secondMonthStartDay = firstMonthLastDay.isSame(secondMonthFirstDay, \"week\") ? secondMonthFirstDay.add(1, \"week\") : secondMonthFirstDay;\n  var secondMonthLastDay = secondMonthStartDay.endOf(\"month\");\n  var lastMonthFirstDay = end.startOf(\"month\");\n  var lastMonthStartDay = secondMonthLastDay.isSame(lastMonthFirstDay, \"week\") ? lastMonthFirstDay.add(1, \"week\") : lastMonthFirstDay;\n  return [[start, firstMonthLastDay], [secondMonthStartDay.startOf(\"week\"), secondMonthLastDay], [lastMonthStartDay.startOf(\"week\"), end]];\n};\nvar useCalendar = function useCalendar(props, emit, componentName) {\n  var _useLocale = useLocale(),\n    lang = _useLocale.lang;\n  var selectedDay = ref();\n  var now = dayjs().locale(lang.value);\n  var realSelectedDay = computed({\n    get: function get() {\n      if (!props.modelValue) return selectedDay.value;\n      return date.value;\n    },\n    set: function set(val) {\n      if (!val) return;\n      selectedDay.value = val;\n      var result = val.toDate();\n      emit(INPUT_EVENT, result);\n      emit(UPDATE_MODEL_EVENT, result);\n    }\n  });\n  var validatedRange = computed(function () {\n    if (!props.range || !isArray(props.range) || props.range.length !== 2 || props.range.some(function (item) {\n      return !isDate(item);\n    })) return [];\n    var rangeArrDayjs = props.range.map(function (_) {\n      return dayjs(_).locale(lang.value);\n    });\n    var _rangeArrDayjs = _slicedToArray(rangeArrDayjs, 2),\n      startDayjs = _rangeArrDayjs[0],\n      endDayjs = _rangeArrDayjs[1];\n    if (startDayjs.isAfter(endDayjs)) {\n      debugWarn(componentName, \"end time should be greater than start time\");\n      return [];\n    }\n    if (startDayjs.isSame(endDayjs, \"month\")) {\n      return calculateValidatedDateRange(startDayjs, endDayjs);\n    } else {\n      if (startDayjs.add(1, \"month\").month() !== endDayjs.month()) {\n        debugWarn(componentName, \"start time and end time interval must not exceed two months\");\n        return [];\n      }\n      return calculateValidatedDateRange(startDayjs, endDayjs);\n    }\n  });\n  var date = computed(function () {\n    if (!props.modelValue) {\n      return realSelectedDay.value || (validatedRange.value.length ? validatedRange.value[0][0] : now);\n    } else {\n      return dayjs(props.modelValue).locale(lang.value);\n    }\n  });\n  var prevMonthDayjs = computed(function () {\n    return date.value.subtract(1, \"month\").date(1);\n  });\n  var nextMonthDayjs = computed(function () {\n    return date.value.add(1, \"month\").date(1);\n  });\n  var prevYearDayjs = computed(function () {\n    return date.value.subtract(1, \"year\").date(1);\n  });\n  var nextYearDayjs = computed(function () {\n    return date.value.add(1, \"year\").date(1);\n  });\n  var calculateValidatedDateRange = function calculateValidatedDateRange(startDayjs, endDayjs) {\n    var firstDay = startDayjs.startOf(\"week\");\n    var lastDay = endDayjs.endOf(\"week\");\n    var firstMonth = firstDay.get(\"month\");\n    var lastMonth = lastDay.get(\"month\");\n    if (firstMonth === lastMonth) {\n      return [[firstDay, lastDay]];\n    } else if ((firstMonth + 1) % 12 === lastMonth) {\n      return adjacentMonth(firstDay, lastDay);\n    } else if (firstMonth + 2 === lastMonth || (firstMonth + 1) % 11 === lastMonth) {\n      return threeConsecutiveMonth(firstDay, lastDay);\n    } else {\n      debugWarn(componentName, \"start time and end time interval must not exceed two months\");\n      return [];\n    }\n  };\n  var pickDay = function pickDay(day) {\n    realSelectedDay.value = day;\n  };\n  var selectDate = function selectDate(type) {\n    var dateMap = {\n      \"prev-month\": prevMonthDayjs.value,\n      \"next-month\": nextMonthDayjs.value,\n      \"prev-year\": prevYearDayjs.value,\n      \"next-year\": nextYearDayjs.value,\n      today: now\n    };\n    var day = dateMap[type];\n    if (!day.isSame(date.value, \"day\")) {\n      pickDay(day);\n    }\n  };\n  return {\n    calculateValidatedDateRange: calculateValidatedDateRange,\n    date: date,\n    realSelectedDay: realSelectedDay,\n    pickDay: pickDay,\n    selectDate: selectDate,\n    validatedRange: validatedRange\n  };\n};\nexport { useCalendar };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}