{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { defineComponent, inject, ref, computed, onBeforeUnmount, toRef, openBlock, createBlock, Transition, unref, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, vShow } from 'vue';\nimport { useEventListener, isClient } from '@vueuse/core';\nimport { scrollbarContextKey } from './constants.mjs';\nimport { BAR_MAP, renderThumbStyle } from './util.mjs';\nimport { thumbProps } from './thumb.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nvar COMPONENT_NAME = \"Thumb\";\nvar _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"thumb\",\n  props: thumbProps,\n  setup: function setup(__props) {\n    var props = __props;\n    var scrollbar = inject(scrollbarContextKey);\n    var ns = useNamespace(\"scrollbar\");\n    if (!scrollbar) throwError(COMPONENT_NAME, \"can not inject scrollbar context\");\n    var instance = ref();\n    var thumb = ref();\n    var thumbState = ref({});\n    var visible = ref(false);\n    var cursorDown = false;\n    var cursorLeave = false;\n    var originalOnSelectStart = isClient ? document.onselectstart : null;\n    var bar = computed(function () {\n      return BAR_MAP[props.vertical ? \"vertical\" : \"horizontal\"];\n    });\n    var thumbStyle = computed(function () {\n      return renderThumbStyle({\n        size: props.size,\n        move: props.move,\n        bar: bar.value\n      });\n    });\n    var offsetRatio = computed(function () {\n      return Math.pow(instance.value[bar.value.offset], 2) / scrollbar.wrapElement[bar.value.scrollSize] / props.ratio / thumb.value[bar.value.offset];\n    });\n    var clickThumbHandler = function clickThumbHandler(e) {\n      var _a;\n      e.stopPropagation();\n      if (e.ctrlKey || [1, 2].includes(e.button)) return;\n      (_a = window.getSelection()) == null ? void 0 : _a.removeAllRanges();\n      startDrag(e);\n      var el = e.currentTarget;\n      if (!el) return;\n      thumbState.value[bar.value.axis] = el[bar.value.offset] - (e[bar.value.client] - el.getBoundingClientRect()[bar.value.direction]);\n    };\n    var clickTrackHandler = function clickTrackHandler(e) {\n      if (!thumb.value || !instance.value || !scrollbar.wrapElement) return;\n      var offset = Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);\n      var thumbHalf = thumb.value[bar.value.offset] / 2;\n      var thumbPositionPercentage = (offset - thumbHalf) * 100 * offsetRatio.value / instance.value[bar.value.offset];\n      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;\n    };\n    var startDrag = function startDrag(e) {\n      e.stopImmediatePropagation();\n      cursorDown = true;\n      document.addEventListener(\"mousemove\", mouseMoveDocumentHandler);\n      document.addEventListener(\"mouseup\", _mouseUpDocumentHandler);\n      originalOnSelectStart = document.onselectstart;\n      document.onselectstart = function () {\n        return false;\n      };\n    };\n    var mouseMoveDocumentHandler = function mouseMoveDocumentHandler(e) {\n      if (!instance.value || !thumb.value) return;\n      if (cursorDown === false) return;\n      var prevPage = thumbState.value[bar.value.axis];\n      if (!prevPage) return;\n      var offset = (instance.value.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1;\n      var thumbClickPosition = thumb.value[bar.value.offset] - prevPage;\n      var thumbPositionPercentage = (offset - thumbClickPosition) * 100 * offsetRatio.value / instance.value[bar.value.offset];\n      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;\n    };\n    var _mouseUpDocumentHandler = function mouseUpDocumentHandler() {\n      cursorDown = false;\n      thumbState.value[bar.value.axis] = 0;\n      document.removeEventListener(\"mousemove\", mouseMoveDocumentHandler);\n      document.removeEventListener(\"mouseup\", _mouseUpDocumentHandler);\n      restoreOnselectstart();\n      if (cursorLeave) visible.value = false;\n    };\n    var mouseMoveScrollbarHandler = function mouseMoveScrollbarHandler() {\n      cursorLeave = false;\n      visible.value = !!props.size;\n    };\n    var mouseLeaveScrollbarHandler = function mouseLeaveScrollbarHandler() {\n      cursorLeave = true;\n      visible.value = cursorDown;\n    };\n    onBeforeUnmount(function () {\n      restoreOnselectstart();\n      document.removeEventListener(\"mouseup\", _mouseUpDocumentHandler);\n    });\n    var restoreOnselectstart = function restoreOnselectstart() {\n      if (document.onselectstart !== originalOnSelectStart) document.onselectstart = originalOnSelectStart;\n    };\n    useEventListener(toRef(scrollbar, \"scrollbarElement\"), \"mousemove\", mouseMoveScrollbarHandler);\n    useEventListener(toRef(scrollbar, \"scrollbarElement\"), \"mouseleave\", mouseLeaveScrollbarHandler);\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(Transition, {\n        name: unref(ns).b(\"fade\"),\n        persisted: \"\"\n      }, {\n        \"default\": withCtx(function () {\n          return [withDirectives(createElementVNode(\"div\", {\n            ref_key: \"instance\",\n            ref: instance,\n            \"class\": normalizeClass([unref(ns).e(\"bar\"), unref(ns).is(unref(bar).key)]),\n            onMousedown: clickTrackHandler\n          }, [createElementVNode(\"div\", {\n            ref_key: \"thumb\",\n            ref: thumb,\n            \"class\": normalizeClass(unref(ns).e(\"thumb\")),\n            style: normalizeStyle(unref(thumbStyle)),\n            onMousedown: clickThumbHandler\n          }, null, 38)], 34), [[vShow, _ctx.always || visible.value]])];\n        }),\n        _: 1\n      }, 8, [\"name\"]);\n    };\n  }\n});\nvar Thumb = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"thumb.vue\"]]);\nexport { Thumb as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}