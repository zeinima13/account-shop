{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport { defineComponent, ref, computed, onMounted, watch, onBeforeUnmount, openBlock, createBlock, unref, createSlots, renderList, withCtx, renderSlot } from 'vue';\nimport { ElStatistic } from '../../statistic/index.mjs';\nimport { countdownProps, countdownEmits } from './countdown.mjs';\nimport { formatTime, getTime } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { rAF, cAF } from '../../../utils/raf.mjs';\nvar __default__ = defineComponent({\n  name: \"ElCountdown\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: countdownProps,\n  emits: countdownEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var timer;\n    var rawValue = ref(0);\n    var displayValue = computed(function () {\n      return formatTime(rawValue.value, props.format);\n    });\n    var formatter = function formatter(val) {\n      return formatTime(val, props.format);\n    };\n    var stopTimer = function stopTimer() {\n      if (timer) {\n        cAF(timer);\n        timer = void 0;\n      }\n    };\n    var startTimer = function startTimer() {\n      var timestamp = getTime(props.value);\n      var _frameFunc = function frameFunc() {\n        var diff = timestamp - Date.now();\n        emit(\"change\", diff);\n        if (diff <= 0) {\n          diff = 0;\n          stopTimer();\n          emit(\"finish\");\n        } else {\n          timer = rAF(_frameFunc);\n        }\n        rawValue.value = diff;\n      };\n      timer = rAF(_frameFunc);\n    };\n    onMounted(function () {\n      rawValue.value = getTime(props.value) - Date.now();\n      watch(function () {\n        return [props.value, props.format];\n      }, function () {\n        stopTimer();\n        startTimer();\n      }, {\n        immediate: true\n      });\n    });\n    onBeforeUnmount(function () {\n      stopTimer();\n    });\n    expose({\n      displayValue: displayValue\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(unref(ElStatistic), {\n        value: rawValue.value,\n        title: _ctx.title,\n        prefix: _ctx.prefix,\n        suffix: _ctx.suffix,\n        \"value-style\": _ctx.valueStyle,\n        formatter: formatter\n      }, createSlots({\n        _: 2\n      }, [renderList(_ctx.$slots, function (_, name) {\n        return {\n          name: name,\n          fn: withCtx(function () {\n            return [renderSlot(_ctx.$slots, name)];\n          })\n        };\n      })]), 1032, [\"value\", \"title\", \"prefix\", \"suffix\", \"value-style\"]);\n    };\n  }\n}));\nvar Countdown = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"countdown.vue\"]]);\nexport { Countdown as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}