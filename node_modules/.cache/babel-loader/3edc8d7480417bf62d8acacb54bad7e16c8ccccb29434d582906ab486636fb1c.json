{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, ref, toRef, computed, provide, readonly, unref, watch, onDeactivated, openBlock, createBlock, withCtx, createVNode, renderSlot, createCommentVNode, createElementBlock, toDisplayString } from 'vue';\nimport { ElPopper } from '../../popper/index.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './constants.mjs';\nimport { useTooltipProps, tooltipEmits, useTooltipModelToggle } from './tooltip.mjs';\nimport ElTooltipTrigger from './trigger2.mjs';\nimport ElTooltipContent from './content2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { usePopperContainer } from '../../../hooks/use-popper-container/index.mjs';\nimport { useDelayedToggle } from '../../../hooks/use-delayed-toggle/index.mjs';\nimport ElPopperArrow from '../../popper/src/arrow2.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { isBoolean } from '../../../utils/types.mjs';\nvar __default__ = defineComponent({\n  name: \"ElTooltip\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: useTooltipProps,\n  emits: tooltipEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    usePopperContainer();\n    var id = useId();\n    var popperRef = ref();\n    var contentRef = ref();\n    var updatePopper = function updatePopper() {\n      var _a;\n      var popperComponent = unref(popperRef);\n      if (popperComponent) {\n        (_a = popperComponent.popperInstanceRef) == null ? void 0 : _a.update();\n      }\n    };\n    var open = ref(false);\n    var toggleReason = ref();\n    var _useTooltipModelToggl = useTooltipModelToggle({\n        indicator: open,\n        toggleReason: toggleReason\n      }),\n      show = _useTooltipModelToggl.show,\n      hide = _useTooltipModelToggl.hide,\n      hasUpdateHandler = _useTooltipModelToggl.hasUpdateHandler;\n    var _useDelayedToggle = useDelayedToggle({\n        showAfter: toRef(props, \"showAfter\"),\n        hideAfter: toRef(props, \"hideAfter\"),\n        autoClose: toRef(props, \"autoClose\"),\n        open: show,\n        close: hide\n      }),\n      _onOpen = _useDelayedToggle.onOpen,\n      _onClose = _useDelayedToggle.onClose;\n    var controlled = computed(function () {\n      return isBoolean(props.visible) && !hasUpdateHandler.value;\n    });\n    provide(TOOLTIP_INJECTION_KEY, {\n      controlled: controlled,\n      id: id,\n      open: readonly(open),\n      trigger: toRef(props, \"trigger\"),\n      onOpen: function onOpen(event) {\n        _onOpen(event);\n      },\n      onClose: function onClose(event) {\n        _onClose(event);\n      },\n      onToggle: function onToggle(event) {\n        if (unref(open)) {\n          _onClose(event);\n        } else {\n          _onOpen(event);\n        }\n      },\n      onShow: function onShow() {\n        emit(\"show\", toggleReason.value);\n      },\n      onHide: function onHide() {\n        emit(\"hide\", toggleReason.value);\n      },\n      onBeforeShow: function onBeforeShow() {\n        emit(\"before-show\", toggleReason.value);\n      },\n      onBeforeHide: function onBeforeHide() {\n        emit(\"before-hide\", toggleReason.value);\n      },\n      updatePopper: updatePopper\n    });\n    watch(function () {\n      return props.disabled;\n    }, function (disabled) {\n      if (disabled && open.value) {\n        open.value = false;\n      }\n    });\n    var isFocusInsideContent = function isFocusInsideContent(event) {\n      var _a;\n      return (_a = contentRef.value) == null ? void 0 : _a.isFocusInsideContent(event);\n    };\n    onDeactivated(function () {\n      return open.value && hide();\n    });\n    expose({\n      popperRef: popperRef,\n      contentRef: contentRef,\n      isFocusInsideContent: isFocusInsideContent,\n      updatePopper: updatePopper,\n      onOpen: _onOpen,\n      onClose: _onClose,\n      hide: hide\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(unref(ElPopper), {\n        ref_key: \"popperRef\",\n        ref: popperRef,\n        role: _ctx.role\n      }, {\n        \"default\": withCtx(function () {\n          return [createVNode(ElTooltipTrigger, {\n            disabled: _ctx.disabled,\n            trigger: _ctx.trigger,\n            \"trigger-keys\": _ctx.triggerKeys,\n            \"virtual-ref\": _ctx.virtualRef,\n            \"virtual-triggering\": _ctx.virtualTriggering\n          }, {\n            \"default\": withCtx(function () {\n              return [_ctx.$slots[\"default\"] ? renderSlot(_ctx.$slots, \"default\", {\n                key: 0\n              }) : createCommentVNode(\"v-if\", true)];\n            }),\n            _: 3\n          }, 8, [\"disabled\", \"trigger\", \"trigger-keys\", \"virtual-ref\", \"virtual-triggering\"]), createVNode(ElTooltipContent, {\n            ref_key: \"contentRef\",\n            ref: contentRef,\n            \"aria-label\": _ctx.ariaLabel,\n            \"boundaries-padding\": _ctx.boundariesPadding,\n            content: _ctx.content,\n            disabled: _ctx.disabled,\n            effect: _ctx.effect,\n            enterable: _ctx.enterable,\n            \"fallback-placements\": _ctx.fallbackPlacements,\n            \"hide-after\": _ctx.hideAfter,\n            \"gpu-acceleration\": _ctx.gpuAcceleration,\n            offset: _ctx.offset,\n            persistent: _ctx.persistent,\n            \"popper-class\": _ctx.popperClass,\n            \"popper-style\": _ctx.popperStyle,\n            placement: _ctx.placement,\n            \"popper-options\": _ctx.popperOptions,\n            pure: _ctx.pure,\n            \"raw-content\": _ctx.rawContent,\n            \"reference-el\": _ctx.referenceEl,\n            \"trigger-target-el\": _ctx.triggerTargetEl,\n            \"show-after\": _ctx.showAfter,\n            strategy: _ctx.strategy,\n            teleported: _ctx.teleported,\n            transition: _ctx.transition,\n            \"virtual-triggering\": _ctx.virtualTriggering,\n            \"z-index\": _ctx.zIndex,\n            \"append-to\": _ctx.appendTo\n          }, {\n            \"default\": withCtx(function () {\n              return [renderSlot(_ctx.$slots, \"content\", {}, function () {\n                return [_ctx.rawContent ? (openBlock(), createElementBlock(\"span\", {\n                  key: 0,\n                  innerHTML: _ctx.content\n                }, null, 8, [\"innerHTML\"])) : (openBlock(), createElementBlock(\"span\", {\n                  key: 1\n                }, toDisplayString(_ctx.content), 1))];\n              }), _ctx.showArrow ? (openBlock(), createBlock(unref(ElPopperArrow), {\n                key: 0,\n                \"arrow-offset\": _ctx.arrowOffset\n              }, null, 8, [\"arrow-offset\"])) : createCommentVNode(\"v-if\", true)];\n            }),\n            _: 3\n          }, 8, [\"aria-label\", \"boundaries-padding\", \"content\", \"disabled\", \"effect\", \"enterable\", \"fallback-placements\", \"hide-after\", \"gpu-acceleration\", \"offset\", \"persistent\", \"popper-class\", \"popper-style\", \"placement\", \"popper-options\", \"pure\", \"raw-content\", \"reference-el\", \"trigger-target-el\", \"show-after\", \"strategy\", \"teleported\", \"transition\", \"virtual-triggering\", \"z-index\", \"append-to\"])];\n        }),\n        _: 3\n      }, 8, [\"role\"]);\n    };\n  }\n}));\nvar Tooltip = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"tooltip.vue\"]]);\nexport { Tooltip as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}