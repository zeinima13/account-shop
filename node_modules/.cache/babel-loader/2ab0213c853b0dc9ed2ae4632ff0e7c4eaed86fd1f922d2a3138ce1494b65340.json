{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, inject, provide, unref, createVNode, ref, computed } from 'vue';\nimport { TableV2InjectionKey } from './tokens.mjs';\nimport { tableV2GridProps } from './grid.mjs';\nimport { sum } from './utils.mjs';\nimport Header from './components/header.mjs';\nimport DynamicSizeGrid from '../../virtual-list/src/components/dynamic-size-grid.mjs';\nimport FixedSizeGrid from '../../virtual-list/src/components/fixed-size-grid.mjs';\nimport { isObject } from '@vue/shared';\nimport { isNumber } from '../../../utils/types.mjs';\nvar COMPONENT_NAME = \"ElTableV2Grid\";\nvar useTableGrid = function useTableGrid(props) {\n  var headerRef = ref();\n  var bodyRef = ref();\n  var scrollLeft = ref(0);\n  var totalHeight = computed(function () {\n    var data = props.data,\n      rowHeight = props.rowHeight,\n      estimatedRowHeight = props.estimatedRowHeight;\n    if (estimatedRowHeight) {\n      return;\n    }\n    return data.length * rowHeight;\n  });\n  var fixedRowHeight = computed(function () {\n    var fixedData = props.fixedData,\n      rowHeight = props.rowHeight;\n    return ((fixedData == null ? void 0 : fixedData.length) || 0) * rowHeight;\n  });\n  var headerHeight = computed(function () {\n    return sum(props.headerHeight);\n  });\n  var gridHeight = computed(function () {\n    var height = props.height;\n    return Math.max(0, height - unref(headerHeight) - unref(fixedRowHeight));\n  });\n  var hasHeader = computed(function () {\n    return unref(headerHeight) + unref(fixedRowHeight) > 0;\n  });\n  var itemKey = function itemKey(_ref) {\n    var data = _ref.data,\n      rowIndex = _ref.rowIndex;\n    return data[rowIndex][props.rowKey];\n  };\n  function onItemRendered(_ref2) {\n    var rowCacheStart = _ref2.rowCacheStart,\n      rowCacheEnd = _ref2.rowCacheEnd,\n      rowVisibleStart = _ref2.rowVisibleStart,\n      rowVisibleEnd = _ref2.rowVisibleEnd;\n    var _a;\n    (_a = props.onRowsRendered) == null ? void 0 : _a.call(props, {\n      rowCacheStart: rowCacheStart,\n      rowCacheEnd: rowCacheEnd,\n      rowVisibleStart: rowVisibleStart,\n      rowVisibleEnd: rowVisibleEnd\n    });\n  }\n  function resetAfterRowIndex(index, forceUpdate2) {\n    var _a;\n    (_a = bodyRef.value) == null ? void 0 : _a.resetAfterRowIndex(index, forceUpdate2);\n  }\n  function scrollTo(leftOrOptions, top) {\n    var header$ = unref(headerRef);\n    var body$ = unref(bodyRef);\n    if (isObject(leftOrOptions)) {\n      header$ == null ? void 0 : header$.scrollToLeft(leftOrOptions.scrollLeft);\n      scrollLeft.value = leftOrOptions.scrollLeft;\n      body$ == null ? void 0 : body$.scrollTo(leftOrOptions);\n    } else {\n      header$ == null ? void 0 : header$.scrollToLeft(leftOrOptions);\n      scrollLeft.value = leftOrOptions;\n      body$ == null ? void 0 : body$.scrollTo({\n        scrollLeft: leftOrOptions,\n        scrollTop: top\n      });\n    }\n  }\n  function scrollToTop(scrollTop) {\n    var _a;\n    (_a = unref(bodyRef)) == null ? void 0 : _a.scrollTo({\n      scrollTop: scrollTop\n    });\n  }\n  function scrollToRow(row, strategy) {\n    var _a;\n    (_a = unref(bodyRef)) == null ? void 0 : _a.scrollToItem(row, 1, strategy);\n  }\n  function forceUpdate() {\n    var _a, _b;\n    (_a = unref(bodyRef)) == null ? void 0 : _a.$forceUpdate();\n    (_b = unref(headerRef)) == null ? void 0 : _b.$forceUpdate();\n  }\n  return {\n    bodyRef: bodyRef,\n    forceUpdate: forceUpdate,\n    fixedRowHeight: fixedRowHeight,\n    gridHeight: gridHeight,\n    hasHeader: hasHeader,\n    headerHeight: headerHeight,\n    headerRef: headerRef,\n    totalHeight: totalHeight,\n    itemKey: itemKey,\n    onItemRendered: onItemRendered,\n    resetAfterRowIndex: resetAfterRowIndex,\n    scrollTo: scrollTo,\n    scrollToTop: scrollToTop,\n    scrollToRow: scrollToRow,\n    scrollLeft: scrollLeft\n  };\n};\nvar TableGrid = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2GridProps,\n  setup: function setup(props, _ref3) {\n    var slots = _ref3.slots,\n      expose = _ref3.expose;\n    var _inject = inject(TableV2InjectionKey),\n      ns = _inject.ns;\n    var _useTableGrid = useTableGrid(props),\n      bodyRef = _useTableGrid.bodyRef,\n      fixedRowHeight = _useTableGrid.fixedRowHeight,\n      gridHeight = _useTableGrid.gridHeight,\n      hasHeader = _useTableGrid.hasHeader,\n      headerRef = _useTableGrid.headerRef,\n      headerHeight = _useTableGrid.headerHeight,\n      totalHeight = _useTableGrid.totalHeight,\n      forceUpdate = _useTableGrid.forceUpdate,\n      itemKey = _useTableGrid.itemKey,\n      onItemRendered = _useTableGrid.onItemRendered,\n      resetAfterRowIndex = _useTableGrid.resetAfterRowIndex,\n      scrollTo = _useTableGrid.scrollTo,\n      scrollToTop = _useTableGrid.scrollToTop,\n      scrollToRow = _useTableGrid.scrollToRow,\n      scrollLeft = _useTableGrid.scrollLeft;\n    provide(\"tableV2GridScrollLeft\", scrollLeft);\n    expose({\n      forceUpdate: forceUpdate,\n      totalHeight: totalHeight,\n      scrollTo: scrollTo,\n      scrollToTop: scrollToTop,\n      scrollToRow: scrollToRow,\n      resetAfterRowIndex: resetAfterRowIndex\n    });\n    var getColumnWidth = function getColumnWidth() {\n      return props.bodyWidth;\n    };\n    return function () {\n      var cache = props.cache,\n        columns = props.columns,\n        data = props.data,\n        fixedData = props.fixedData,\n        useIsScrolling = props.useIsScrolling,\n        scrollbarAlwaysOn = props.scrollbarAlwaysOn,\n        scrollbarEndGap = props.scrollbarEndGap,\n        scrollbarStartGap = props.scrollbarStartGap,\n        style = props.style,\n        rowHeight = props.rowHeight,\n        bodyWidth = props.bodyWidth,\n        estimatedRowHeight = props.estimatedRowHeight,\n        headerWidth = props.headerWidth,\n        height = props.height,\n        width = props.width,\n        getRowHeight = props.getRowHeight,\n        onScroll = props.onScroll;\n      var isDynamicRowEnabled = isNumber(estimatedRowHeight);\n      var Grid = isDynamicRowEnabled ? DynamicSizeGrid : FixedSizeGrid;\n      var _headerHeight = unref(headerHeight);\n      return createVNode(\"div\", {\n        \"role\": \"table\",\n        \"class\": [ns.e(\"table\"), props[\"class\"]],\n        \"style\": style\n      }, [createVNode(Grid, {\n        \"ref\": bodyRef,\n        \"data\": data,\n        \"useIsScrolling\": useIsScrolling,\n        \"itemKey\": itemKey,\n        \"columnCache\": 0,\n        \"columnWidth\": isDynamicRowEnabled ? getColumnWidth : bodyWidth,\n        \"totalColumn\": 1,\n        \"totalRow\": data.length,\n        \"rowCache\": cache,\n        \"rowHeight\": isDynamicRowEnabled ? getRowHeight : rowHeight,\n        \"width\": width,\n        \"height\": unref(gridHeight),\n        \"class\": ns.e(\"body\"),\n        \"role\": \"rowgroup\",\n        \"scrollbarStartGap\": scrollbarStartGap,\n        \"scrollbarEndGap\": scrollbarEndGap,\n        \"scrollbarAlwaysOn\": scrollbarAlwaysOn,\n        \"onScroll\": onScroll,\n        \"onItemRendered\": onItemRendered,\n        \"perfMode\": false\n      }, {\n        \"default\": function _default(params) {\n          var _a;\n          var rowData = data[params.rowIndex];\n          return (_a = slots.row) == null ? void 0 : _a.call(slots, _objectSpread(_objectSpread({}, params), {}, {\n            columns: columns,\n            rowData: rowData\n          }));\n        }\n      }), unref(hasHeader) && createVNode(Header, {\n        \"ref\": headerRef,\n        \"class\": ns.e(\"header-wrapper\"),\n        \"columns\": columns,\n        \"headerData\": data,\n        \"headerHeight\": props.headerHeight,\n        \"fixedHeaderData\": fixedData,\n        \"rowWidth\": headerWidth,\n        \"rowHeight\": rowHeight,\n        \"width\": width,\n        \"height\": Math.min(_headerHeight + unref(fixedRowHeight), height)\n      }, {\n        dynamic: slots.header,\n        fixed: slots.row\n      })]);\n    };\n  }\n});\nvar Table = TableGrid;\nexport { Table as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}