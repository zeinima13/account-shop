{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { defineComponent, computed, ref, openBlock, createElementBlock, normalizeClass, unref, createVNode, mergeProps, createSlots, renderList, withCtx, renderSlot, normalizeProps, guardReactiveProps, createElementVNode, normalizeStyle, withModifiers, nextTick } from 'vue';\nimport { pick } from 'lodash-unified';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { mentionProps, mentionEmits } from './mention.mjs';\nimport { getCursorPosition, getMentionCtx } from './helper.mjs';\nimport ElMentionDropdown from './mention-dropdown2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { inputProps } from '../../input/src/input.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { useFocusController } from '../../../hooks/use-focus-controller/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { isFunction } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nvar __default__ = defineComponent({\n  name: \"ElMention\",\n  inheritAttrs: false\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: mentionProps,\n  emits: mentionEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var passInputProps = computed(function () {\n      return pick(props, Object.keys(inputProps));\n    });\n    var ns = useNamespace(\"mention\");\n    var disabled = useFormDisabled();\n    var contentId = useId();\n    var elInputRef = ref();\n    var tooltipRef = ref();\n    var dropdownRef = ref();\n    var visible = ref(false);\n    var cursorStyle = ref();\n    var mentionCtx = ref();\n    var computedPlacement = computed(function () {\n      return props.showArrow ? props.placement : \"\".concat(props.placement, \"-start\");\n    });\n    var computedFallbackPlacements = computed(function () {\n      return props.showArrow ? [\"bottom\", \"top\"] : [\"bottom-start\", \"top-start\"];\n    });\n    var filteredOptions = computed(function () {\n      var filterOption = props.filterOption,\n        options = props.options;\n      if (!mentionCtx.value || !filterOption) return options;\n      return options.filter(function (option) {\n        return filterOption(mentionCtx.value.pattern, option);\n      });\n    });\n    var dropdownVisible = computed(function () {\n      return visible.value && (!!filteredOptions.value.length || props.loading);\n    });\n    var hoveringId = computed(function () {\n      var _a;\n      return \"\".concat(contentId.value, \"-\").concat((_a = dropdownRef.value) == null ? void 0 : _a.hoveringIndex);\n    });\n    var handleInputChange = function handleInputChange(value) {\n      emit(\"update:modelValue\", value);\n      syncAfterCursorMove();\n    };\n    var handleInputKeyDown = function handleInputKeyDown(event) {\n      var _a, _b, _c, _d;\n      if (!(\"code\" in event) || ((_a = elInputRef.value) == null ? void 0 : _a.isComposing)) return;\n      switch (event.code) {\n        case EVENT_CODE.left:\n        case EVENT_CODE.right:\n          syncAfterCursorMove();\n          break;\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          if (!visible.value) return;\n          event.preventDefault();\n          (_b = dropdownRef.value) == null ? void 0 : _b.navigateOptions(event.code === EVENT_CODE.up ? \"prev\" : \"next\");\n          break;\n        case EVENT_CODE.enter:\n        case EVENT_CODE.numpadEnter:\n          if (!visible.value) return;\n          event.preventDefault();\n          if ((_c = dropdownRef.value) == null ? void 0 : _c.hoverOption) {\n            (_d = dropdownRef.value) == null ? void 0 : _d.selectHoverOption();\n          } else {\n            visible.value = false;\n          }\n          break;\n        case EVENT_CODE.esc:\n          if (!visible.value) return;\n          event.preventDefault();\n          visible.value = false;\n          break;\n        case EVENT_CODE.backspace:\n          if (props.whole && mentionCtx.value) {\n            var _mentionCtx$value = mentionCtx.value,\n              splitIndex = _mentionCtx$value.splitIndex,\n              selectionEnd = _mentionCtx$value.selectionEnd,\n              pattern = _mentionCtx$value.pattern,\n              prefixIndex = _mentionCtx$value.prefixIndex,\n              prefix = _mentionCtx$value.prefix;\n            var inputEl = getInputEl();\n            if (!inputEl) return;\n            var inputValue = inputEl.value;\n            var matchOption = props.options.find(function (item) {\n              return item.value === pattern;\n            });\n            var isWhole = isFunction(props.checkIsWhole) ? props.checkIsWhole(pattern, prefix) : matchOption;\n            if (isWhole && splitIndex !== -1 && splitIndex + 1 === selectionEnd) {\n              event.preventDefault();\n              var newValue = inputValue.slice(0, prefixIndex) + inputValue.slice(splitIndex + 1);\n              emit(UPDATE_MODEL_EVENT, newValue);\n              var newSelectionEnd = prefixIndex;\n              nextTick(function () {\n                inputEl.selectionStart = newSelectionEnd;\n                inputEl.selectionEnd = newSelectionEnd;\n                syncDropdownVisible();\n              });\n            }\n          }\n      }\n    };\n    var _useFocusController = useFocusController(elInputRef, {\n        beforeFocus: function beforeFocus() {\n          return disabled.value;\n        },\n        afterFocus: function afterFocus() {\n          syncAfterCursorMove();\n        },\n        beforeBlur: function beforeBlur(event) {\n          var _a;\n          return (_a = tooltipRef.value) == null ? void 0 : _a.isFocusInsideContent(event);\n        },\n        afterBlur: function afterBlur() {\n          visible.value = false;\n        }\n      }),\n      wrapperRef = _useFocusController.wrapperRef;\n    var handleInputMouseDown = function handleInputMouseDown() {\n      syncAfterCursorMove();\n    };\n    var handleSelect = function handleSelect(item) {\n      if (!mentionCtx.value) return;\n      var inputEl = getInputEl();\n      if (!inputEl) return;\n      var inputValue = inputEl.value;\n      var split = props.split;\n      var newEndPart = inputValue.slice(mentionCtx.value.end);\n      var alreadySeparated = newEndPart.startsWith(split);\n      var newMiddlePart = \"\".concat(item.value).concat(alreadySeparated ? \"\" : split);\n      var newValue = inputValue.slice(0, mentionCtx.value.start) + newMiddlePart + newEndPart;\n      emit(UPDATE_MODEL_EVENT, newValue);\n      emit(\"select\", item, mentionCtx.value.prefix);\n      var newSelectionEnd = mentionCtx.value.start + newMiddlePart.length + (alreadySeparated ? 1 : 0);\n      nextTick(function () {\n        inputEl.selectionStart = newSelectionEnd;\n        inputEl.selectionEnd = newSelectionEnd;\n        inputEl.focus();\n        syncDropdownVisible();\n      });\n    };\n    var getInputEl = function getInputEl() {\n      var _a, _b;\n      return props.type === \"textarea\" ? (_a = elInputRef.value) == null ? void 0 : _a.textarea : (_b = elInputRef.value) == null ? void 0 : _b.input;\n    };\n    var syncAfterCursorMove = function syncAfterCursorMove() {\n      setTimeout(function () {\n        syncCursor();\n        syncDropdownVisible();\n        nextTick(function () {\n          var _a;\n          return (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper();\n        });\n      }, 0);\n    };\n    var syncCursor = function syncCursor() {\n      var inputEl = getInputEl();\n      if (!inputEl) return;\n      var caretPosition = getCursorPosition(inputEl);\n      var inputRect = inputEl.getBoundingClientRect();\n      var elInputRect = elInputRef.value.$el.getBoundingClientRect();\n      cursorStyle.value = {\n        position: \"absolute\",\n        width: 0,\n        height: \"\".concat(caretPosition.height, \"px\"),\n        left: \"\".concat(caretPosition.left + inputRect.left - elInputRect.left, \"px\"),\n        top: \"\".concat(caretPosition.top + inputRect.top - elInputRect.top, \"px\")\n      };\n    };\n    var syncDropdownVisible = function syncDropdownVisible() {\n      var inputEl = getInputEl();\n      if (document.activeElement !== inputEl) {\n        visible.value = false;\n        return;\n      }\n      var prefix = props.prefix,\n        split = props.split;\n      mentionCtx.value = getMentionCtx(inputEl, prefix, split);\n      if (mentionCtx.value && mentionCtx.value.splitIndex === -1) {\n        visible.value = true;\n        emit(\"search\", mentionCtx.value.pattern, mentionCtx.value.prefix);\n        return;\n      }\n      visible.value = false;\n    };\n    expose({\n      input: elInputRef,\n      tooltip: tooltipRef,\n      dropdownVisible: dropdownVisible\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"wrapperRef\",\n        ref: wrapperRef,\n        \"class\": normalizeClass([unref(ns).b(), unref(ns).is(\"disabled\", unref(disabled))])\n      }, [createVNode(unref(ElInput), mergeProps(mergeProps(unref(passInputProps), _ctx.$attrs), {\n        ref_key: \"elInputRef\",\n        ref: elInputRef,\n        \"model-value\": _ctx.modelValue,\n        disabled: unref(disabled),\n        role: unref(dropdownVisible) ? \"combobox\" : void 0,\n        \"aria-activedescendant\": unref(dropdownVisible) ? unref(hoveringId) || \"\" : void 0,\n        \"aria-controls\": unref(dropdownVisible) ? unref(contentId) : void 0,\n        \"aria-expanded\": unref(dropdownVisible) || void 0,\n        \"aria-label\": _ctx.ariaLabel,\n        \"aria-autocomplete\": unref(dropdownVisible) ? \"none\" : void 0,\n        \"aria-haspopup\": unref(dropdownVisible) ? \"listbox\" : void 0,\n        onInput: handleInputChange,\n        onKeydown: handleInputKeyDown,\n        onMousedown: handleInputMouseDown\n      }), createSlots({\n        _: 2\n      }, [renderList(_ctx.$slots, function (_, name) {\n        return {\n          name: name,\n          fn: withCtx(function (slotProps) {\n            return [renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(slotProps)))];\n          })\n        };\n      })]), 1040, [\"model-value\", \"disabled\", \"role\", \"aria-activedescendant\", \"aria-controls\", \"aria-expanded\", \"aria-label\", \"aria-autocomplete\", \"aria-haspopup\"]), createVNode(unref(ElTooltip), {\n        ref_key: \"tooltipRef\",\n        ref: tooltipRef,\n        visible: unref(dropdownVisible),\n        \"popper-class\": [unref(ns).e(\"popper\"), _ctx.popperClass],\n        \"popper-options\": _ctx.popperOptions,\n        placement: unref(computedPlacement),\n        \"fallback-placements\": unref(computedFallbackPlacements),\n        effect: \"light\",\n        pure: \"\",\n        offset: _ctx.offset,\n        \"show-arrow\": _ctx.showArrow\n      }, {\n        \"default\": withCtx(function () {\n          return [createElementVNode(\"div\", {\n            style: normalizeStyle(cursorStyle.value)\n          }, null, 4)];\n        }),\n        content: withCtx(function () {\n          var _a;\n          return [createVNode(ElMentionDropdown, {\n            ref_key: \"dropdownRef\",\n            ref: dropdownRef,\n            options: unref(filteredOptions),\n            disabled: unref(disabled),\n            loading: _ctx.loading,\n            \"content-id\": unref(contentId),\n            \"aria-label\": _ctx.ariaLabel,\n            onSelect: handleSelect,\n            onClick: withModifiers((_a = elInputRef.value) == null ? void 0 : _a.focus, [\"stop\"])\n          }, createSlots({\n            _: 2\n          }, [renderList(_ctx.$slots, function (_, name) {\n            return {\n              name: name,\n              fn: withCtx(function (slotProps) {\n                return [renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(slotProps)))];\n              })\n            };\n          })]), 1032, [\"options\", \"disabled\", \"loading\", \"content-id\", \"aria-label\", \"onClick\"])];\n        }),\n        _: 3\n      }, 8, [\"visible\", \"popper-class\", \"popper-options\", \"placement\", \"fallback-placements\", \"offset\", \"show-arrow\"])], 2);\n    };\n  }\n}));\nvar Mention = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"mention.vue\"]]);\nexport { Mention as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}