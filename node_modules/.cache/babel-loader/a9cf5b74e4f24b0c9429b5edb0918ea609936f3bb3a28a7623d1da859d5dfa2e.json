{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { defineComponent, useSlots, inject, computed, openBlock, createElementBlock, normalizeClass, unref, withDirectives, isRef, withModifiers, vModelCheckbox, normalizeStyle, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { checkboxGroupContextKey } from './constants.mjs';\nimport { checkboxProps, checkboxEmits } from './checkbox.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useCheckbox } from './composables/use-checkbox.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar __default__ = defineComponent({\n  name: \"ElCheckboxButton\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: checkboxProps,\n  emits: checkboxEmits,\n  setup: function setup(__props) {\n    var props = __props;\n    var slots = useSlots();\n    var _useCheckbox = useCheckbox(props, slots),\n      isFocused = _useCheckbox.isFocused,\n      isChecked = _useCheckbox.isChecked,\n      isDisabled = _useCheckbox.isDisabled,\n      checkboxButtonSize = _useCheckbox.checkboxButtonSize,\n      model = _useCheckbox.model,\n      actualValue = _useCheckbox.actualValue,\n      handleChange = _useCheckbox.handleChange;\n    var checkboxGroup = inject(checkboxGroupContextKey, void 0);\n    var ns = useNamespace(\"checkbox\");\n    var activeStyle = computed(function () {\n      var _a, _b, _c, _d;\n      var fillValue = (_b = (_a = checkboxGroup == null ? void 0 : checkboxGroup.fill) == null ? void 0 : _a.value) != null ? _b : \"\";\n      return {\n        backgroundColor: fillValue,\n        borderColor: fillValue,\n        color: (_d = (_c = checkboxGroup == null ? void 0 : checkboxGroup.textColor) == null ? void 0 : _c.value) != null ? _d : \"\",\n        boxShadow: fillValue ? \"-1px 0 0 0 \".concat(fillValue) : void 0\n      };\n    });\n    var labelKls = computed(function () {\n      return [ns.b(\"button\"), ns.bm(\"button\", checkboxButtonSize.value), ns.is(\"disabled\", isDisabled.value), ns.is(\"checked\", isChecked.value), ns.is(\"focus\", isFocused.value)];\n    });\n    return function (_ctx, _cache) {\n      var _a, _b, _c, _d;\n      return openBlock(), createElementBlock(\"label\", {\n        \"class\": normalizeClass(unref(labelKls))\n      }, [_ctx.trueValue || _ctx.falseValue || _ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock(\"input\", {\n        key: 0,\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return isRef(model) ? model.value = $event : null;\n        },\n        \"class\": normalizeClass(unref(ns).be(\"button\", \"original\")),\n        type: \"checkbox\",\n        name: _ctx.name,\n        tabindex: _ctx.tabindex,\n        disabled: unref(isDisabled),\n        \"true-value\": (_b = (_a = _ctx.trueValue) != null ? _a : _ctx.trueLabel) != null ? _b : true,\n        \"false-value\": (_d = (_c = _ctx.falseValue) != null ? _c : _ctx.falseLabel) != null ? _d : false,\n        onChange: unref(handleChange),\n        onFocus: function onFocus($event) {\n          return isFocused.value = true;\n        },\n        onBlur: function onBlur($event) {\n          return isFocused.value = false;\n        },\n        onClick: withModifiers(function () {}, [\"stop\"])\n      }, null, 42, [\"onUpdate:modelValue\", \"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\", \"onChange\", \"onFocus\", \"onBlur\", \"onClick\"])), [[vModelCheckbox, unref(model)]]) : withDirectives((openBlock(), createElementBlock(\"input\", {\n        key: 1,\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return isRef(model) ? model.value = $event : null;\n        },\n        \"class\": normalizeClass(unref(ns).be(\"button\", \"original\")),\n        type: \"checkbox\",\n        name: _ctx.name,\n        tabindex: _ctx.tabindex,\n        disabled: unref(isDisabled),\n        value: unref(actualValue),\n        onChange: unref(handleChange),\n        onFocus: function onFocus($event) {\n          return isFocused.value = true;\n        },\n        onBlur: function onBlur($event) {\n          return isFocused.value = false;\n        },\n        onClick: withModifiers(function () {}, [\"stop\"])\n      }, null, 42, [\"onUpdate:modelValue\", \"name\", \"tabindex\", \"disabled\", \"value\", \"onChange\", \"onFocus\", \"onBlur\", \"onClick\"])), [[vModelCheckbox, unref(model)]]), _ctx.$slots[\"default\"] || _ctx.label ? (openBlock(), createElementBlock(\"span\", {\n        key: 2,\n        \"class\": normalizeClass(unref(ns).be(\"button\", \"inner\")),\n        style: normalizeStyle(unref(isChecked) ? unref(activeStyle) : void 0)\n      }, [renderSlot(_ctx.$slots, \"default\", {}, function () {\n        return [createTextVNode(toDisplayString(_ctx.label), 1)];\n      })], 6)) : createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n}));\nvar CheckboxButton = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"checkbox-button.vue\"]]);\nexport { CheckboxButton as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}