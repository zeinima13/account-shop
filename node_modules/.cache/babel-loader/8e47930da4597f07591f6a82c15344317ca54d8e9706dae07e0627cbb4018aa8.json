{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, useSlots, computed, ref, openBlock, createBlock, unref, withCtx, createVNode, Transition, withDirectives, createElementVNode, mergeProps, withModifiers, normalizeClass, createElementBlock, renderSlot, toDisplayString, createCommentVNode, vShow } from 'vue';\nimport { Close } from '@element-plus/icons-vue';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nimport { ElTeleport } from '../../teleport/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { drawerProps, drawerEmits } from './drawer2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useDialog } from '../../dialog/src/use-dialog.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nvar __default__ = defineComponent({\n  name: \"ElDrawer\",\n  inheritAttrs: false\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: drawerProps,\n  emits: drawerEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    var slots = useSlots();\n    useDeprecated({\n      scope: \"el-drawer\",\n      from: \"the title slot\",\n      replacement: \"the header slot\",\n      version: \"3.0.0\",\n      ref: \"https://element-plus.org/en-US/component/drawer.html#slots\"\n    }, computed(function () {\n      return !!slots.title;\n    }));\n    var drawerRef = ref();\n    var focusStartRef = ref();\n    var ns = useNamespace(\"drawer\");\n    var _useLocale = useLocale(),\n      t = _useLocale.t;\n    var _useDialog = useDialog(props, drawerRef),\n      afterEnter = _useDialog.afterEnter,\n      afterLeave = _useDialog.afterLeave,\n      beforeLeave = _useDialog.beforeLeave,\n      visible = _useDialog.visible,\n      rendered = _useDialog.rendered,\n      titleId = _useDialog.titleId,\n      bodyId = _useDialog.bodyId,\n      zIndex = _useDialog.zIndex,\n      onModalClick = _useDialog.onModalClick,\n      onOpenAutoFocus = _useDialog.onOpenAutoFocus,\n      onCloseAutoFocus = _useDialog.onCloseAutoFocus,\n      onFocusoutPrevented = _useDialog.onFocusoutPrevented,\n      onCloseRequested = _useDialog.onCloseRequested,\n      handleClose = _useDialog.handleClose;\n    var isHorizontal = computed(function () {\n      return props.direction === \"rtl\" || props.direction === \"ltr\";\n    });\n    var drawerSize = computed(function () {\n      return addUnit(props.size);\n    });\n    expose({\n      handleClose: handleClose,\n      afterEnter: afterEnter,\n      afterLeave: afterLeave\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(unref(ElTeleport), {\n        to: _ctx.appendTo,\n        disabled: _ctx.appendTo !== \"body\" ? false : !_ctx.appendToBody\n      }, {\n        \"default\": withCtx(function () {\n          return [createVNode(Transition, {\n            name: unref(ns).b(\"fade\"),\n            onAfterEnter: unref(afterEnter),\n            onAfterLeave: unref(afterLeave),\n            onBeforeLeave: unref(beforeLeave),\n            persisted: \"\"\n          }, {\n            \"default\": withCtx(function () {\n              return [withDirectives(createVNode(unref(ElOverlay), {\n                mask: _ctx.modal,\n                \"overlay-class\": _ctx.modalClass,\n                \"z-index\": unref(zIndex),\n                onClick: unref(onModalClick)\n              }, {\n                \"default\": withCtx(function () {\n                  return [createVNode(unref(ElFocusTrap), {\n                    loop: \"\",\n                    trapped: unref(visible),\n                    \"focus-trap-el\": drawerRef.value,\n                    \"focus-start-el\": focusStartRef.value,\n                    onFocusAfterTrapped: unref(onOpenAutoFocus),\n                    onFocusAfterReleased: unref(onCloseAutoFocus),\n                    onFocusoutPrevented: unref(onFocusoutPrevented),\n                    onReleaseRequested: unref(onCloseRequested)\n                  }, {\n                    \"default\": withCtx(function () {\n                      return [createElementVNode(\"div\", mergeProps({\n                        ref_key: \"drawerRef\",\n                        ref: drawerRef,\n                        \"aria-modal\": \"true\",\n                        \"aria-label\": _ctx.title || void 0,\n                        \"aria-labelledby\": !_ctx.title ? unref(titleId) : void 0,\n                        \"aria-describedby\": unref(bodyId)\n                      }, _ctx.$attrs, {\n                        \"class\": [unref(ns).b(), _ctx.direction, unref(visible) && \"open\"],\n                        style: unref(isHorizontal) ? \"width: \" + unref(drawerSize) : \"height: \" + unref(drawerSize),\n                        role: \"dialog\",\n                        onClick: withModifiers(function () {}, [\"stop\"])\n                      }), [createElementVNode(\"span\", {\n                        ref_key: \"focusStartRef\",\n                        ref: focusStartRef,\n                        \"class\": normalizeClass(unref(ns).e(\"sr-focus\")),\n                        tabindex: \"-1\"\n                      }, null, 2), _ctx.withHeader ? (openBlock(), createElementBlock(\"header\", {\n                        key: 0,\n                        \"class\": normalizeClass([unref(ns).e(\"header\"), _ctx.headerClass])\n                      }, [!_ctx.$slots.title ? renderSlot(_ctx.$slots, \"header\", {\n                        key: 0,\n                        close: unref(handleClose),\n                        titleId: unref(titleId),\n                        titleClass: unref(ns).e(\"title\")\n                      }, function () {\n                        return [!_ctx.$slots.title ? (openBlock(), createElementBlock(\"span\", {\n                          key: 0,\n                          id: unref(titleId),\n                          role: \"heading\",\n                          \"aria-level\": _ctx.headerAriaLevel,\n                          \"class\": normalizeClass(unref(ns).e(\"title\"))\n                        }, toDisplayString(_ctx.title), 11, [\"id\", \"aria-level\"])) : createCommentVNode(\"v-if\", true)];\n                      }) : renderSlot(_ctx.$slots, \"title\", {\n                        key: 1\n                      }, function () {\n                        return [createCommentVNode(\" DEPRECATED SLOT \")];\n                      }), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n                        key: 2,\n                        \"aria-label\": unref(t)(\"el.drawer.close\"),\n                        \"class\": normalizeClass(unref(ns).e(\"close-btn\")),\n                        type: \"button\",\n                        onClick: unref(handleClose)\n                      }, [createVNode(unref(ElIcon), {\n                        \"class\": normalizeClass(unref(ns).e(\"close\"))\n                      }, {\n                        \"default\": withCtx(function () {\n                          return [createVNode(unref(Close))];\n                        }),\n                        _: 1\n                      }, 8, [\"class\"])], 10, [\"aria-label\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true), unref(rendered) ? (openBlock(), createElementBlock(\"div\", {\n                        key: 1,\n                        id: unref(bodyId),\n                        \"class\": normalizeClass([unref(ns).e(\"body\"), _ctx.bodyClass])\n                      }, [renderSlot(_ctx.$slots, \"default\")], 10, [\"id\"])) : createCommentVNode(\"v-if\", true), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"div\", {\n                        key: 2,\n                        \"class\": normalizeClass([unref(ns).e(\"footer\"), _ctx.footerClass])\n                      }, [renderSlot(_ctx.$slots, \"footer\")], 2)) : createCommentVNode(\"v-if\", true)], 16, [\"aria-label\", \"aria-labelledby\", \"aria-describedby\", \"onClick\"])];\n                    }),\n                    _: 3\n                  }, 8, [\"trapped\", \"focus-trap-el\", \"focus-start-el\", \"onFocusAfterTrapped\", \"onFocusAfterReleased\", \"onFocusoutPrevented\", \"onReleaseRequested\"])];\n                }),\n                _: 3\n              }, 8, [\"mask\", \"overlay-class\", \"z-index\", \"onClick\"]), [[vShow, unref(visible)]])];\n            }),\n            _: 3\n          }, 8, [\"name\", \"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])];\n        }),\n        _: 3\n      }, 8, [\"to\", \"disabled\"]);\n    };\n  }\n}));\nvar Drawer = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"drawer.vue\"]]);\nexport { Drawer as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}