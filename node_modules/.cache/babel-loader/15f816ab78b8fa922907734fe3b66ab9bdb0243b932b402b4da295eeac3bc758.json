{"ast":null,"code":"import { defineComponent, inject, ref, openBlock, createElementBlock, Fragment, createVNode } from 'vue';\nimport { GAP } from './util.mjs';\nimport Thumb from './thumb2.mjs';\nimport { barProps } from './bar2.mjs';\nimport { scrollbarContextKey } from './constants.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nvar _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"bar\",\n  props: barProps,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    var scrollbar = inject(scrollbarContextKey);\n    var moveX = ref(0);\n    var moveY = ref(0);\n    var sizeWidth = ref(\"\");\n    var sizeHeight = ref(\"\");\n    var ratioY = ref(1);\n    var ratioX = ref(1);\n    var handleScroll = function handleScroll(wrap) {\n      if (wrap) {\n        var offsetHeight = wrap.offsetHeight - GAP;\n        var offsetWidth = wrap.offsetWidth - GAP;\n        moveY.value = wrap.scrollTop * 100 / offsetHeight * ratioY.value;\n        moveX.value = wrap.scrollLeft * 100 / offsetWidth * ratioX.value;\n      }\n    };\n    var update = function update() {\n      var wrap = scrollbar == null ? void 0 : scrollbar.wrapElement;\n      if (!wrap) return;\n      var offsetHeight = wrap.offsetHeight - GAP;\n      var offsetWidth = wrap.offsetWidth - GAP;\n      var originalHeight = Math.pow(offsetHeight, 2) / wrap.scrollHeight;\n      var originalWidth = Math.pow(offsetWidth, 2) / wrap.scrollWidth;\n      var height = Math.max(originalHeight, props.minSize);\n      var width = Math.max(originalWidth, props.minSize);\n      ratioY.value = originalHeight / (offsetHeight - originalHeight) / (height / (offsetHeight - height));\n      ratioX.value = originalWidth / (offsetWidth - originalWidth) / (width / (offsetWidth - width));\n      sizeHeight.value = height + GAP < offsetHeight ? \"\".concat(height, \"px\") : \"\";\n      sizeWidth.value = width + GAP < offsetWidth ? \"\".concat(width, \"px\") : \"\";\n    };\n    expose({\n      handleScroll: handleScroll,\n      update: update\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(Fragment, null, [createVNode(Thumb, {\n        move: moveX.value,\n        ratio: ratioX.value,\n        size: sizeWidth.value,\n        always: _ctx.always\n      }, null, 8, [\"move\", \"ratio\", \"size\", \"always\"]), createVNode(Thumb, {\n        move: moveY.value,\n        ratio: ratioY.value,\n        size: sizeHeight.value,\n        vertical: \"\",\n        always: _ctx.always\n      }, null, 8, [\"move\", \"ratio\", \"size\", \"always\"])], 64);\n    };\n  }\n});\nvar Bar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"bar.vue\"]]);\nexport { Bar as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}