{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport { defineComponent, computed, ref, reactive, markRaw, watch, nextTick, onMounted, onBeforeUnmount, toRefs, resolveComponent, openBlock, createBlock, Transition, withCtx, withDirectives, createVNode, createElementVNode, normalizeClass, normalizeStyle, withModifiers, createElementBlock, resolveDynamicComponent, createCommentVNode, toDisplayString, withKeys, renderSlot, createTextVNode, vShow } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport TrapFocus from '../../../directives/trap-focus/index.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { useGlobalComponentSettings } from '../../config-provider/src/hooks/use-global-config.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { useDraggable } from '../../../hooks/use-draggable/index.mjs';\nimport { isFunction, isString } from '@vue/shared';\nimport { useLockscreen } from '../../../hooks/use-lockscreen/index.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index.mjs';\nvar _sfc_main = defineComponent({\n  name: \"ElMessageBox\",\n  directives: {\n    TrapFocus: TrapFocus\n  },\n  components: _objectSpread({\n    ElButton: ElButton,\n    ElFocusTrap: ElFocusTrap,\n    ElInput: ElInput,\n    ElOverlay: ElOverlay,\n    ElIcon: ElIcon\n  }, TypeComponents),\n  inheritAttrs: false,\n  props: {\n    buttonSize: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    modal: {\n      type: Boolean,\n      \"default\": true\n    },\n    lockScroll: {\n      type: Boolean,\n      \"default\": true\n    },\n    showClose: {\n      type: Boolean,\n      \"default\": true\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      \"default\": true\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      \"default\": true\n    },\n    closeOnHashChange: {\n      type: Boolean,\n      \"default\": true\n    },\n    center: Boolean,\n    draggable: Boolean,\n    overflow: Boolean,\n    roundButton: {\n      \"default\": false,\n      type: Boolean\n    },\n    container: {\n      type: String,\n      \"default\": \"body\"\n    },\n    boxType: {\n      type: String,\n      \"default\": \"\"\n    }\n  },\n  emits: [\"vanish\", \"action\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var _useGlobalComponentSe = useGlobalComponentSettings(\"message-box\", computed(function () {\n        return props.buttonSize;\n      })),\n      locale = _useGlobalComponentSe.locale,\n      zIndex = _useGlobalComponentSe.zIndex,\n      ns = _useGlobalComponentSe.ns,\n      btnSize = _useGlobalComponentSe.size;\n    var t = locale.t;\n    var nextZIndex = zIndex.nextZIndex;\n    var visible = ref(false);\n    var state = reactive({\n      autofocus: true,\n      beforeClose: null,\n      callback: null,\n      cancelButtonText: \"\",\n      cancelButtonClass: \"\",\n      confirmButtonText: \"\",\n      confirmButtonClass: \"\",\n      customClass: \"\",\n      customStyle: {},\n      dangerouslyUseHTMLString: false,\n      distinguishCancelAndClose: false,\n      icon: \"\",\n      inputPattern: null,\n      inputPlaceholder: \"\",\n      inputType: \"text\",\n      inputValue: null,\n      inputValidator: null,\n      inputErrorMessage: \"\",\n      message: null,\n      modalFade: true,\n      modalClass: \"\",\n      showCancelButton: false,\n      showConfirmButton: true,\n      type: \"\",\n      title: void 0,\n      showInput: false,\n      action: \"\",\n      confirmButtonLoading: false,\n      cancelButtonLoading: false,\n      confirmButtonLoadingIcon: markRaw(Loading),\n      cancelButtonLoadingIcon: markRaw(Loading),\n      confirmButtonDisabled: false,\n      editorErrorMessage: \"\",\n      validateError: false,\n      zIndex: nextZIndex()\n    });\n    var typeClass = computed(function () {\n      var type = state.type;\n      return _defineProperty({}, ns.bm(\"icon\", type), type && TypeComponentsMap[type]);\n    });\n    var contentId = useId();\n    var inputId = useId();\n    var iconComponent = computed(function () {\n      return state.icon || TypeComponentsMap[state.type] || \"\";\n    });\n    var hasMessage = computed(function () {\n      return !!state.message;\n    });\n    var rootRef = ref();\n    var headerRef = ref();\n    var focusStartRef = ref();\n    var inputRef = ref();\n    var confirmRef = ref();\n    var confirmButtonClasses = computed(function () {\n      return state.confirmButtonClass;\n    });\n    watch(function () {\n      return state.inputValue;\n    }, /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(val) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return nextTick();\n            case 2:\n              if (props.boxType === \"prompt\" && val !== null) {\n                validate();\n              }\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }(), {\n      immediate: true\n    });\n    watch(function () {\n      return visible.value;\n    }, function (val) {\n      var _a, _b;\n      if (val) {\n        if (props.boxType !== \"prompt\") {\n          if (state.autofocus) {\n            focusStartRef.value = (_b = (_a = confirmRef.value) == null ? void 0 : _a.$el) != null ? _b : rootRef.value;\n          } else {\n            focusStartRef.value = rootRef.value;\n          }\n        }\n        state.zIndex = nextZIndex();\n      }\n      if (props.boxType !== \"prompt\") return;\n      if (val) {\n        nextTick().then(function () {\n          var _a2;\n          if (inputRef.value && inputRef.value.$el) {\n            if (state.autofocus) {\n              focusStartRef.value = (_a2 = getInputElement()) != null ? _a2 : rootRef.value;\n            } else {\n              focusStartRef.value = rootRef.value;\n            }\n          }\n        });\n      } else {\n        state.editorErrorMessage = \"\";\n        state.validateError = false;\n      }\n    });\n    var draggable = computed(function () {\n      return props.draggable;\n    });\n    var overflow = computed(function () {\n      return props.overflow;\n    });\n    useDraggable(rootRef, headerRef, draggable, overflow);\n    onMounted(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return nextTick();\n          case 2:\n            if (props.closeOnHashChange) {\n              window.addEventListener(\"hashchange\", doClose);\n            }\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    })));\n    onBeforeUnmount(function () {\n      if (props.closeOnHashChange) {\n        window.removeEventListener(\"hashchange\", doClose);\n      }\n    });\n    function doClose() {\n      if (!visible.value) return;\n      visible.value = false;\n      nextTick(function () {\n        if (state.action) emit(\"action\", state.action);\n      });\n    }\n    var handleWrapperClick = function handleWrapperClick() {\n      if (props.closeOnClickModal) {\n        handleAction(state.distinguishCancelAndClose ? \"close\" : \"cancel\");\n      }\n    };\n    var overlayEvent = useSameTarget(handleWrapperClick);\n    var handleInputEnter = function handleInputEnter(e) {\n      if (state.inputType !== \"textarea\") {\n        e.preventDefault();\n        return handleAction(\"confirm\");\n      }\n    };\n    var handleAction = function handleAction(action) {\n      var _a;\n      if (props.boxType === \"prompt\" && action === \"confirm\" && !validate()) {\n        return;\n      }\n      state.action = action;\n      if (state.beforeClose) {\n        (_a = state.beforeClose) == null ? void 0 : _a.call(state, action, state, doClose);\n      } else {\n        doClose();\n      }\n    };\n    var validate = function validate() {\n      if (props.boxType === \"prompt\") {\n        var inputPattern = state.inputPattern;\n        if (inputPattern && !inputPattern.test(state.inputValue || \"\")) {\n          state.editorErrorMessage = state.inputErrorMessage || t(\"el.messagebox.error\");\n          state.validateError = true;\n          return false;\n        }\n        var inputValidator = state.inputValidator;\n        if (isFunction(inputValidator)) {\n          var validateResult = inputValidator(state.inputValue);\n          if (validateResult === false) {\n            state.editorErrorMessage = state.inputErrorMessage || t(\"el.messagebox.error\");\n            state.validateError = true;\n            return false;\n          }\n          if (isString(validateResult)) {\n            state.editorErrorMessage = validateResult;\n            state.validateError = true;\n            return false;\n          }\n        }\n      }\n      state.editorErrorMessage = \"\";\n      state.validateError = false;\n      return true;\n    };\n    var getInputElement = function getInputElement() {\n      var inputRefs = inputRef.value.$refs;\n      return inputRefs.input || inputRefs.textarea;\n    };\n    var handleClose = function handleClose() {\n      handleAction(\"close\");\n    };\n    var onCloseRequested = function onCloseRequested() {\n      if (props.closeOnPressEscape) {\n        handleClose();\n      }\n    };\n    if (props.lockScroll) {\n      useLockscreen(visible);\n    }\n    return _objectSpread(_objectSpread({}, toRefs(state)), {}, {\n      ns: ns,\n      overlayEvent: overlayEvent,\n      visible: visible,\n      hasMessage: hasMessage,\n      typeClass: typeClass,\n      contentId: contentId,\n      inputId: inputId,\n      btnSize: btnSize,\n      iconComponent: iconComponent,\n      confirmButtonClasses: confirmButtonClasses,\n      rootRef: rootRef,\n      focusStartRef: focusStartRef,\n      headerRef: headerRef,\n      inputRef: inputRef,\n      confirmRef: confirmRef,\n      doClose: doClose,\n      handleClose: handleClose,\n      onCloseRequested: onCloseRequested,\n      handleWrapperClick: handleWrapperClick,\n      handleInputEnter: handleInputEnter,\n      handleAction: handleAction,\n      t: t\n    });\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_icon = resolveComponent(\"el-icon\");\n  var _component_close = resolveComponent(\"close\");\n  var _component_el_input = resolveComponent(\"el-input\");\n  var _component_el_button = resolveComponent(\"el-button\");\n  var _component_el_focus_trap = resolveComponent(\"el-focus-trap\");\n  var _component_el_overlay = resolveComponent(\"el-overlay\");\n  return openBlock(), createBlock(Transition, {\n    name: \"fade-in-linear\",\n    onAfterLeave: function onAfterLeave($event) {\n      return _ctx.$emit(\"vanish\");\n    },\n    persisted: \"\"\n  }, {\n    \"default\": withCtx(function () {\n      return [withDirectives(createVNode(_component_el_overlay, {\n        \"z-index\": _ctx.zIndex,\n        \"overlay-class\": [_ctx.ns.is(\"message-box\"), _ctx.modalClass],\n        mask: _ctx.modal\n      }, {\n        \"default\": withCtx(function () {\n          return [createElementVNode(\"div\", {\n            role: \"dialog\",\n            \"aria-label\": _ctx.title,\n            \"aria-modal\": \"true\",\n            \"aria-describedby\": !_ctx.showInput ? _ctx.contentId : void 0,\n            \"class\": normalizeClass(\"\".concat(_ctx.ns.namespace.value, \"-overlay-message-box\")),\n            onClick: _ctx.overlayEvent.onClick,\n            onMousedown: _ctx.overlayEvent.onMousedown,\n            onMouseup: _ctx.overlayEvent.onMouseup\n          }, [createVNode(_component_el_focus_trap, {\n            loop: \"\",\n            trapped: _ctx.visible,\n            \"focus-trap-el\": _ctx.rootRef,\n            \"focus-start-el\": _ctx.focusStartRef,\n            onReleaseRequested: _ctx.onCloseRequested\n          }, {\n            \"default\": withCtx(function () {\n              return [createElementVNode(\"div\", {\n                ref: \"rootRef\",\n                \"class\": normalizeClass([_ctx.ns.b(), _ctx.customClass, _ctx.ns.is(\"draggable\", _ctx.draggable), _defineProperty({}, _ctx.ns.m(\"center\"), _ctx.center)]),\n                style: normalizeStyle(_ctx.customStyle),\n                tabindex: \"-1\",\n                onClick: withModifiers(function () {}, [\"stop\"])\n              }, [_ctx.title !== null && _ctx.title !== void 0 ? (openBlock(), createElementBlock(\"div\", {\n                key: 0,\n                ref: \"headerRef\",\n                \"class\": normalizeClass([_ctx.ns.e(\"header\"), {\n                  \"show-close\": _ctx.showClose\n                }])\n              }, [createElementVNode(\"div\", {\n                \"class\": normalizeClass(_ctx.ns.e(\"title\"))\n              }, [_ctx.iconComponent && _ctx.center ? (openBlock(), createBlock(_component_el_icon, {\n                key: 0,\n                \"class\": normalizeClass([_ctx.ns.e(\"status\"), _ctx.typeClass])\n              }, {\n                \"default\": withCtx(function () {\n                  return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))];\n                }),\n                _: 1\n              }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"span\", null, toDisplayString(_ctx.title), 1)], 2), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n                key: 0,\n                type: \"button\",\n                \"class\": normalizeClass(_ctx.ns.e(\"headerbtn\")),\n                \"aria-label\": _ctx.t(\"el.messagebox.close\"),\n                onClick: function onClick($event) {\n                  return _ctx.handleAction(_ctx.distinguishCancelAndClose ? \"close\" : \"cancel\");\n                },\n                onKeydown: withKeys(withModifiers(function ($event) {\n                  return _ctx.handleAction(_ctx.distinguishCancelAndClose ? \"close\" : \"cancel\");\n                }, [\"prevent\"]), [\"enter\"])\n              }, [createVNode(_component_el_icon, {\n                \"class\": normalizeClass(_ctx.ns.e(\"close\"))\n              }, {\n                \"default\": withCtx(function () {\n                  return [createVNode(_component_close)];\n                }),\n                _: 1\n              }, 8, [\"class\"])], 42, [\"aria-label\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n                id: _ctx.contentId,\n                \"class\": normalizeClass(_ctx.ns.e(\"content\"))\n              }, [createElementVNode(\"div\", {\n                \"class\": normalizeClass(_ctx.ns.e(\"container\"))\n              }, [_ctx.iconComponent && !_ctx.center && _ctx.hasMessage ? (openBlock(), createBlock(_component_el_icon, {\n                key: 0,\n                \"class\": normalizeClass([_ctx.ns.e(\"status\"), _ctx.typeClass])\n              }, {\n                \"default\": withCtx(function () {\n                  return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))];\n                }),\n                _: 1\n              }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), _ctx.hasMessage ? (openBlock(), createElementBlock(\"div\", {\n                key: 1,\n                \"class\": normalizeClass(_ctx.ns.e(\"message\"))\n              }, [renderSlot(_ctx.$slots, \"default\", {}, function () {\n                return [!_ctx.dangerouslyUseHTMLString ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.showInput ? \"label\" : \"p\"), {\n                  key: 0,\n                  \"for\": _ctx.showInput ? _ctx.inputId : void 0\n                }, {\n                  \"default\": withCtx(function () {\n                    return [createTextVNode(toDisplayString(!_ctx.dangerouslyUseHTMLString ? _ctx.message : \"\"), 1)];\n                  }),\n                  _: 1\n                }, 8, [\"for\"])) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.showInput ? \"label\" : \"p\"), {\n                  key: 1,\n                  \"for\": _ctx.showInput ? _ctx.inputId : void 0,\n                  innerHTML: _ctx.message\n                }, null, 8, [\"for\", \"innerHTML\"]))];\n              })], 2)) : createCommentVNode(\"v-if\", true)], 2), withDirectives(createElementVNode(\"div\", {\n                \"class\": normalizeClass(_ctx.ns.e(\"input\"))\n              }, [createVNode(_component_el_input, {\n                id: _ctx.inputId,\n                ref: \"inputRef\",\n                modelValue: _ctx.inputValue,\n                \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n                  return _ctx.inputValue = $event;\n                },\n                type: _ctx.inputType,\n                placeholder: _ctx.inputPlaceholder,\n                \"aria-invalid\": _ctx.validateError,\n                \"class\": normalizeClass({\n                  invalid: _ctx.validateError\n                }),\n                onKeydown: withKeys(_ctx.handleInputEnter, [\"enter\"])\n              }, null, 8, [\"id\", \"modelValue\", \"onUpdate:modelValue\", \"type\", \"placeholder\", \"aria-invalid\", \"class\", \"onKeydown\"]), createElementVNode(\"div\", {\n                \"class\": normalizeClass(_ctx.ns.e(\"errormsg\")),\n                style: normalizeStyle({\n                  visibility: !!_ctx.editorErrorMessage ? \"visible\" : \"hidden\"\n                })\n              }, toDisplayString(_ctx.editorErrorMessage), 7)], 2), [[vShow, _ctx.showInput]])], 10, [\"id\"]), createElementVNode(\"div\", {\n                \"class\": normalizeClass(_ctx.ns.e(\"btns\"))\n              }, [_ctx.showCancelButton ? (openBlock(), createBlock(_component_el_button, {\n                key: 0,\n                loading: _ctx.cancelButtonLoading,\n                \"loading-icon\": _ctx.cancelButtonLoadingIcon,\n                \"class\": normalizeClass([_ctx.cancelButtonClass]),\n                round: _ctx.roundButton,\n                size: _ctx.btnSize,\n                onClick: function onClick($event) {\n                  return _ctx.handleAction(\"cancel\");\n                },\n                onKeydown: withKeys(withModifiers(function ($event) {\n                  return _ctx.handleAction(\"cancel\");\n                }, [\"prevent\"]), [\"enter\"])\n              }, {\n                \"default\": withCtx(function () {\n                  return [createTextVNode(toDisplayString(_ctx.cancelButtonText || _ctx.t(\"el.messagebox.cancel\")), 1)];\n                }),\n                _: 1\n              }, 8, [\"loading\", \"loading-icon\", \"class\", \"round\", \"size\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"v-if\", true), withDirectives(createVNode(_component_el_button, {\n                ref: \"confirmRef\",\n                type: \"primary\",\n                loading: _ctx.confirmButtonLoading,\n                \"loading-icon\": _ctx.confirmButtonLoadingIcon,\n                \"class\": normalizeClass([_ctx.confirmButtonClasses]),\n                round: _ctx.roundButton,\n                disabled: _ctx.confirmButtonDisabled,\n                size: _ctx.btnSize,\n                onClick: function onClick($event) {\n                  return _ctx.handleAction(\"confirm\");\n                },\n                onKeydown: withKeys(withModifiers(function ($event) {\n                  return _ctx.handleAction(\"confirm\");\n                }, [\"prevent\"]), [\"enter\"])\n              }, {\n                \"default\": withCtx(function () {\n                  return [createTextVNode(toDisplayString(_ctx.confirmButtonText || _ctx.t(\"el.messagebox.confirm\")), 1)];\n                }),\n                _: 1\n              }, 8, [\"loading\", \"loading-icon\", \"class\", \"round\", \"disabled\", \"size\", \"onClick\", \"onKeydown\"]), [[vShow, _ctx.showConfirmButton]])], 2)], 14, [\"onClick\"])];\n            }),\n            _: 3\n          }, 8, [\"trapped\", \"focus-trap-el\", \"focus-start-el\", \"onReleaseRequested\"])], 42, [\"aria-label\", \"aria-describedby\", \"onClick\", \"onMousedown\", \"onMouseup\"])];\n        }),\n        _: 3\n      }, 8, [\"z-index\", \"overlay-class\", \"mask\"]), [[vShow, _ctx.visible]])];\n    }),\n    _: 3\n  }, 8, [\"onAfterLeave\"]);\n}\nvar MessageBoxConstructor = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"index.vue\"]]);\nexport { MessageBoxConstructor as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}