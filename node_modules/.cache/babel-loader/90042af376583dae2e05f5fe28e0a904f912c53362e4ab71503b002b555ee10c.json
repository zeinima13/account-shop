{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { createVNode, renderSlot, mergeProps } from 'vue';\nimport { get } from 'lodash-unified';\nimport { Alignment } from '../constants.mjs';\nimport { placeholderSign } from '../private.mjs';\nimport { enforceUnit, tryCall, componentToSlot } from '../utils.mjs';\nimport TableCell from '../components/cell.mjs';\nimport ExpandIcon from '../components/expand-icon.mjs';\nimport { isFunction, isObject } from '@vue/shared';\nvar CellRenderer = function CellRenderer(_ref, _ref2) {\n  var columns = _ref.columns,\n    column = _ref.column,\n    columnIndex = _ref.columnIndex,\n    depth = _ref.depth,\n    expandIconProps = _ref.expandIconProps,\n    isScrolling = _ref.isScrolling,\n    rowData = _ref.rowData,\n    rowIndex = _ref.rowIndex,\n    style = _ref.style,\n    expandedRowKeys = _ref.expandedRowKeys,\n    ns = _ref.ns,\n    _cellProps = _ref.cellProps,\n    expandColumnKey = _ref.expandColumnKey,\n    indentSize = _ref.indentSize,\n    iconSize = _ref.iconSize,\n    rowKey = _ref.rowKey;\n  var slots = _ref2.slots;\n  var cellStyle = enforceUnit(style);\n  if (column.placeholderSign === placeholderSign) {\n    return createVNode(\"div\", {\n      \"class\": ns.em(\"row-cell\", \"placeholder\"),\n      \"style\": cellStyle\n    }, null);\n  }\n  var cellRenderer = column.cellRenderer,\n    dataKey = column.dataKey,\n    dataGetter = column.dataGetter;\n  var cellData = isFunction(dataGetter) ? dataGetter({\n    columns: columns,\n    column: column,\n    columnIndex: columnIndex,\n    rowData: rowData,\n    rowIndex: rowIndex\n  }) : get(rowData, dataKey != null ? dataKey : \"\");\n  var extraCellProps = tryCall(_cellProps, {\n    cellData: cellData,\n    columns: columns,\n    column: column,\n    columnIndex: columnIndex,\n    rowIndex: rowIndex,\n    rowData: rowData\n  });\n  var cellProps = {\n    \"class\": ns.e(\"cell-text\"),\n    columns: columns,\n    column: column,\n    columnIndex: columnIndex,\n    cellData: cellData,\n    isScrolling: isScrolling,\n    rowData: rowData,\n    rowIndex: rowIndex\n  };\n  var columnCellRenderer = componentToSlot(cellRenderer);\n  var Cell = columnCellRenderer ? columnCellRenderer(cellProps) : renderSlot(slots, \"default\", cellProps, function () {\n    return [createVNode(TableCell, cellProps, null)];\n  });\n  var kls = [ns.e(\"row-cell\"), column[\"class\"], column.align === Alignment.CENTER && ns.is(\"align-center\"), column.align === Alignment.RIGHT && ns.is(\"align-right\")];\n  var expandable = rowIndex >= 0 && expandColumnKey && column.key === expandColumnKey;\n  var expanded = rowIndex >= 0 && expandedRowKeys.includes(rowData[rowKey]);\n  var IconOrPlaceholder;\n  var iconStyle = \"margin-inline-start: \".concat(depth * indentSize, \"px;\");\n  if (expandable) {\n    if (isObject(expandIconProps)) {\n      IconOrPlaceholder = createVNode(ExpandIcon, mergeProps(expandIconProps, {\n        \"class\": [ns.e(\"expand-icon\"), ns.is(\"expanded\", expanded)],\n        \"size\": iconSize,\n        \"expanded\": expanded,\n        \"style\": iconStyle,\n        \"expandable\": true\n      }), null);\n    } else {\n      IconOrPlaceholder = createVNode(\"div\", {\n        \"style\": [iconStyle, \"width: \".concat(iconSize, \"px; height: \").concat(iconSize, \"px;\")].join(\" \")\n      }, null);\n    }\n  }\n  return createVNode(\"div\", mergeProps({\n    \"class\": kls,\n    \"style\": cellStyle\n  }, extraCellProps, {\n    \"role\": \"cell\"\n  }), [IconOrPlaceholder, Cell]);\n};\nCellRenderer.inheritAttrs = false;\nvar Cell = CellRenderer;\nexport { Cell as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}