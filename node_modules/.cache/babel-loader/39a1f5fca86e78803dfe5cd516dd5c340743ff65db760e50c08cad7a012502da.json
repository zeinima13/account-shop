{"ast":null,"code":"import _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { isArray } from '@vue/shared';\nvar FontGap = 3;\nfunction prepareCanvas(width, height) {\n  var ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var canvas = document.createElement(\"canvas\");\n  var ctx = canvas.getContext(\"2d\");\n  var realWidth = width * ratio;\n  var realHeight = height * ratio;\n  canvas.setAttribute(\"width\", \"\".concat(realWidth, \"px\"));\n  canvas.setAttribute(\"height\", \"\".concat(realHeight, \"px\"));\n  ctx.save();\n  return [ctx, canvas, realWidth, realHeight];\n}\nfunction useClips() {\n  function getClips(content, rotate, ratio, width, height, font, gapX, gapY) {\n    var _prepareCanvas = prepareCanvas(width, height, ratio),\n      _prepareCanvas2 = _slicedToArray(_prepareCanvas, 4),\n      ctx = _prepareCanvas2[0],\n      canvas = _prepareCanvas2[1],\n      contentWidth = _prepareCanvas2[2],\n      contentHeight = _prepareCanvas2[3];\n    if (content instanceof HTMLImageElement) {\n      ctx.drawImage(content, 0, 0, contentWidth, contentHeight);\n    } else {\n      var color = font.color,\n        fontSize = font.fontSize,\n        fontStyle = font.fontStyle,\n        fontWeight = font.fontWeight,\n        fontFamily = font.fontFamily,\n        textAlign = font.textAlign,\n        textBaseline = font.textBaseline;\n      var mergedFontSize = Number(fontSize) * ratio;\n      ctx.font = \"\".concat(fontStyle, \" normal \").concat(fontWeight, \" \").concat(mergedFontSize, \"px/\").concat(height, \"px \").concat(fontFamily);\n      ctx.fillStyle = color;\n      ctx.textAlign = textAlign;\n      ctx.textBaseline = textBaseline;\n      var contents = isArray(content) ? content : [content];\n      contents == null ? void 0 : contents.forEach(function (item, index) {\n        ctx.fillText(item != null ? item : \"\", contentWidth / 2, index * (mergedFontSize + FontGap * ratio));\n      });\n    }\n    var angle = Math.PI / 180 * Number(rotate);\n    var maxSize = Math.max(width, height);\n    var _prepareCanvas3 = prepareCanvas(maxSize, maxSize, ratio),\n      _prepareCanvas4 = _slicedToArray(_prepareCanvas3, 3),\n      rCtx = _prepareCanvas4[0],\n      rCanvas = _prepareCanvas4[1],\n      realMaxSize = _prepareCanvas4[2];\n    rCtx.translate(realMaxSize / 2, realMaxSize / 2);\n    rCtx.rotate(angle);\n    if (contentWidth > 0 && contentHeight > 0) {\n      rCtx.drawImage(canvas, -contentWidth / 2, -contentHeight / 2);\n    }\n    function getRotatePos(x, y) {\n      var targetX = x * Math.cos(angle) - y * Math.sin(angle);\n      var targetY = x * Math.sin(angle) + y * Math.cos(angle);\n      return [targetX, targetY];\n    }\n    var left = 0;\n    var right = 0;\n    var top = 0;\n    var bottom = 0;\n    var halfWidth = contentWidth / 2;\n    var halfHeight = contentHeight / 2;\n    var points = [[0 - halfWidth, 0 - halfHeight], [0 + halfWidth, 0 - halfHeight], [0 + halfWidth, 0 + halfHeight], [0 - halfWidth, 0 + halfHeight]];\n    points.forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        x = _ref2[0],\n        y = _ref2[1];\n      var _getRotatePos = getRotatePos(x, y),\n        _getRotatePos2 = _slicedToArray(_getRotatePos, 2),\n        targetX = _getRotatePos2[0],\n        targetY = _getRotatePos2[1];\n      left = Math.min(left, targetX);\n      right = Math.max(right, targetX);\n      top = Math.min(top, targetY);\n      bottom = Math.max(bottom, targetY);\n    });\n    var cutLeft = left + realMaxSize / 2;\n    var cutTop = top + realMaxSize / 2;\n    var cutWidth = right - left;\n    var cutHeight = bottom - top;\n    var realGapX = gapX * ratio;\n    var realGapY = gapY * ratio;\n    var filledWidth = (cutWidth + realGapX) * 2;\n    var filledHeight = cutHeight + realGapY;\n    var _prepareCanvas5 = prepareCanvas(filledWidth, filledHeight),\n      _prepareCanvas6 = _slicedToArray(_prepareCanvas5, 2),\n      fCtx = _prepareCanvas6[0],\n      fCanvas = _prepareCanvas6[1];\n    function drawImg() {\n      var targetX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var targetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      fCtx.drawImage(rCanvas, cutLeft, cutTop, cutWidth, cutHeight, targetX, targetY, cutWidth, cutHeight);\n    }\n    drawImg();\n    drawImg(cutWidth + realGapX, -cutHeight / 2 - realGapY / 2);\n    drawImg(cutWidth + realGapX, +cutHeight / 2 + realGapY / 2);\n    return [fCanvas.toDataURL(), filledWidth / ratio, filledHeight / ratio];\n  }\n  return getClips;\n}\nexport { FontGap, useClips as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}