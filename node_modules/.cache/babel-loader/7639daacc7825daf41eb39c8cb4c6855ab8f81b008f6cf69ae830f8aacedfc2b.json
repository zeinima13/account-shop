{"ast":null,"code":"import \"core-js/modules/es.number.parse-int.js\";\nimport { inject, ref, h } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport { getCell, getColumnByCell, createTablePopper, removePopper } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport { hasClass, addClass, removeClass } from '../../../../utils/dom/style.mjs';\nfunction isGreaterThan(a, b) {\n  var epsilon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.03;\n  return a - b > epsilon;\n}\nfunction useEvents(props) {\n  var parent = inject(TABLE_INJECTION_KEY);\n  var tooltipContent = ref(\"\");\n  var tooltipTrigger = ref(h(\"div\"));\n  var handleEvent = function handleEvent(event, row, name) {\n    var _a;\n    var table = parent;\n    var cell = getCell(event);\n    var column;\n    var namespace = (_a = table == null ? void 0 : table.vnode.el) == null ? void 0 : _a.dataset.prefix;\n    if (cell) {\n      column = getColumnByCell({\n        columns: props.store.states.columns.value\n      }, cell, namespace);\n      if (column) {\n        table == null ? void 0 : table.emit(\"cell-\".concat(name), row, column, cell, event);\n      }\n    }\n    table == null ? void 0 : table.emit(\"row-\".concat(name), row, column, event);\n  };\n  var handleDoubleClick = function handleDoubleClick(event, row) {\n    handleEvent(event, row, \"dblclick\");\n  };\n  var handleClick = function handleClick(event, row) {\n    props.store.commit(\"setCurrentRow\", row);\n    handleEvent(event, row, \"click\");\n  };\n  var handleContextMenu = function handleContextMenu(event, row) {\n    handleEvent(event, row, \"contextmenu\");\n  };\n  var handleMouseEnter = debounce(function (index) {\n    props.store.commit(\"setHoverRow\", index);\n  }, 30);\n  var handleMouseLeave = debounce(function () {\n    props.store.commit(\"setHoverRow\", null);\n  }, 30);\n  var getPadding = function getPadding(el) {\n    var style = window.getComputedStyle(el, null);\n    var paddingLeft = Number.parseInt(style.paddingLeft, 10) || 0;\n    var paddingRight = Number.parseInt(style.paddingRight, 10) || 0;\n    var paddingTop = Number.parseInt(style.paddingTop, 10) || 0;\n    var paddingBottom = Number.parseInt(style.paddingBottom, 10) || 0;\n    return {\n      left: paddingLeft,\n      right: paddingRight,\n      top: paddingTop,\n      bottom: paddingBottom\n    };\n  };\n  var toggleRowClassByCell = function toggleRowClassByCell(rowSpan, event, toggle) {\n    var node = event.target.parentNode;\n    while (rowSpan > 1) {\n      node = node == null ? void 0 : node.nextSibling;\n      if (!node || node.nodeName !== \"TR\") break;\n      toggle(node, \"hover-row hover-fixed-row\");\n      rowSpan--;\n    }\n  };\n  var handleCellMouseEnter = function handleCellMouseEnter(event, row, tooltipOptions) {\n    var _a, _b, _c;\n    var table = parent;\n    var cell = getCell(event);\n    var namespace = (_a = table == null ? void 0 : table.vnode.el) == null ? void 0 : _a.dataset.prefix;\n    if (cell) {\n      var column = getColumnByCell({\n        columns: props.store.states.columns.value\n      }, cell, namespace);\n      if (cell.rowSpan > 1) {\n        toggleRowClassByCell(cell.rowSpan, event, addClass);\n      }\n      var hoverState = table.hoverState = {\n        cell: cell,\n        column: column,\n        row: row\n      };\n      table == null ? void 0 : table.emit(\"cell-mouse-enter\", hoverState.row, hoverState.column, hoverState.cell, event);\n    }\n    if (!tooltipOptions) {\n      return;\n    }\n    var cellChild = event.target.querySelector(\".cell\");\n    if (!(hasClass(cellChild, \"\".concat(namespace, \"-tooltip\")) && cellChild.childNodes.length)) {\n      return;\n    }\n    var range = document.createRange();\n    range.setStart(cellChild, 0);\n    range.setEnd(cellChild, cellChild.childNodes.length);\n    var _range$getBoundingCli = range.getBoundingClientRect(),\n      rangeWidth = _range$getBoundingCli.width,\n      rangeHeight = _range$getBoundingCli.height;\n    var _cellChild$getBoundin = cellChild.getBoundingClientRect(),\n      cellChildWidth = _cellChild$getBoundin.width,\n      cellChildHeight = _cellChild$getBoundin.height;\n    var _getPadding = getPadding(cellChild),\n      top = _getPadding.top,\n      left = _getPadding.left,\n      right = _getPadding.right,\n      bottom = _getPadding.bottom;\n    var horizontalPadding = left + right;\n    var verticalPadding = top + bottom;\n    if (isGreaterThan(rangeWidth + horizontalPadding, cellChildWidth) || isGreaterThan(rangeHeight + verticalPadding, cellChildHeight) || isGreaterThan(cellChild.scrollWidth, cellChildWidth)) {\n      createTablePopper(tooltipOptions, cell.innerText || cell.textContent, cell, table);\n    } else if (((_b = removePopper) == null ? void 0 : _b.trigger) === cell) {\n      (_c = removePopper) == null ? void 0 : _c();\n    }\n  };\n  var handleCellMouseLeave = function handleCellMouseLeave(event) {\n    var cell = getCell(event);\n    if (!cell) return;\n    if (cell.rowSpan > 1) {\n      toggleRowClassByCell(cell.rowSpan, event, removeClass);\n    }\n    var oldHoverState = parent == null ? void 0 : parent.hoverState;\n    parent == null ? void 0 : parent.emit(\"cell-mouse-leave\", oldHoverState == null ? void 0 : oldHoverState.row, oldHoverState == null ? void 0 : oldHoverState.column, oldHoverState == null ? void 0 : oldHoverState.cell, event);\n  };\n  return {\n    handleDoubleClick: handleDoubleClick,\n    handleClick: handleClick,\n    handleContextMenu: handleContextMenu,\n    handleMouseEnter: handleMouseEnter,\n    handleMouseLeave: handleMouseLeave,\n    handleCellMouseEnter: handleCellMouseEnter,\n    handleCellMouseLeave: handleCellMouseLeave,\n    tooltipContent: tooltipContent,\n    tooltipTrigger: tooltipTrigger\n  };\n}\nexport { useEvents as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}