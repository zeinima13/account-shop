{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { defineComponent, inject, ref, computed, openBlock, createBlock, Transition, unref, withCtx, createElementBlock, normalizeClass, createElementVNode, createVNode, toDisplayString, createCommentVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport { panelTimePickerProps } from '../props/panel-time-picker.mjs';\nimport { useTimePanel } from '../composables/use-time-panel.mjs';\nimport { useOldValue, buildAvailableTimeSlotGetter } from '../composables/use-time-picker.mjs';\nimport TimeSpinner from './basic-time-spinner.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { isUndefined } from '../../../../utils/types.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria.mjs';\nvar _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"panel-time-pick\",\n  props: panelTimePickerProps,\n  emits: [\"pick\", \"select-range\", \"set-picker-option\"],\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var pickerBase = inject(\"EP_PICKER_BASE\");\n    var _pickerBase$props = pickerBase.props,\n      arrowControl = _pickerBase$props.arrowControl,\n      disabledHours = _pickerBase$props.disabledHours,\n      disabledMinutes = _pickerBase$props.disabledMinutes,\n      disabledSeconds = _pickerBase$props.disabledSeconds,\n      defaultValue = _pickerBase$props.defaultValue;\n    var _buildAvailableTimeSl = buildAvailableTimeSlotGetter(disabledHours, disabledMinutes, disabledSeconds),\n      getAvailableHours = _buildAvailableTimeSl.getAvailableHours,\n      getAvailableMinutes = _buildAvailableTimeSl.getAvailableMinutes,\n      getAvailableSeconds = _buildAvailableTimeSl.getAvailableSeconds;\n    var ns = useNamespace(\"time\");\n    var _useLocale = useLocale(),\n      t = _useLocale.t,\n      lang = _useLocale.lang;\n    var selectionRange = ref([0, 2]);\n    var oldValue = useOldValue(props);\n    var transitionName = computed(function () {\n      return isUndefined(props.actualVisible) ? \"\".concat(ns.namespace.value, \"-zoom-in-top\") : \"\";\n    });\n    var showSeconds = computed(function () {\n      return props.format.includes(\"ss\");\n    });\n    var amPmMode = computed(function () {\n      if (props.format.includes(\"A\")) return \"A\";\n      if (props.format.includes(\"a\")) return \"a\";\n      return \"\";\n    });\n    var isValidValue = function isValidValue(_date) {\n      var parsedDate = dayjs(_date).locale(lang.value);\n      var result = getRangeAvailableTime(parsedDate);\n      return parsedDate.isSame(result);\n    };\n    var handleCancel = function handleCancel() {\n      emit(\"pick\", oldValue.value, false);\n    };\n    var handleConfirm = function handleConfirm() {\n      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var first = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (first) return;\n      emit(\"pick\", props.parsedValue, visible);\n    };\n    var handleChange = function handleChange(_date) {\n      if (!props.visible) {\n        return;\n      }\n      var result = getRangeAvailableTime(_date).millisecond(0);\n      emit(\"pick\", result, true);\n    };\n    var setSelectionRange = function setSelectionRange(start, end) {\n      emit(\"select-range\", start, end);\n      selectionRange.value = [start, end];\n    };\n    var changeSelectionRange = function changeSelectionRange(step) {\n      var list = [0, 3].concat(showSeconds.value ? [6] : []);\n      var mapping = [\"hours\", \"minutes\"].concat(showSeconds.value ? [\"seconds\"] : []);\n      var index = list.indexOf(selectionRange.value[0]);\n      var next = (index + step + list.length) % list.length;\n      timePickerOptions[\"start_emitSelectRange\"](mapping[next]);\n    };\n    var handleKeydown = function handleKeydown(event) {\n      var code = event.code;\n      var left = EVENT_CODE.left,\n        right = EVENT_CODE.right,\n        up = EVENT_CODE.up,\n        down = EVENT_CODE.down;\n      if ([left, right].includes(code)) {\n        var step = code === left ? -1 : 1;\n        changeSelectionRange(step);\n        event.preventDefault();\n        return;\n      }\n      if ([up, down].includes(code)) {\n        var _step = code === up ? -1 : 1;\n        timePickerOptions[\"start_scrollDown\"](_step);\n        event.preventDefault();\n        return;\n      }\n    };\n    var _useTimePanel = useTimePanel({\n        getAvailableHours: getAvailableHours,\n        getAvailableMinutes: getAvailableMinutes,\n        getAvailableSeconds: getAvailableSeconds\n      }),\n      timePickerOptions = _useTimePanel.timePickerOptions,\n      onSetOption = _useTimePanel.onSetOption,\n      getAvailableTime = _useTimePanel.getAvailableTime;\n    var getRangeAvailableTime = function getRangeAvailableTime(date) {\n      return getAvailableTime(date, props.datetimeRole || \"\", true);\n    };\n    var parseUserInput = function parseUserInput(value) {\n      if (!value) return null;\n      return dayjs(value, props.format).locale(lang.value);\n    };\n    var formatToString = function formatToString(value) {\n      if (!value) return null;\n      return value.format(props.format);\n    };\n    var getDefaultValue = function getDefaultValue() {\n      return dayjs(defaultValue).locale(lang.value);\n    };\n    emit(\"set-picker-option\", [\"isValidValue\", isValidValue]);\n    emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    emit(\"set-picker-option\", [\"parseUserInput\", parseUserInput]);\n    emit(\"set-picker-option\", [\"handleKeydownInput\", handleKeydown]);\n    emit(\"set-picker-option\", [\"getRangeAvailableTime\", getRangeAvailableTime]);\n    emit(\"set-picker-option\", [\"getDefaultValue\", getDefaultValue]);\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(Transition, {\n        name: unref(transitionName)\n      }, {\n        \"default\": withCtx(function () {\n          return [_ctx.actualVisible || _ctx.visible ? (openBlock(), createElementBlock(\"div\", {\n            key: 0,\n            \"class\": normalizeClass(unref(ns).b(\"panel\"))\n          }, [createElementVNode(\"div\", {\n            \"class\": normalizeClass([unref(ns).be(\"panel\", \"content\"), {\n              \"has-seconds\": unref(showSeconds)\n            }])\n          }, [createVNode(TimeSpinner, {\n            ref: \"spinner\",\n            role: _ctx.datetimeRole || \"start\",\n            \"arrow-control\": unref(arrowControl),\n            \"show-seconds\": unref(showSeconds),\n            \"am-pm-mode\": unref(amPmMode),\n            \"spinner-date\": _ctx.parsedValue,\n            \"disabled-hours\": unref(disabledHours),\n            \"disabled-minutes\": unref(disabledMinutes),\n            \"disabled-seconds\": unref(disabledSeconds),\n            onChange: handleChange,\n            onSetOption: unref(onSetOption),\n            onSelectRange: setSelectionRange\n          }, null, 8, [\"role\", \"arrow-control\", \"show-seconds\", \"am-pm-mode\", \"spinner-date\", \"disabled-hours\", \"disabled-minutes\", \"disabled-seconds\", \"onSetOption\"])], 2), createElementVNode(\"div\", {\n            \"class\": normalizeClass(unref(ns).be(\"panel\", \"footer\"))\n          }, [createElementVNode(\"button\", {\n            type: \"button\",\n            \"class\": normalizeClass([unref(ns).be(\"panel\", \"btn\"), \"cancel\"]),\n            onClick: handleCancel\n          }, toDisplayString(unref(t)(\"el.datepicker.cancel\")), 3), createElementVNode(\"button\", {\n            type: \"button\",\n            \"class\": normalizeClass([unref(ns).be(\"panel\", \"btn\"), \"confirm\"]),\n            onClick: function onClick($event) {\n              return handleConfirm();\n            }\n          }, toDisplayString(unref(t)(\"el.datepicker.confirm\")), 11, [\"onClick\"])], 2)], 2)) : createCommentVNode(\"v-if\", true)];\n        }),\n        _: 1\n      }, 8, [\"name\"]);\n    };\n  }\n});\nvar TimePickPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"panel-time-pick.vue\"]]);\nexport { TimePickPanel as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}