{"ast":null,"code":"import _typeof from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport createGrid from '../builders/build-grid.mjs';\nimport { AUTO_ALIGNMENT, CENTERED_ALIGNMENT, END_ALIGNMENT, START_ALIGNMENT, SMART_ALIGNMENT } from '../defaults.mjs';\nimport { isNumber } from '../../../../utils/types.mjs';\nimport { throwError } from '../../../../utils/error.mjs';\nvar SCOPE = \"ElFixedSizeGrid\";\nvar FixedSizeGrid = createGrid({\n  name: \"ElFixedSizeGrid\",\n  getColumnPosition: function getColumnPosition(_ref, index) {\n    var columnWidth = _ref.columnWidth;\n    return [columnWidth, index * columnWidth];\n  },\n  getRowPosition: function getRowPosition(_ref2, index) {\n    var rowHeight = _ref2.rowHeight;\n    return [rowHeight, index * rowHeight];\n  },\n  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref3) {\n    var totalRow = _ref3.totalRow,\n      rowHeight = _ref3.rowHeight;\n    return rowHeight * totalRow;\n  },\n  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref4) {\n    var totalColumn = _ref4.totalColumn,\n      columnWidth = _ref4.columnWidth;\n    return columnWidth * totalColumn;\n  },\n  getColumnOffset: function getColumnOffset(_ref5, columnIndex, alignment, scrollLeft, _, scrollBarWidth) {\n    var totalColumn = _ref5.totalColumn,\n      columnWidth = _ref5.columnWidth,\n      width = _ref5.width;\n    width = Number(width);\n    var lastColumnOffset = Math.max(0, totalColumn * columnWidth - width);\n    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollBarWidth + columnWidth);\n    if (alignment === \"smart\") {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        alignment = AUTO_ALIGNMENT;\n      } else {\n        alignment = CENTERED_ALIGNMENT;\n      }\n    }\n    switch (alignment) {\n      case START_ALIGNMENT:\n        return maxOffset;\n      case END_ALIGNMENT:\n        return minOffset;\n      case CENTERED_ALIGNMENT:\n        {\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n          if (middleOffset < Math.ceil(width / 2)) {\n            return 0;\n          } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n            return lastColumnOffset;\n          } else {\n            return middleOffset;\n          }\n        }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getRowOffset: function getRowOffset(_ref6, rowIndex, align, scrollTop, _, scrollBarWidth) {\n    var rowHeight = _ref6.rowHeight,\n      height = _ref6.height,\n      totalRow = _ref6.totalRow;\n    height = Number(height);\n    var lastRowOffset = Math.max(0, totalRow * rowHeight - height);\n    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollBarWidth + rowHeight);\n    if (align === SMART_ALIGNMENT) {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = AUTO_ALIGNMENT;\n      } else {\n        align = CENTERED_ALIGNMENT;\n      }\n    }\n    switch (align) {\n      case START_ALIGNMENT:\n        return maxOffset;\n      case END_ALIGNMENT:\n        return minOffset;\n      case CENTERED_ALIGNMENT:\n        {\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n          if (middleOffset < Math.ceil(height / 2)) {\n            return 0;\n          } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n            return lastRowOffset;\n          } else {\n            return middleOffset;\n          }\n        }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref7, scrollLeft) {\n    var columnWidth = _ref7.columnWidth,\n      totalColumn = _ref7.totalColumn;\n    return Math.max(0, Math.min(totalColumn - 1, Math.floor(scrollLeft / columnWidth)));\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref8, startIndex, scrollLeft) {\n    var columnWidth = _ref8.columnWidth,\n      totalColumn = _ref8.totalColumn,\n      width = _ref8.width;\n    var left = startIndex * columnWidth;\n    var visibleColumnsCount = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(totalColumn - 1, startIndex + visibleColumnsCount - 1));\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref9, scrollTop) {\n    var rowHeight = _ref9.rowHeight,\n      totalRow = _ref9.totalRow;\n    return Math.max(0, Math.min(totalRow - 1, Math.floor(scrollTop / rowHeight)));\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref10, startIndex, scrollTop) {\n    var rowHeight = _ref10.rowHeight,\n      totalRow = _ref10.totalRow,\n      height = _ref10.height;\n    var top = startIndex * rowHeight;\n    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(totalRow - 1, startIndex + numVisibleRows - 1));\n  },\n  initCache: function initCache() {\n    return void 0;\n  },\n  clearCache: true,\n  validateProps: function validateProps(_ref11) {\n    var columnWidth = _ref11.columnWidth,\n      rowHeight = _ref11.rowHeight;\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!isNumber(columnWidth)) {\n        throwError(SCOPE, \"\\n          \\\"columnWidth\\\" must be passed as number,\\n            instead \".concat(_typeof(columnWidth), \" was given.\\n        \"));\n      }\n      if (!isNumber(rowHeight)) {\n        throwError(SCOPE, \"\\n          \\\"columnWidth\\\" must be passed as number,\\n            instead \".concat(_typeof(rowHeight), \" was given.\\n        \"));\n      }\n    }\n  }\n});\nexport { FixedSizeGrid as default };","map":{"version":3,"names":["SCOPE","FixedSizeGrid","createGrid","name","getColumnPosition","_ref","index","columnWidth","getRowPosition","_ref2","rowHeight","getEstimatedTotalHeight","_ref3","totalRow","getEstimatedTotalWidth","_ref4","totalColumn","getColumnOffset","_ref5","columnIndex","alignment","scrollLeft","_","scrollBarWidth","width","Number","lastColumnOffset","Math","max","maxOffset","min","minOffset","AUTO_ALIGNMENT","CENTERED_ALIGNMENT","START_ALIGNMENT","END_ALIGNMENT","middleOffset","round","ceil","floor","getRowOffset","_ref6","rowIndex","align","scrollTop","height","lastRowOffset","SMART_ALIGNMENT","getColumnStartIndexForOffset","_ref7","getColumnStopIndexForStartIndex","_ref8","startIndex","left","visibleColumnsCount","getRowStartIndexForOffset","_ref9","getRowStopIndexForStartIndex","_ref10","top","numVisibleRows","initCache","clearCache","validateProps","_ref11","process","env","NODE_ENV","isNumber","throwError","concat","_typeof"],"sources":["../../../../../../../packages/components/virtual-list/src/components/fixed-size-grid.ts"],"sourcesContent":["import { isNumber, throwError } from '@element-plus/utils'\nimport createGrid from '../builders/build-grid'\n\nimport {\n  AUTO_ALIGNMENT,\n  CENTERED_ALIGNMENT,\n  END_ALIGNMENT,\n  SMART_ALIGNMENT,\n  START_ALIGNMENT,\n} from '../defaults'\n\nconst SCOPE = 'ElFixedSizeGrid'\n\nconst FixedSizeGrid = createGrid({\n  name: 'ElFixedSizeGrid',\n  getColumnPosition: ({ columnWidth }, index) => [\n    columnWidth as number,\n    index * (columnWidth as number),\n  ],\n\n  getRowPosition: ({ rowHeight }, index) => [\n    rowHeight as number,\n    index * (rowHeight as number),\n  ],\n\n  getEstimatedTotalHeight: ({ totalRow, rowHeight }) =>\n    (rowHeight as number) * totalRow,\n\n  getEstimatedTotalWidth: ({ totalColumn, columnWidth }) =>\n    (columnWidth as number) * totalColumn,\n\n  getColumnOffset: (\n    { totalColumn, columnWidth, width },\n    columnIndex,\n    alignment,\n    scrollLeft,\n    _,\n    scrollBarWidth\n  ) => {\n    width = Number(width)\n    const lastColumnOffset = Math.max(\n      0,\n      totalColumn * (columnWidth as number) - width\n    )\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * (columnWidth as number)\n    )\n    const minOffset = Math.max(\n      0,\n      columnIndex * (columnWidth as number) -\n        width +\n        scrollBarWidth +\n        (columnWidth as number)\n    )\n\n    if (alignment === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        alignment = AUTO_ALIGNMENT\n      } else {\n        alignment = CENTERED_ALIGNMENT\n      }\n    }\n\n    switch (alignment) {\n      case START_ALIGNMENT:\n        return maxOffset\n      case END_ALIGNMENT:\n        return minOffset\n      case CENTERED_ALIGNMENT: {\n        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2)\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset\n        } else {\n          return middleOffset\n        }\n      }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft\n        } else if (minOffset > maxOffset) {\n          return minOffset\n        } else if (scrollLeft < minOffset) {\n          return minOffset\n        } else {\n          return maxOffset\n        }\n    }\n  },\n\n  getRowOffset: (\n    { rowHeight, height, totalRow },\n    rowIndex,\n    align,\n    scrollTop,\n    _,\n    scrollBarWidth\n  ): number => {\n    height = Number(height)\n    const lastRowOffset = Math.max(0, totalRow * (rowHeight as number) - height)\n    const maxOffset = Math.min(lastRowOffset, rowIndex * (rowHeight as number))\n    const minOffset = Math.max(\n      0,\n      rowIndex * (rowHeight as number) -\n        height +\n        scrollBarWidth +\n        (rowHeight as number)\n    )\n\n    if (align === SMART_ALIGNMENT) {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = AUTO_ALIGNMENT\n      } else {\n        align = CENTERED_ALIGNMENT\n      }\n    }\n\n    switch (align) {\n      case START_ALIGNMENT:\n        return maxOffset\n      case END_ALIGNMENT:\n        return minOffset\n      case CENTERED_ALIGNMENT: {\n        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2)\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset\n        } else {\n          return middleOffset\n        }\n      }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop\n        } else if (minOffset > maxOffset) {\n          return minOffset\n        } else if (scrollTop < minOffset) {\n          return minOffset\n        } else {\n          return maxOffset\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: ({ columnWidth, totalColumn }, scrollLeft) =>\n    Math.max(\n      0,\n      Math.min(\n        totalColumn - 1,\n        Math.floor(scrollLeft / (columnWidth as number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, totalColumn, width },\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * (columnWidth as number)\n    const visibleColumnsCount = Math.ceil(\n      ((width as number) + scrollLeft - left) / (columnWidth as number)\n    )\n    return Math.max(\n      0,\n      Math.min(totalColumn - 1, startIndex + visibleColumnsCount - 1)\n    )\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, totalRow },\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(totalRow - 1, Math.floor(scrollTop / (rowHeight as number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, totalRow, height },\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * (rowHeight as number)\n    const numVisibleRows = Math.ceil(\n      ((height as number) + scrollTop - top) / (rowHeight as number)\n    )\n    return Math.max(\n      0,\n      Math.min(\n        totalRow - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    )\n  },\n  /**\n   * Fixed size grid does not need this cache\n   * Using any to bypass it, TODO: Using type inference to fix this.\n   */\n  initCache: () => undefined as any,\n\n  clearCache: true,\n\n  validateProps: ({ columnWidth, rowHeight }) => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!isNumber(columnWidth)) {\n        throwError(\n          SCOPE,\n          `\n          \"columnWidth\" must be passed as number,\n            instead ${typeof columnWidth} was given.\n        `\n        )\n      }\n\n      if (!isNumber(rowHeight)) {\n        throwError(\n          SCOPE,\n          `\n          \"columnWidth\" must be passed as number,\n            instead ${typeof rowHeight} was given.\n        `\n        )\n      }\n    }\n  },\n})\n\nexport default FixedSizeGrid\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}