{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.fixed.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport { inject } from 'vue';\nimport { getFixedColumnOffset, ensurePosition, getFixedColumnsClass } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { isFunction, isString, isArray, isObject } from '@vue/shared';\nfunction useStyles(props) {\n  var parent = inject(TABLE_INJECTION_KEY);\n  var ns = useNamespace(\"table\");\n  var getRowStyle = function getRowStyle(row, rowIndex) {\n    var rowStyle = parent == null ? void 0 : parent.props.rowStyle;\n    if (isFunction(rowStyle)) {\n      return rowStyle.call(null, {\n        row: row,\n        rowIndex: rowIndex\n      });\n    }\n    return rowStyle || null;\n  };\n  var getRowClass = function getRowClass(row, rowIndex) {\n    var classes = [ns.e(\"row\")];\n    if ((parent == null ? void 0 : parent.props.highlightCurrentRow) && row === props.store.states.currentRow.value) {\n      classes.push(\"current-row\");\n    }\n    if (props.stripe && rowIndex % 2 === 1) {\n      classes.push(ns.em(\"row\", \"striped\"));\n    }\n    var rowClassName = parent == null ? void 0 : parent.props.rowClassName;\n    if (isString(rowClassName)) {\n      classes.push(rowClassName);\n    } else if (isFunction(rowClassName)) {\n      classes.push(rowClassName.call(null, {\n        row: row,\n        rowIndex: rowIndex\n      }));\n    }\n    return classes;\n  };\n  var getCellStyle = function getCellStyle(rowIndex, columnIndex, row, column) {\n    var cellStyle = parent == null ? void 0 : parent.props.cellStyle;\n    var cellStyles = cellStyle != null ? cellStyle : {};\n    if (isFunction(cellStyle)) {\n      cellStyles = cellStyle.call(null, {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        row: row,\n        column: column\n      });\n    }\n    var fixedStyle = getFixedColumnOffset(columnIndex, props == null ? void 0 : props.fixed, props.store);\n    ensurePosition(fixedStyle, \"left\");\n    ensurePosition(fixedStyle, \"right\");\n    return Object.assign({}, cellStyles, fixedStyle);\n  };\n  var getCellClass = function getCellClass(rowIndex, columnIndex, row, column, offset) {\n    var fixedClasses = getFixedColumnsClass(ns.b(), columnIndex, props == null ? void 0 : props.fixed, props.store, void 0, offset);\n    var classes = [column.id, column.align, column.className].concat(_toConsumableArray(fixedClasses));\n    var cellClassName = parent == null ? void 0 : parent.props.cellClassName;\n    if (isString(cellClassName)) {\n      classes.push(cellClassName);\n    } else if (isFunction(cellClassName)) {\n      classes.push(cellClassName.call(null, {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        row: row,\n        column: column\n      }));\n    }\n    classes.push(ns.e(\"cell\"));\n    return classes.filter(function (className) {\n      return Boolean(className);\n    }).join(\" \");\n  };\n  var getSpan = function getSpan(row, column, rowIndex, columnIndex) {\n    var rowspan = 1;\n    var colspan = 1;\n    var fn = parent == null ? void 0 : parent.props.spanMethod;\n    if (isFunction(fn)) {\n      var result = fn({\n        row: row,\n        column: column,\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      });\n      if (isArray(result)) {\n        rowspan = result[0];\n        colspan = result[1];\n      } else if (isObject(result)) {\n        rowspan = result.rowspan;\n        colspan = result.colspan;\n      }\n    }\n    return {\n      rowspan: rowspan,\n      colspan: colspan\n    };\n  };\n  var getColspanRealWidth = function getColspanRealWidth(columns, colspan, index) {\n    if (colspan < 1) {\n      return columns[index].realWidth;\n    }\n    var widthArr = columns.map(function (_ref) {\n      var realWidth = _ref.realWidth,\n        width = _ref.width;\n      return realWidth || width;\n    }).slice(index, index + colspan);\n    return Number(widthArr.reduce(function (acc, width) {\n      return Number(acc) + Number(width);\n    }, -1));\n  };\n  return {\n    getRowStyle: getRowStyle,\n    getRowClass: getRowClass,\n    getCellStyle: getCellStyle,\n    getCellClass: getCellClass,\n    getSpan: getSpan,\n    getColspanRealWidth: getColspanRealWidth\n  };\n}\nexport { useStyles as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}