{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { getCurrentInstance, computed, watch, onMounted } from 'vue';\nimport { buildProp, definePropType } from '../../utils/vue/props/runtime.mjs';\nimport { isBoolean } from '../../utils/types.mjs';\nimport { isFunction } from '@vue/shared';\nimport { isClient } from '@vueuse/core';\nvar _prop = buildProp({\n  type: definePropType(Boolean),\n  \"default\": null\n});\nvar _event = buildProp({\n  type: definePropType(Function)\n});\nvar createModelToggleComposable = function createModelToggleComposable(name) {\n  var updateEventKey = \"update:\".concat(name);\n  var updateEventKeyRaw = \"onUpdate:\".concat(name);\n  var useModelToggleEmits2 = [updateEventKey];\n  var useModelToggleProps2 = _defineProperty(_defineProperty({}, name, _prop), updateEventKeyRaw, _event);\n  var useModelToggle2 = function useModelToggle2(_ref) {\n    var indicator = _ref.indicator,\n      toggleReason = _ref.toggleReason,\n      shouldHideWhenRouteChanges = _ref.shouldHideWhenRouteChanges,\n      shouldProceed = _ref.shouldProceed,\n      onShow = _ref.onShow,\n      onHide = _ref.onHide;\n    var instance = getCurrentInstance();\n    var emit = instance.emit;\n    var props = instance.props;\n    var hasUpdateHandler = computed(function () {\n      return isFunction(props[updateEventKeyRaw]);\n    });\n    var isModelBindingAbsent = computed(function () {\n      return props[name] === null;\n    });\n    var doShow = function doShow(event) {\n      if (indicator.value === true) {\n        return;\n      }\n      indicator.value = true;\n      if (toggleReason) {\n        toggleReason.value = event;\n      }\n      if (isFunction(onShow)) {\n        onShow(event);\n      }\n    };\n    var doHide = function doHide(event) {\n      if (indicator.value === false) {\n        return;\n      }\n      indicator.value = false;\n      if (toggleReason) {\n        toggleReason.value = event;\n      }\n      if (isFunction(onHide)) {\n        onHide(event);\n      }\n    };\n    var show = function show(event) {\n      if (props.disabled === true || isFunction(shouldProceed) && !shouldProceed()) return;\n      var shouldEmit = hasUpdateHandler.value && isClient;\n      if (shouldEmit) {\n        emit(updateEventKey, true);\n      }\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doShow(event);\n      }\n    };\n    var hide = function hide(event) {\n      if (props.disabled === true || !isClient) return;\n      var shouldEmit = hasUpdateHandler.value && isClient;\n      if (shouldEmit) {\n        emit(updateEventKey, false);\n      }\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doHide(event);\n      }\n    };\n    var onChange = function onChange(val) {\n      if (!isBoolean(val)) return;\n      if (props.disabled && val) {\n        if (hasUpdateHandler.value) {\n          emit(updateEventKey, false);\n        }\n      } else if (indicator.value !== val) {\n        if (val) {\n          doShow();\n        } else {\n          doHide();\n        }\n      }\n    };\n    var toggle = function toggle() {\n      if (indicator.value) {\n        hide();\n      } else {\n        show();\n      }\n    };\n    watch(function () {\n      return props[name];\n    }, onChange);\n    if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {\n      watch(function () {\n        return _objectSpread({}, instance.proxy.$route);\n      }, function () {\n        if (shouldHideWhenRouteChanges.value && indicator.value) {\n          hide();\n        }\n      });\n    }\n    onMounted(function () {\n      onChange(props[name]);\n    });\n    return {\n      hide: hide,\n      show: show,\n      toggle: toggle,\n      hasUpdateHandler: hasUpdateHandler\n    };\n  };\n  return {\n    useModelToggle: useModelToggle2,\n    useModelToggleProps: useModelToggleProps2,\n    useModelToggleEmits: useModelToggleEmits2\n  };\n};\nvar _createModelToggleCom = createModelToggleComposable(\"modelValue\"),\n  useModelToggle = _createModelToggleCom.useModelToggle,\n  useModelToggleProps = _createModelToggleCom.useModelToggleProps,\n  useModelToggleEmits = _createModelToggleCom.useModelToggleEmits;\nexport { createModelToggleComposable, useModelToggle, useModelToggleEmits, useModelToggleProps };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}