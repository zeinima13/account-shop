{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { inject, computed, h } from 'vue';\nimport { merge } from 'lodash-unified';\nimport { getRowIdentity } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport useEvents from './events-helper.mjs';\nimport useStyles from './styles-helper.mjs';\nimport TdWrapper from './td-wrapper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { isBoolean, isPropAbsent } from '../../../../utils/types.mjs';\nfunction useRender(props) {\n  var parent = inject(TABLE_INJECTION_KEY);\n  var ns = useNamespace(\"table\");\n  var _useEvents = useEvents(props),\n    handleDoubleClick = _useEvents.handleDoubleClick,\n    handleClick = _useEvents.handleClick,\n    handleContextMenu = _useEvents.handleContextMenu,\n    handleMouseEnter = _useEvents.handleMouseEnter,\n    handleMouseLeave = _useEvents.handleMouseLeave,\n    handleCellMouseEnter = _useEvents.handleCellMouseEnter,\n    handleCellMouseLeave = _useEvents.handleCellMouseLeave,\n    tooltipContent = _useEvents.tooltipContent,\n    tooltipTrigger = _useEvents.tooltipTrigger;\n  var _useStyles = useStyles(props),\n    getRowStyle = _useStyles.getRowStyle,\n    getRowClass = _useStyles.getRowClass,\n    getCellStyle = _useStyles.getCellStyle,\n    getCellClass = _useStyles.getCellClass,\n    getSpan = _useStyles.getSpan,\n    getColspanRealWidth = _useStyles.getColspanRealWidth;\n  var firstDefaultColumnIndex = computed(function () {\n    return props.store.states.columns.value.findIndex(function (_ref) {\n      var type = _ref.type;\n      return type === \"default\";\n    });\n  });\n  var getKeyOfRow = function getKeyOfRow(row, index) {\n    var rowKey = parent.props.rowKey;\n    if (rowKey) {\n      return getRowIdentity(row, rowKey);\n    }\n    return index;\n  };\n  var rowRender = function rowRender(row, $index, treeRowData) {\n    var expanded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var tooltipEffect = props.tooltipEffect,\n      tooltipOptions = props.tooltipOptions,\n      store = props.store;\n    var _store$states = store.states,\n      indent = _store$states.indent,\n      columns = _store$states.columns;\n    var rowClasses = getRowClass(row, $index);\n    var display = true;\n    if (treeRowData) {\n      rowClasses.push(ns.em(\"row\", \"level-\".concat(treeRowData.level)));\n      display = treeRowData.display;\n    }\n    var displayStyle = display ? null : {\n      display: \"none\"\n    };\n    return h(\"tr\", {\n      style: [displayStyle, getRowStyle(row, $index)],\n      \"class\": rowClasses,\n      key: getKeyOfRow(row, $index),\n      onDblclick: function onDblclick($event) {\n        return handleDoubleClick($event, row);\n      },\n      onClick: function onClick($event) {\n        return handleClick($event, row);\n      },\n      onContextmenu: function onContextmenu($event) {\n        return handleContextMenu($event, row);\n      },\n      onMouseenter: function onMouseenter() {\n        return handleMouseEnter($index);\n      },\n      onMouseleave: handleMouseLeave\n    }, columns.value.map(function (column, cellIndex) {\n      var _getSpan = getSpan(row, column, $index, cellIndex),\n        rowspan = _getSpan.rowspan,\n        colspan = _getSpan.colspan;\n      if (!rowspan || !colspan) {\n        return null;\n      }\n      var columnData = Object.assign({}, column);\n      columnData.realWidth = getColspanRealWidth(columns.value, colspan, cellIndex);\n      var data = {\n        store: props.store,\n        _self: props.context || parent,\n        column: columnData,\n        row: row,\n        $index: $index,\n        cellIndex: cellIndex,\n        expanded: expanded\n      };\n      if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n        data.treeNode = {\n          indent: treeRowData.level * indent.value,\n          level: treeRowData.level\n        };\n        if (isBoolean(treeRowData.expanded)) {\n          data.treeNode.expanded = treeRowData.expanded;\n          if (\"loading\" in treeRowData) {\n            data.treeNode.loading = treeRowData.loading;\n          }\n          if (\"noLazyChildren\" in treeRowData) {\n            data.treeNode.noLazyChildren = treeRowData.noLazyChildren;\n          }\n        }\n      }\n      var baseKey = \"\".concat(getKeyOfRow(row, $index), \",\").concat(cellIndex);\n      var patchKey = columnData.columnKey || columnData.rawColumnKey || \"\";\n      var mergedTooltipOptions = column.showOverflowTooltip && merge({\n        effect: tooltipEffect\n      }, tooltipOptions, column.showOverflowTooltip);\n      return h(TdWrapper, {\n        style: getCellStyle($index, cellIndex, row, column),\n        \"class\": getCellClass($index, cellIndex, row, column, colspan - 1),\n        key: \"\".concat(patchKey).concat(baseKey),\n        rowspan: rowspan,\n        colspan: colspan,\n        onMouseenter: function onMouseenter($event) {\n          return handleCellMouseEnter($event, row, mergedTooltipOptions);\n        },\n        onMouseleave: handleCellMouseLeave\n      }, {\n        \"default\": function _default() {\n          return cellChildren(cellIndex, column, data);\n        }\n      });\n    }));\n  };\n  var cellChildren = function cellChildren(cellIndex, column, data) {\n    return column.renderCell(data);\n  };\n  var wrappedRowRender = function wrappedRowRender(row, $index) {\n    var store = props.store;\n    var isRowExpanded = store.isRowExpanded,\n      assertRowKey = store.assertRowKey;\n    var _store$states2 = store.states,\n      treeData = _store$states2.treeData,\n      lazyTreeNodeMap = _store$states2.lazyTreeNodeMap,\n      childrenColumnName = _store$states2.childrenColumnName,\n      rowKey = _store$states2.rowKey;\n    var columns = store.states.columns.value;\n    var hasExpandColumn = columns.some(function (_ref2) {\n      var type = _ref2.type;\n      return type === \"expand\";\n    });\n    if (hasExpandColumn) {\n      var expanded = isRowExpanded(row);\n      var tr = rowRender(row, $index, void 0, expanded);\n      var renderExpanded = parent.renderExpanded;\n      if (expanded) {\n        if (!renderExpanded) {\n          console.error(\"[Element Error]renderExpanded is required.\");\n          return tr;\n        }\n        return [[tr, h(\"tr\", {\n          key: \"expanded-row__\".concat(tr.key)\n        }, [h(\"td\", {\n          colspan: columns.length,\n          \"class\": \"\".concat(ns.e(\"cell\"), \" \").concat(ns.e(\"expanded-cell\"))\n        }, [renderExpanded({\n          row: row,\n          $index: $index,\n          store: store,\n          expanded: expanded\n        })])])]];\n      } else {\n        return [[tr]];\n      }\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey();\n      var key = getRowIdentity(row, rowKey.value);\n      var cur = treeData.value[key];\n      var treeRowData = null;\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true\n        };\n        if (isBoolean(cur.lazy)) {\n          if (isBoolean(cur.loaded) && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length);\n          }\n          treeRowData.loading = cur.loading;\n        }\n      }\n      var tmp = [rowRender(row, $index, treeRowData)];\n      if (cur) {\n        var i = 0;\n        var _traverse = function traverse(children, parent2) {\n          if (!(children && children.length && parent2)) return;\n          children.forEach(function (node) {\n            var innerTreeRowData = {\n              display: parent2.display && parent2.expanded,\n              level: parent2.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false\n            };\n            var childKey = getRowIdentity(node, rowKey.value);\n            if (isPropAbsent(childKey)) {\n              throw new Error(\"For nested data item, row-key is required.\");\n            }\n            cur = _objectSpread({}, treeData.value[childKey]);\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded;\n              cur.level = cur.level || innerTreeRowData.level;\n              cur.display = !!(cur.expanded && innerTreeRowData.display);\n              if (isBoolean(cur.lazy)) {\n                if (isBoolean(cur.loaded) && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);\n                }\n                innerTreeRowData.loading = cur.loading;\n              }\n            }\n            i++;\n            tmp.push(rowRender(node, $index + i, innerTreeRowData));\n            if (cur) {\n              var nodes2 = lazyTreeNodeMap.value[childKey] || node[childrenColumnName.value];\n              _traverse(nodes2, cur);\n            }\n          });\n        };\n        cur.display = true;\n        var nodes = lazyTreeNodeMap.value[key] || row[childrenColumnName.value];\n        _traverse(nodes, cur);\n      }\n      return tmp;\n    } else {\n      return rowRender(row, $index, void 0);\n    }\n  };\n  return {\n    wrappedRowRender: wrappedRowRender,\n    tooltipContent: tooltipContent,\n    tooltipTrigger: tooltipTrigger\n  };\n}\nexport { useRender as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}