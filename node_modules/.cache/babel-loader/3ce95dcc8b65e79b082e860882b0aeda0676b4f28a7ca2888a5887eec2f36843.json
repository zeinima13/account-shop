{"ast":null,"code":"import _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.parse-float.js\";\nimport { defineComponent, inject, ref, computed, unref, onMounted, nextTick, watch, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString, createCommentVNode, withDirectives, createVNode, createElementVNode } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport { ElScrollbar } from '../../../scrollbar/index.mjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue';\nimport { timeUnits } from '../constants.mjs';\nimport { buildTimeList } from '../utils.mjs';\nimport { basicTimeSpinnerProps } from '../props/basic-time-spinner.mjs';\nimport { getTimeLists } from '../composables/use-time-picker.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { vRepeatClick } from '../../../../directives/repeat-click/index.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { getStyle } from '../../../../utils/dom/style.mjs';\nimport { isNumber } from '../../../../utils/types.mjs';\nvar _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"basic-time-spinner\",\n  props: basicTimeSpinnerProps,\n  emits: [\"change\", \"select-range\", \"set-option\"],\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var pickerBase = inject(\"EP_PICKER_BASE\");\n    var isRange = pickerBase.props.isRange;\n    var ns = useNamespace(\"time\");\n    var _getTimeLists = getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds),\n      getHoursList = _getTimeLists.getHoursList,\n      getMinutesList = _getTimeLists.getMinutesList,\n      getSecondsList = _getTimeLists.getSecondsList;\n    var isScrolling = false;\n    var currentScrollbar = ref();\n    var listHoursRef = ref();\n    var listMinutesRef = ref();\n    var listSecondsRef = ref();\n    var listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef\n    };\n    var spinnerItems = computed(function () {\n      return props.showSeconds ? timeUnits : timeUnits.slice(0, 2);\n    });\n    var timePartials = computed(function () {\n      var spinnerDate = props.spinnerDate;\n      var hours = spinnerDate.hour();\n      var minutes = spinnerDate.minute();\n      var seconds = spinnerDate.second();\n      return {\n        hours: hours,\n        minutes: minutes,\n        seconds: seconds\n      };\n    });\n    var timeList = computed(function () {\n      var _unref = unref(timePartials),\n        hours = _unref.hours,\n        minutes = _unref.minutes;\n      var role = props.role,\n        spinnerDate = props.spinnerDate;\n      var compare = !isRange ? spinnerDate : void 0;\n      return {\n        hours: getHoursList(role, compare),\n        minutes: getMinutesList(hours, role, compare),\n        seconds: getSecondsList(hours, minutes, role, compare)\n      };\n    });\n    var arrowControlTimeList = computed(function () {\n      var _unref2 = unref(timePartials),\n        hours = _unref2.hours,\n        minutes = _unref2.minutes,\n        seconds = _unref2.seconds;\n      return {\n        hours: buildTimeList(hours, 23),\n        minutes: buildTimeList(minutes, 59),\n        seconds: buildTimeList(seconds, 59)\n      };\n    });\n    var debouncedResetScroll = debounce(function (type) {\n      isScrolling = false;\n      adjustCurrentSpinner(type);\n    }, 200);\n    var getAmPmFlag = function getAmPmFlag(hour) {\n      var shouldShowAmPm = !!props.amPmMode;\n      if (!shouldShowAmPm) return \"\";\n      var isCapital = props.amPmMode === \"A\";\n      var content = hour < 12 ? \" am\" : \" pm\";\n      if (isCapital) content = content.toUpperCase();\n      return content;\n    };\n    var emitSelectRange = function emitSelectRange(type) {\n      var range;\n      switch (type) {\n        case \"hours\":\n          range = [0, 2];\n          break;\n        case \"minutes\":\n          range = [3, 5];\n          break;\n        case \"seconds\":\n          range = [6, 8];\n          break;\n      }\n      var _range = range,\n        _range2 = _slicedToArray(_range, 2),\n        left = _range2[0],\n        right = _range2[1];\n      emit(\"select-range\", left, right);\n      currentScrollbar.value = type;\n    };\n    var adjustCurrentSpinner = function adjustCurrentSpinner(type) {\n      adjustSpinner(type, unref(timePartials)[type]);\n    };\n    var adjustSpinners = function adjustSpinners() {\n      adjustCurrentSpinner(\"hours\");\n      adjustCurrentSpinner(\"minutes\");\n      adjustCurrentSpinner(\"seconds\");\n    };\n    var getScrollbarElement = function getScrollbarElement(el) {\n      return el.querySelector(\".\".concat(ns.namespace.value, \"-scrollbar__wrap\"));\n    };\n    var adjustSpinner = function adjustSpinner(type, value) {\n      if (props.arrowControl) return;\n      var scrollbar = unref(listRefsMap[type]);\n      if (scrollbar && scrollbar.$el) {\n        getScrollbarElement(scrollbar.$el).scrollTop = Math.max(0, value * typeItemHeight(type));\n      }\n    };\n    var typeItemHeight = function typeItemHeight(type) {\n      var scrollbar = unref(listRefsMap[type]);\n      var listItem = scrollbar == null ? void 0 : scrollbar.$el.querySelector(\"li\");\n      if (listItem) {\n        return Number.parseFloat(getStyle(listItem, \"height\")) || 0;\n      }\n      return 0;\n    };\n    var onIncrement = function onIncrement() {\n      scrollDown(1);\n    };\n    var onDecrement = function onDecrement() {\n      scrollDown(-1);\n    };\n    var scrollDown = function scrollDown(step) {\n      if (!currentScrollbar.value) {\n        emitSelectRange(\"hours\");\n      }\n      var label = currentScrollbar.value;\n      var now = unref(timePartials)[label];\n      var total = currentScrollbar.value === \"hours\" ? 24 : 60;\n      var next = findNextUnDisabled(label, now, step, total);\n      modifyDateField(label, next);\n      adjustSpinner(label, next);\n      nextTick(function () {\n        return emitSelectRange(label);\n      });\n    };\n    var findNextUnDisabled = function findNextUnDisabled(type, now, step, total) {\n      var next = (now + step + total) % total;\n      var list = unref(timeList)[type];\n      while (list[next] && next !== now) {\n        next = (next + step + total) % total;\n      }\n      return next;\n    };\n    var modifyDateField = function modifyDateField(type, value) {\n      var list = unref(timeList)[type];\n      var isDisabled = list[value];\n      if (isDisabled) return;\n      var _unref3 = unref(timePartials),\n        hours = _unref3.hours,\n        minutes = _unref3.minutes,\n        seconds = _unref3.seconds;\n      var changeTo;\n      switch (type) {\n        case \"hours\":\n          changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds);\n          break;\n        case \"minutes\":\n          changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds);\n          break;\n        case \"seconds\":\n          changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value);\n          break;\n      }\n      emit(\"change\", changeTo);\n    };\n    var handleClick = function handleClick(type, _ref2) {\n      var value = _ref2.value,\n        disabled = _ref2.disabled;\n      if (!disabled) {\n        modifyDateField(type, value);\n        emitSelectRange(type);\n        adjustSpinner(type, value);\n      }\n    };\n    var handleScroll = function handleScroll(type) {\n      var scrollbar = unref(listRefsMap[type]);\n      if (!scrollbar) return;\n      isScrolling = true;\n      debouncedResetScroll(type);\n      var value = Math.min(Math.round((getScrollbarElement(scrollbar.$el).scrollTop - (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) + 3) / typeItemHeight(type)), type === \"hours\" ? 23 : 59);\n      modifyDateField(type, value);\n    };\n    var scrollBarHeight = function scrollBarHeight(type) {\n      return unref(listRefsMap[type]).$el.offsetHeight;\n    };\n    var bindScrollEvent = function bindScrollEvent() {\n      var bindFunction = function bindFunction(type) {\n        var scrollbar = unref(listRefsMap[type]);\n        if (scrollbar && scrollbar.$el) {\n          getScrollbarElement(scrollbar.$el).onscroll = function () {\n            handleScroll(type);\n          };\n        }\n      };\n      bindFunction(\"hours\");\n      bindFunction(\"minutes\");\n      bindFunction(\"seconds\");\n    };\n    onMounted(function () {\n      nextTick(function () {\n        !props.arrowControl && bindScrollEvent();\n        adjustSpinners();\n        if (props.role === \"start\") emitSelectRange(\"hours\");\n      });\n    });\n    var setRef = function setRef(scrollbar, type) {\n      listRefsMap[type].value = scrollbar != null ? scrollbar : void 0;\n    };\n    emit(\"set-option\", [\"\".concat(props.role, \"_scrollDown\"), scrollDown]);\n    emit(\"set-option\", [\"\".concat(props.role, \"_emitSelectRange\"), emitSelectRange]);\n    watch(function () {\n      return props.spinnerDate;\n    }, function () {\n      if (isScrolling) return;\n      adjustSpinners();\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass([unref(ns).b(\"spinner\"), {\n          \"has-seconds\": _ctx.showSeconds\n        }])\n      }, [!_ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n        key: 0\n      }, renderList(unref(spinnerItems), function (item) {\n        return openBlock(), createBlock(unref(ElScrollbar), {\n          key: item,\n          ref_for: true,\n          ref: function ref(scrollbar) {\n            return setRef(scrollbar, item);\n          },\n          \"class\": normalizeClass(unref(ns).be(\"spinner\", \"wrapper\")),\n          \"wrap-style\": \"max-height: inherit;\",\n          \"view-class\": unref(ns).be(\"spinner\", \"list\"),\n          noresize: \"\",\n          tag: \"ul\",\n          onMouseenter: function onMouseenter($event) {\n            return emitSelectRange(item);\n          },\n          onMousemove: function onMousemove($event) {\n            return adjustCurrentSpinner(item);\n          }\n        }, {\n          \"default\": withCtx(function () {\n            return [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(timeList)[item], function (disabled, key) {\n              return openBlock(), createElementBlock(\"li\", {\n                key: key,\n                \"class\": normalizeClass([unref(ns).be(\"spinner\", \"item\"), unref(ns).is(\"active\", key === unref(timePartials)[item]), unref(ns).is(\"disabled\", disabled)]),\n                onClick: function onClick($event) {\n                  return handleClick(item, {\n                    value: key,\n                    disabled: disabled\n                  });\n                }\n              }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n                key: 0\n              }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + toDisplayString(getAmPmFlag(key)), 1)], 64)) : (openBlock(), createElementBlock(Fragment, {\n                key: 1\n              }, [createTextVNode(toDisplayString((\"0\" + key).slice(-2)), 1)], 64))], 10, [\"onClick\"]);\n            }), 128))];\n          }),\n          _: 2\n        }, 1032, [\"class\", \"view-class\", \"onMouseenter\", \"onMousemove\"]);\n      }), 128)) : createCommentVNode(\"v-if\", true), _ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n        key: 1\n      }, renderList(unref(spinnerItems), function (item) {\n        return openBlock(), createElementBlock(\"div\", {\n          key: item,\n          \"class\": normalizeClass([unref(ns).be(\"spinner\", \"wrapper\"), unref(ns).is(\"arrow\")]),\n          onMouseenter: function onMouseenter($event) {\n            return emitSelectRange(item);\n          }\n        }, [withDirectives((openBlock(), createBlock(unref(ElIcon), {\n          \"class\": normalizeClass([\"arrow-up\", unref(ns).be(\"spinner\", \"arrow\")])\n        }, {\n          \"default\": withCtx(function () {\n            return [createVNode(unref(ArrowUp))];\n          }),\n          _: 1\n        }, 8, [\"class\"])), [[unref(vRepeatClick), onDecrement]]), withDirectives((openBlock(), createBlock(unref(ElIcon), {\n          \"class\": normalizeClass([\"arrow-down\", unref(ns).be(\"spinner\", \"arrow\")])\n        }, {\n          \"default\": withCtx(function () {\n            return [createVNode(unref(ArrowDown))];\n          }),\n          _: 1\n        }, 8, [\"class\"])), [[unref(vRepeatClick), onIncrement]]), createElementVNode(\"ul\", {\n          \"class\": normalizeClass(unref(ns).be(\"spinner\", \"list\"))\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(arrowControlTimeList)[item], function (time, key) {\n          return openBlock(), createElementBlock(\"li\", {\n            key: key,\n            \"class\": normalizeClass([unref(ns).be(\"spinner\", \"item\"), unref(ns).is(\"active\", time === unref(timePartials)[item]), unref(ns).is(\"disabled\", unref(timeList)[item][time])])\n          }, [unref(isNumber)(time) ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + toDisplayString(getAmPmFlag(time)), 1)], 64)) : (openBlock(), createElementBlock(Fragment, {\n            key: 1\n          }, [createTextVNode(toDisplayString((\"0\" + time).slice(-2)), 1)], 64))], 64)) : createCommentVNode(\"v-if\", true)], 2);\n        }), 128))], 2)], 42, [\"onMouseenter\"]);\n      }), 128)) : createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n});\nvar TimeSpinner = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"basic-time-spinner.vue\"]]);\nexport { TimeSpinner as default };","map":{"version":3,"names":["pickerBase","inject","isRange","props","ns","useNamespace","_getTimeLists","getTimeLists","disabledHours","disabledMinutes","disabledSeconds","getHoursList","getMinutesList","getSecondsList","isScrolling","currentScrollbar","ref","listHoursRef","listMinutesRef","listSecondsRef","listRefsMap","hours","minutes","seconds","spinnerItems","computed","showSeconds","timeUnits","slice","timePartials","spinnerDate","hour","minute","second","timeList","_unref","unref","role","compare","arrowControlTimeList","_unref2","buildTimeList","debouncedResetScroll","debounce","type","adjustCurrentSpinner","getAmPmFlag","shouldShowAmPm","amPmMode","isCapital","content","toUpperCase","emitSelectRange","range","_range","_range2","_slicedToArray","left","right","emit","value","adjustSpinner","adjustSpinners","getScrollbarElement","el","querySelector","concat","namespace","arrowControl","scrollbar","$el","scrollTop","Math","max","typeItemHeight","listItem","Number","parseFloat","getStyle","onIncrement","scrollDown","onDecrement","step","label","now","total","next","findNextUnDisabled","modifyDateField","nextTick","list","isDisabled","_unref3","changeTo","handleClick","_ref2","disabled","handleScroll","min","round","scrollBarHeight","offsetHeight","bindScrollEvent","bindFunction","onscroll","onMounted","setRef","watch","_ctx","_cache","openBlock","createElementBlock","normalizeClass","b","Fragment","key","renderList","item","createBlock","ElScrollbar","ref_for"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b('spinner'), { 'has-seconds': showSeconds }]\">\n    <template v-if=\"!arrowControl\">\n      <el-scrollbar\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :ref=\"(scrollbar: unknown) => setRef(scrollbar as any, item)\"\n        :class=\"ns.be('spinner', 'wrapper')\"\n        wrap-style=\"max-height: inherit;\"\n        :view-class=\"ns.be('spinner', 'list')\"\n        noresize\n        tag=\"ul\"\n        @mouseenter=\"emitSelectRange(item)\"\n        @mousemove=\"adjustCurrentSpinner(item)\"\n      >\n        <li\n          v-for=\"(disabled, key) in timeList[item]\"\n          :key=\"key\"\n          :class=\"[\n            ns.be('spinner', 'item'),\n            ns.is('active', key === timePartials[item]),\n            ns.is('disabled', disabled),\n          ]\"\n          @click=\"handleClick(item, { value: key, disabled })\"\n        >\n          <template v-if=\"item === 'hours'\">\n            {{ ('0' + (amPmMode ? key % 12 || 12 : key)).slice(-2)\n            }}{{ getAmPmFlag(key) }}\n          </template>\n          <template v-else>\n            {{ ('0' + key).slice(-2) }}\n          </template>\n        </li>\n      </el-scrollbar>\n    </template>\n    <template v-if=\"arrowControl\">\n      <div\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :class=\"[ns.be('spinner', 'wrapper'), ns.is('arrow')]\"\n        @mouseenter=\"emitSelectRange(item)\"\n      >\n        <el-icon\n          v-repeat-click=\"onDecrement\"\n          :class=\"['arrow-up', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-up />\n        </el-icon>\n        <el-icon\n          v-repeat-click=\"onIncrement\"\n          :class=\"['arrow-down', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-down />\n        </el-icon>\n        <ul :class=\"ns.be('spinner', 'list')\">\n          <li\n            v-for=\"(time, key) in arrowControlTimeList[item]\"\n            :key=\"key\"\n            :class=\"[\n              ns.be('spinner', 'item'),\n              ns.is('active', time === timePartials[item]),\n              ns.is('disabled', timeList[item][time!]),\n            ]\"\n          >\n            <template v-if=\"isNumber(time)\">\n              <template v-if=\"item === 'hours'\">\n                {{ ('0' + (amPmMode ? time % 12 || 12 : time)).slice(-2)\n                }}{{ getAmPmFlag(time) }}\n              </template>\n              <template v-else>\n                {{ ('0' + time).slice(-2) }}\n              </template>\n            </template>\n          </li>\n        </ul>\n      </div>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, inject, nextTick, onMounted, ref, unref, watch } from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { vRepeatClick } from '@element-plus/directives'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport { ArrowDown, ArrowUp } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { getStyle, isNumber } from '@element-plus/utils'\nimport { timeUnits } from '../constants'\nimport { buildTimeList } from '../utils'\nimport { basicTimeSpinnerProps } from '../props/basic-time-spinner'\nimport { getTimeLists } from '../composables/use-time-picker'\n\nimport type { Ref } from 'vue'\nimport type { ScrollbarInstance } from '@element-plus/components/scrollbar'\nimport type { TimeUnit } from '../constants'\nimport type { TimeList } from '../utils'\n\nconst props = defineProps(basicTimeSpinnerProps)\nconst pickerBase = inject('EP_PICKER_BASE') as any\nconst { isRange } = pickerBase.props\nconst emit = defineEmits(['change', 'select-range', 'set-option'])\n\nconst ns = useNamespace('time')\n\nconst { getHoursList, getMinutesList, getSecondsList } = getTimeLists(\n  props.disabledHours,\n  props.disabledMinutes,\n  props.disabledSeconds\n)\n\n// data\nlet isScrolling = false\n\nconst currentScrollbar = ref<TimeUnit>()\nconst listHoursRef = ref<ScrollbarInstance>()\nconst listMinutesRef = ref<ScrollbarInstance>()\nconst listSecondsRef = ref<ScrollbarInstance>()\nconst listRefsMap: Record<TimeUnit, Ref<ScrollbarInstance | undefined>> = {\n  hours: listHoursRef,\n  minutes: listMinutesRef,\n  seconds: listSecondsRef,\n}\n\n// computed\nconst spinnerItems = computed(() => {\n  return props.showSeconds ? timeUnits : timeUnits.slice(0, 2)\n})\n\nconst timePartials = computed<Record<TimeUnit, number>>(() => {\n  const { spinnerDate } = props\n  const hours = spinnerDate.hour()\n  const minutes = spinnerDate.minute()\n  const seconds = spinnerDate.second()\n  return { hours, minutes, seconds }\n})\n\nconst timeList = computed(() => {\n  const { hours, minutes } = unref(timePartials)\n  const { role, spinnerDate } = props\n  const compare = !isRange ? spinnerDate : undefined\n  return {\n    hours: getHoursList(role, compare),\n    minutes: getMinutesList(hours, role, compare),\n    seconds: getSecondsList(hours, minutes, role, compare),\n  }\n})\n\nconst arrowControlTimeList = computed<Record<TimeUnit, TimeList>>(() => {\n  const { hours, minutes, seconds } = unref(timePartials)\n\n  return {\n    hours: buildTimeList(hours, 23),\n    minutes: buildTimeList(minutes, 59),\n    seconds: buildTimeList(seconds, 59),\n  }\n})\n\nconst debouncedResetScroll = debounce((type) => {\n  isScrolling = false\n  adjustCurrentSpinner(type)\n}, 200)\n\nconst getAmPmFlag = (hour: number) => {\n  const shouldShowAmPm = !!props.amPmMode\n  if (!shouldShowAmPm) return ''\n  const isCapital = props.amPmMode === 'A'\n  // todo locale\n  let content = hour < 12 ? ' am' : ' pm'\n  if (isCapital) content = content.toUpperCase()\n  return content\n}\n\nconst emitSelectRange = (type: TimeUnit) => {\n  let range\n\n  switch (type) {\n    case 'hours':\n      range = [0, 2]\n      break\n    case 'minutes':\n      range = [3, 5]\n      break\n    case 'seconds':\n      range = [6, 8]\n      break\n  }\n  const [left, right] = range\n\n  emit('select-range', left, right)\n  currentScrollbar.value = type\n}\n\nconst adjustCurrentSpinner = (type: TimeUnit) => {\n  adjustSpinner(type, unref(timePartials)[type])\n}\n\nconst adjustSpinners = () => {\n  adjustCurrentSpinner('hours')\n  adjustCurrentSpinner('minutes')\n  adjustCurrentSpinner('seconds')\n}\n\nconst getScrollbarElement = (el: HTMLElement) =>\n  el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`) as HTMLElement\n\nconst adjustSpinner = (type: TimeUnit, value: number) => {\n  if (props.arrowControl) return\n  const scrollbar = unref(listRefsMap[type])\n  if (scrollbar && scrollbar.$el) {\n    getScrollbarElement(scrollbar.$el).scrollTop = Math.max(\n      0,\n      value * typeItemHeight(type)\n    )\n  }\n}\n\nconst typeItemHeight = (type: TimeUnit): number => {\n  const scrollbar = unref(listRefsMap[type])\n  const listItem = scrollbar?.$el.querySelector('li')\n  if (listItem) {\n    return Number.parseFloat(getStyle(listItem, 'height')) || 0\n  }\n  return 0\n}\n\nconst onIncrement = () => {\n  scrollDown(1)\n}\n\nconst onDecrement = () => {\n  scrollDown(-1)\n}\n\nconst scrollDown = (step: number) => {\n  if (!currentScrollbar.value) {\n    emitSelectRange('hours')\n  }\n\n  const label = currentScrollbar.value!\n  const now = unref(timePartials)[label]\n  const total = currentScrollbar.value === 'hours' ? 24 : 60\n  const next = findNextUnDisabled(label, now, step, total)\n\n  modifyDateField(label, next)\n  adjustSpinner(label, next)\n  nextTick(() => emitSelectRange(label))\n}\n\nconst findNextUnDisabled = (\n  type: TimeUnit,\n  now: number,\n  step: number,\n  total: number\n) => {\n  let next = (now + step + total) % total\n  const list = unref(timeList)[type]\n  while (list[next] && next !== now) {\n    next = (next + step + total) % total\n  }\n  return next\n}\n\nconst modifyDateField = (type: TimeUnit, value: number) => {\n  const list = unref(timeList)[type]\n  const isDisabled = list[value]\n  if (isDisabled) return\n\n  const { hours, minutes, seconds } = unref(timePartials)\n\n  let changeTo\n  switch (type) {\n    case 'hours':\n      changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds)\n      break\n    case 'minutes':\n      changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds)\n      break\n    case 'seconds':\n      changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value)\n      break\n  }\n  emit('change', changeTo)\n}\n\nconst handleClick = (\n  type: TimeUnit,\n  { value, disabled }: { value: number; disabled: boolean }\n) => {\n  if (!disabled) {\n    modifyDateField(type, value)\n    emitSelectRange(type)\n    adjustSpinner(type, value)\n  }\n}\n\nconst handleScroll = (type: TimeUnit) => {\n  const scrollbar = unref(listRefsMap[type])\n  if (!scrollbar) return\n\n  isScrolling = true\n  debouncedResetScroll(type)\n  const value = Math.min(\n    Math.round(\n      (getScrollbarElement(scrollbar.$el).scrollTop -\n        (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) +\n        3) /\n        typeItemHeight(type)\n    ),\n    type === 'hours' ? 23 : 59\n  )\n  modifyDateField(type, value)\n}\n\nconst scrollBarHeight = (type: TimeUnit) => {\n  return unref(listRefsMap[type])!.$el.offsetHeight\n}\n\nconst bindScrollEvent = () => {\n  const bindFunction = (type: TimeUnit) => {\n    const scrollbar = unref(listRefsMap[type])\n    if (scrollbar && scrollbar.$el) {\n      getScrollbarElement(scrollbar.$el).onscroll = () => {\n        // TODO: scroll is emitted when set scrollTop programmatically\n        // should find better solutions in the future!\n        handleScroll(type)\n      }\n    }\n  }\n  bindFunction('hours')\n  bindFunction('minutes')\n  bindFunction('seconds')\n}\n\nonMounted(() => {\n  nextTick(() => {\n    !props.arrowControl && bindScrollEvent()\n    adjustSpinners()\n    // set selection on the first hour part\n    if (props.role === 'start') emitSelectRange('hours')\n  })\n})\n\nconst setRef = (scrollbar: ScrollbarInstance | null, type: TimeUnit) => {\n  listRefsMap[type].value = scrollbar ?? undefined\n}\n\nemit('set-option', [`${props.role}_scrollDown`, scrollDown])\nemit('set-option', [`${props.role}_emitSelectRange`, emitSelectRange])\n\nwatch(\n  () => props.spinnerDate,\n  () => {\n    if (isScrolling) return\n    adjustSpinners()\n  }\n)\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}