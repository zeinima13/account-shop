{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, useSlots, computed, ref, openBlock, createBlock, unref, withCtx, createVNode, Transition, withDirectives, createElementVNode, mergeProps, withModifiers, normalizeClass, createElementBlock, renderSlot, toDisplayString, createCommentVNode, vShow } from 'vue';\nimport { Close } from '@element-plus/icons-vue';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nimport { ElTeleport } from '../../teleport/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { drawerProps, drawerEmits } from './drawer2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useDialog } from '../../dialog/src/use-dialog.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nvar __default__ = defineComponent({\n  name: \"ElDrawer\",\n  inheritAttrs: false\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: drawerProps,\n  emits: drawerEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    var slots = useSlots();\n    useDeprecated({\n      scope: \"el-drawer\",\n      from: \"the title slot\",\n      replacement: \"the header slot\",\n      version: \"3.0.0\",\n      ref: \"https://element-plus.org/en-US/component/drawer.html#slots\"\n    }, computed(function () {\n      return !!slots.title;\n    }));\n    var drawerRef = ref();\n    var focusStartRef = ref();\n    var ns = useNamespace(\"drawer\");\n    var _useLocale = useLocale(),\n      t = _useLocale.t;\n    var _useDialog = useDialog(props, drawerRef),\n      afterEnter = _useDialog.afterEnter,\n      afterLeave = _useDialog.afterLeave,\n      beforeLeave = _useDialog.beforeLeave,\n      visible = _useDialog.visible,\n      rendered = _useDialog.rendered,\n      titleId = _useDialog.titleId,\n      bodyId = _useDialog.bodyId,\n      zIndex = _useDialog.zIndex,\n      onModalClick = _useDialog.onModalClick,\n      onOpenAutoFocus = _useDialog.onOpenAutoFocus,\n      onCloseAutoFocus = _useDialog.onCloseAutoFocus,\n      onFocusoutPrevented = _useDialog.onFocusoutPrevented,\n      onCloseRequested = _useDialog.onCloseRequested,\n      handleClose = _useDialog.handleClose;\n    var isHorizontal = computed(function () {\n      return props.direction === \"rtl\" || props.direction === \"ltr\";\n    });\n    var drawerSize = computed(function () {\n      return addUnit(props.size);\n    });\n    expose({\n      handleClose: handleClose,\n      afterEnter: afterEnter,\n      afterLeave: afterLeave\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(unref(ElTeleport), {\n        to: _ctx.appendTo,\n        disabled: _ctx.appendTo !== \"body\" ? false : !_ctx.appendToBody\n      }, {\n        \"default\": withCtx(function () {\n          return [createVNode(Transition, {\n            name: unref(ns).b(\"fade\"),\n            onAfterEnter: unref(afterEnter),\n            onAfterLeave: unref(afterLeave),\n            onBeforeLeave: unref(beforeLeave),\n            persisted: \"\"\n          }, {\n            \"default\": withCtx(function () {\n              return [withDirectives(createVNode(unref(ElOverlay), {\n                mask: _ctx.modal,\n                \"overlay-class\": _ctx.modalClass,\n                \"z-index\": unref(zIndex),\n                onClick: unref(onModalClick)\n              }, {\n                \"default\": withCtx(function () {\n                  return [createVNode(unref(ElFocusTrap), {\n                    loop: \"\",\n                    trapped: unref(visible),\n                    \"focus-trap-el\": drawerRef.value,\n                    \"focus-start-el\": focusStartRef.value,\n                    onFocusAfterTrapped: unref(onOpenAutoFocus),\n                    onFocusAfterReleased: unref(onCloseAutoFocus),\n                    onFocusoutPrevented: unref(onFocusoutPrevented),\n                    onReleaseRequested: unref(onCloseRequested)\n                  }, {\n                    \"default\": withCtx(function () {\n                      return [createElementVNode(\"div\", mergeProps({\n                        ref_key: \"drawerRef\",\n                        ref: drawerRef,\n                        \"aria-modal\": \"true\",\n                        \"aria-label\": _ctx.title || void 0,\n                        \"aria-labelledby\": !_ctx.title ? unref(titleId) : void 0,\n                        \"aria-describedby\": unref(bodyId)\n                      }, _ctx.$attrs, {\n                        \"class\": [unref(ns).b(), _ctx.direction, unref(visible) && \"open\"],\n                        style: unref(isHorizontal) ? \"width: \" + unref(drawerSize) : \"height: \" + unref(drawerSize),\n                        role: \"dialog\",\n                        onClick: withModifiers(function () {}, [\"stop\"])\n                      }), [createElementVNode(\"span\", {\n                        ref_key: \"focusStartRef\",\n                        ref: focusStartRef,\n                        \"class\": normalizeClass(unref(ns).e(\"sr-focus\")),\n                        tabindex: \"-1\"\n                      }, null, 2), _ctx.withHeader ? (openBlock(), createElementBlock(\"header\", {\n                        key: 0,\n                        \"class\": normalizeClass([unref(ns).e(\"header\"), _ctx.headerClass])\n                      }, [!_ctx.$slots.title ? renderSlot(_ctx.$slots, \"header\", {\n                        key: 0,\n                        close: unref(handleClose),\n                        titleId: unref(titleId),\n                        titleClass: unref(ns).e(\"title\")\n                      }, function () {\n                        return [!_ctx.$slots.title ? (openBlock(), createElementBlock(\"span\", {\n                          key: 0,\n                          id: unref(titleId),\n                          role: \"heading\",\n                          \"aria-level\": _ctx.headerAriaLevel,\n                          \"class\": normalizeClass(unref(ns).e(\"title\"))\n                        }, toDisplayString(_ctx.title), 11, [\"id\", \"aria-level\"])) : createCommentVNode(\"v-if\", true)];\n                      }) : renderSlot(_ctx.$slots, \"title\", {\n                        key: 1\n                      }, function () {\n                        return [createCommentVNode(\" DEPRECATED SLOT \")];\n                      }), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n                        key: 2,\n                        \"aria-label\": unref(t)(\"el.drawer.close\"),\n                        \"class\": normalizeClass(unref(ns).e(\"close-btn\")),\n                        type: \"button\",\n                        onClick: unref(handleClose)\n                      }, [createVNode(unref(ElIcon), {\n                        \"class\": normalizeClass(unref(ns).e(\"close\"))\n                      }, {\n                        \"default\": withCtx(function () {\n                          return [createVNode(unref(Close))];\n                        }),\n                        _: 1\n                      }, 8, [\"class\"])], 10, [\"aria-label\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true), unref(rendered) ? (openBlock(), createElementBlock(\"div\", {\n                        key: 1,\n                        id: unref(bodyId),\n                        \"class\": normalizeClass([unref(ns).e(\"body\"), _ctx.bodyClass])\n                      }, [renderSlot(_ctx.$slots, \"default\")], 10, [\"id\"])) : createCommentVNode(\"v-if\", true), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"div\", {\n                        key: 2,\n                        \"class\": normalizeClass([unref(ns).e(\"footer\"), _ctx.footerClass])\n                      }, [renderSlot(_ctx.$slots, \"footer\")], 2)) : createCommentVNode(\"v-if\", true)], 16, [\"aria-label\", \"aria-labelledby\", \"aria-describedby\", \"onClick\"])];\n                    }),\n                    _: 3\n                  }, 8, [\"trapped\", \"focus-trap-el\", \"focus-start-el\", \"onFocusAfterTrapped\", \"onFocusAfterReleased\", \"onFocusoutPrevented\", \"onReleaseRequested\"])];\n                }),\n                _: 3\n              }, 8, [\"mask\", \"overlay-class\", \"z-index\", \"onClick\"]), [[vShow, unref(visible)]])];\n            }),\n            _: 3\n          }, 8, [\"name\", \"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])];\n        }),\n        _: 3\n      }, 8, [\"to\", \"disabled\"]);\n    };\n  }\n}));\nvar Drawer = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"drawer.vue\"]]);\nexport { Drawer as default };","map":{"version":3,"names":["name","inheritAttrs","slots","useSlots","useDeprecated","scope","from","replacement","version","ref","computed","title","drawerRef","focusStartRef","ns","useNamespace","_useLocale","useLocale","t","_useDialog","useDialog","props","afterEnter","afterLeave","beforeLeave","visible","rendered","titleId","bodyId","zIndex","onModalClick","onOpenAutoFocus","onCloseAutoFocus","onFocusoutPrevented","onCloseRequested","handleClose","isHorizontal","direction","drawerSize","addUnit","size","expose","_ctx","_cache","openBlock","createBlock","unref","ElTeleport","to","appendTo","disabled","appendToBody"],"sources":["../../../../../../packages/components/drawer/src/drawer.vue"],"sourcesContent":["<template>\n  <el-teleport\n    :to=\"appendTo\"\n    :disabled=\"appendTo !== 'body' ? false : !appendToBody\"\n  >\n    <transition\n      :name=\"ns.b('fade')\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n        @click=\"onModalClick\"\n      >\n        <el-focus-trap\n          loop\n          :trapped=\"visible\"\n          :focus-trap-el=\"drawerRef\"\n          :focus-start-el=\"focusStartRef\"\n          @focus-after-trapped=\"onOpenAutoFocus\"\n          @focus-after-released=\"onCloseAutoFocus\"\n          @focusout-prevented=\"onFocusoutPrevented\"\n          @release-requested=\"onCloseRequested\"\n        >\n          <div\n            ref=\"drawerRef\"\n            aria-modal=\"true\"\n            :aria-label=\"title || undefined\"\n            :aria-labelledby=\"!title ? titleId : undefined\"\n            :aria-describedby=\"bodyId\"\n            v-bind=\"$attrs\"\n            :class=\"[ns.b(), direction, visible && 'open']\"\n            :style=\"\n              isHorizontal ? 'width: ' + drawerSize : 'height: ' + drawerSize\n            \"\n            role=\"dialog\"\n            @click.stop\n          >\n            <span ref=\"focusStartRef\" :class=\"ns.e('sr-focus')\" tabindex=\"-1\" />\n            <header v-if=\"withHeader\" :class=\"[ns.e('header'), headerClass]\">\n              <slot\n                v-if=\"!$slots.title\"\n                name=\"header\"\n                :close=\"handleClose\"\n                :title-id=\"titleId\"\n                :title-class=\"ns.e('title')\"\n              >\n                <span\n                  v-if=\"!$slots.title\"\n                  :id=\"titleId\"\n                  role=\"heading\"\n                  :aria-level=\"headerAriaLevel\"\n                  :class=\"ns.e('title')\"\n                >\n                  {{ title }}\n                </span>\n              </slot>\n              <slot v-else name=\"title\">\n                <!-- DEPRECATED SLOT -->\n              </slot>\n              <button\n                v-if=\"showClose\"\n                :aria-label=\"t('el.drawer.close')\"\n                :class=\"ns.e('close-btn')\"\n                type=\"button\"\n                @click=\"handleClose\"\n              >\n                <el-icon :class=\"ns.e('close')\">\n                  <close />\n                </el-icon>\n              </button>\n            </header>\n            <template v-if=\"rendered\">\n              <div :id=\"bodyId\" :class=\"[ns.e('body'), bodyClass]\">\n                <slot />\n              </div>\n            </template>\n            <div v-if=\"$slots.footer\" :class=\"[ns.e('footer'), footerClass]\">\n              <slot name=\"footer\" />\n            </div>\n          </div>\n        </el-focus-trap>\n      </el-overlay>\n    </transition>\n  </el-teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref, useSlots } from 'vue'\nimport { Close } from '@element-plus/icons-vue'\n\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport ElTeleport from '@element-plus/components/teleport'\nimport { useDialog } from '@element-plus/components/dialog'\nimport { addUnit } from '@element-plus/utils'\nimport ElIcon from '@element-plus/components/icon'\nimport { useDeprecated, useLocale, useNamespace } from '@element-plus/hooks'\nimport { drawerEmits, drawerProps } from './drawer'\n\ndefineOptions({\n  name: 'ElDrawer',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(drawerProps)\ndefineEmits(drawerEmits)\nconst slots = useSlots()\n\nuseDeprecated(\n  {\n    scope: 'el-drawer',\n    from: 'the title slot',\n    replacement: 'the header slot',\n    version: '3.0.0',\n    ref: 'https://element-plus.org/en-US/component/drawer.html#slots',\n  },\n  computed(() => !!slots.title)\n)\n\nconst drawerRef = ref<HTMLElement>()\nconst focusStartRef = ref<HTMLElement>()\nconst ns = useNamespace('drawer')\nconst { t } = useLocale()\nconst {\n  afterEnter,\n  afterLeave,\n  beforeLeave,\n  visible,\n  rendered,\n  titleId,\n  bodyId,\n  zIndex,\n  onModalClick,\n  onOpenAutoFocus,\n  onCloseAutoFocus,\n  onFocusoutPrevented,\n  onCloseRequested,\n  handleClose,\n} = useDialog(props, drawerRef)\n\nconst isHorizontal = computed(\n  () => props.direction === 'rtl' || props.direction === 'ltr'\n)\nconst drawerSize = computed(() => addUnit(props.size))\n\ndefineExpose({\n  handleClose,\n  afterEnter,\n  afterLeave,\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;iCAwGc;EACZA,IAAM;EACNC,YAAc;AAChB;;;;;;;IAIA,IAAMC,KAAA,GAAQC,QAAS;IAEvBC,aAAA;MACEC,KAAA;MAAAC,IACS;MAAAC,WACD;MAAAC,OACO;MAAAC,GACJ;IAAA,GAAAC,QACJ;MAAA,SAAAR,KAAA,CAAAS,KAAA;IAAA;IACP,IAAAC,SAAA,GAAAH,GAAA;IAAA,IACSI,aAAQ,GAAAJ,GAAM,EAAK;IAC9B,IAAAK,EAAA,GAAAC,YAAA;IAEA,IAAAC,UAAA,GAAMC,SAA6B;MAA7BC,CAAA,GAAAF,UAAA,CAAAE,CAAA;IACN,IAAAC,UAAA,GAeEC,SAAA,CAAAC,KAAA,EAAAT,SAAA;MAdIU,UAAA,GAAAH,UAAA,CAAAG,UAAA;MACAC,UAAI,GAAAJ,UAAA,CAAJI,UAAI;MACJC,WAAA,GAAAL,UAAA,CAAAK,WAAA;MACJC,OAAA,GAAAN,UAAA,CAAAM,OAAA;MACAC,QAAA,GAAAP,UAAA,CAAAO,QAAA;MACAC,OAAA,GAAAR,UAAA,CAAAQ,OAAA;MACAC,MAAA,GAAAT,UAAA,CAAAS,MAAA;MACAC,MAAA,GAAAV,UAAA,CAAAU,MAAA;MACAC,YAAA,GAAAX,UAAA,CAAAW,YAAA;MACAC,eAAA,GAAAZ,UAAA,CAAAY,eAAA;MACAC,gBAAA,GAAAb,UAAA,CAAAa,gBAAA;MACAC,mBAAA,GAAAd,UAAA,CAAAc,mBAAA;MACAC,gBAAA,GAAAf,UAAA,CAAAe,gBAAA;MACAC,WAAA,GAAAhB,UAAA,CAAAgB,WAAA;IAEA,IAAAC,YAAA,GAAA1B,QAAA;MAAA,OAAAW,KAAA,CAAAgB,SAAA,cAAAhB,KAAA,CAAAgB,SAAA;IAAA;IACA,IAAAC,UAAA,GAAA5B,QAAA;MAAA,OAAA6B,OAAA,CAAAlB,KAAA,CAAAmB,IAAA;IAAA;IACFC,MAAc;MAEdN,WAAqB,EAArBA,WAAqB;MACnBb,UAAM,EAANA,UAAM;MACRC,UAAA,EAAAA;IACA;IAEa,iBAAAmB,IAAA,EAAAC,MAAA;MACX,OAAAC,SAAA,IAAAC,WAAA,CAAAC,KAAA,CAAAC,UAAA;QACAC,EAAA,EAAAN,IAAA,CAAAO,QAAA;QACAC,QAAA,EAAAR,IAAA,CAAAO,QAAA,uBAAAP,IAAA,CAAAS;MAAA,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}