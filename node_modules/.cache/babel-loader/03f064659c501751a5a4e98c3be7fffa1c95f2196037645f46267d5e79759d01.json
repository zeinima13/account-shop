{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { isClient } from '@vueuse/core';\nimport { easeInOutCubic } from '../easings.mjs';\nimport { isWindow } from '../types.mjs';\nimport { rAF, cAF } from '../raf.mjs';\nimport { getStyle } from './style.mjs';\nimport { isFunction } from '@vue/shared';\nvar isScroll = function isScroll(el, isVertical) {\n  if (!isClient) return false;\n  var key = {\n    undefined: \"overflow\",\n    \"true\": \"overflow-y\",\n    \"false\": \"overflow-x\"\n  }[String(isVertical)];\n  var overflow = getStyle(el, key);\n  return [\"scroll\", \"auto\", \"overlay\"].some(function (s) {\n    return overflow.includes(s);\n  });\n};\nvar getScrollContainer = function getScrollContainer(el, isVertical) {\n  if (!isClient) return;\n  var parent = el;\n  while (parent) {\n    if ([window, document, document.documentElement].includes(parent)) return window;\n    if (isScroll(parent, isVertical)) return parent;\n    parent = parent.parentNode;\n  }\n  return parent;\n};\nvar scrollBarWidth;\nvar getScrollBarWidth = function getScrollBarWidth(namespace) {\n  var _a;\n  if (!isClient) return 0;\n  if (scrollBarWidth !== void 0) return scrollBarWidth;\n  var outer = document.createElement(\"div\");\n  outer.className = \"\".concat(namespace, \"-scrollbar__wrap\");\n  outer.style.visibility = \"hidden\";\n  outer.style.width = \"100px\";\n  outer.style.position = \"absolute\";\n  outer.style.top = \"-9999px\";\n  document.body.appendChild(outer);\n  var widthNoScroll = outer.offsetWidth;\n  outer.style.overflow = \"scroll\";\n  var inner = document.createElement(\"div\");\n  inner.style.width = \"100%\";\n  outer.appendChild(inner);\n  var widthWithScroll = inner.offsetWidth;\n  (_a = outer.parentNode) == null ? void 0 : _a.removeChild(outer);\n  scrollBarWidth = widthNoScroll - widthWithScroll;\n  return scrollBarWidth;\n};\nfunction scrollIntoView(container, selected) {\n  if (!isClient) return;\n  if (!selected) {\n    container.scrollTop = 0;\n    return;\n  }\n  var offsetParents = [];\n  var pointer = selected.offsetParent;\n  while (pointer !== null && container !== pointer && container.contains(pointer)) {\n    offsetParents.push(pointer);\n    pointer = pointer.offsetParent;\n  }\n  var top = selected.offsetTop + offsetParents.reduce(function (prev, curr) {\n    return prev + curr.offsetTop;\n  }, 0);\n  var bottom = top + selected.offsetHeight;\n  var viewRectTop = container.scrollTop;\n  var viewRectBottom = viewRectTop + container.clientHeight;\n  if (top < viewRectTop) {\n    container.scrollTop = top;\n  } else if (bottom > viewRectBottom) {\n    container.scrollTop = bottom - container.clientHeight;\n  }\n}\nfunction animateScrollTo(container, from, to, duration, callback) {\n  var startTime = Date.now();\n  var handle;\n  var _scroll = function scroll() {\n    var timestamp = Date.now();\n    var time = timestamp - startTime;\n    var nextScrollTop = easeInOutCubic(time > duration ? duration : time, from, to, duration);\n    if (isWindow(container)) {\n      container.scrollTo(window.pageXOffset, nextScrollTop);\n    } else {\n      container.scrollTop = nextScrollTop;\n    }\n    if (time < duration) {\n      handle = rAF(_scroll);\n    } else if (isFunction(callback)) {\n      callback();\n    }\n  };\n  _scroll();\n  return function () {\n    handle && cAF(handle);\n  };\n}\nvar getScrollElement = function getScrollElement(target, container) {\n  if (isWindow(container)) {\n    return target.ownerDocument.documentElement;\n  }\n  return container;\n};\nvar getScrollTop = function getScrollTop(container) {\n  if (isWindow(container)) {\n    return window.scrollY;\n  }\n  return container.scrollTop;\n};\nexport { animateScrollTo, getScrollBarWidth, getScrollContainer, getScrollElement, getScrollTop, isScroll, scrollIntoView };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}