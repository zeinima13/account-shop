{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { defineComponent, ref, inject, computed, provide, readonly, toRef, unref, watch, renderSlot } from 'vue';\nimport { useEventListener } from '@vueuse/core';\nimport { rovingFocusGroupProps, ROVING_FOCUS_COLLECTION_INJECTION_KEY as COLLECTION_INJECTION_KEY } from './roving-focus-group.mjs';\nimport { ROVING_FOCUS_GROUP_INJECTION_KEY } from './tokens.mjs';\nimport { focusFirst } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nvar CURRENT_TAB_ID_CHANGE_EVT = \"currentTabIdChange\";\nvar ENTRY_FOCUS_EVT = \"rovingFocusGroup.entryFocus\";\nvar EVT_OPTS = {\n  bubbles: false,\n  cancelable: true\n};\nvar _sfc_main = defineComponent({\n  name: \"ElRovingFocusGroupImpl\",\n  inheritAttrs: false,\n  props: rovingFocusGroupProps,\n  emits: [CURRENT_TAB_ID_CHANGE_EVT, \"entryFocus\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var _a;\n    var currentTabbedId = ref((_a = props.currentTabId || props.defaultCurrentTabId) != null ? _a : null);\n    var isBackingOut = ref(false);\n    var isClickFocus = ref(false);\n    var rovingFocusGroupRef = ref(null);\n    var _inject = inject(COLLECTION_INJECTION_KEY, void 0),\n      getItems = _inject.getItems;\n    var rovingFocusGroupRootStyle = computed(function () {\n      return [{\n        outline: \"none\"\n      }, props.style];\n    });\n    var onItemFocus = function onItemFocus(tabbedId) {\n      emit(CURRENT_TAB_ID_CHANGE_EVT, tabbedId);\n    };\n    var onItemShiftTab = function onItemShiftTab() {\n      isBackingOut.value = true;\n    };\n    var onMousedown = composeEventHandlers(function (e) {\n      var _a2;\n      (_a2 = props.onMousedown) == null ? void 0 : _a2.call(props, e);\n    }, function () {\n      isClickFocus.value = true;\n    });\n    var onFocus = composeEventHandlers(function (e) {\n      var _a2;\n      (_a2 = props.onFocus) == null ? void 0 : _a2.call(props, e);\n    }, function (e) {\n      var isKeyboardFocus = !unref(isClickFocus);\n      var target = e.target,\n        currentTarget = e.currentTarget;\n      if (target === currentTarget && isKeyboardFocus && !unref(isBackingOut)) {\n        var entryFocusEvt = new Event(ENTRY_FOCUS_EVT, EVT_OPTS);\n        currentTarget == null ? void 0 : currentTarget.dispatchEvent(entryFocusEvt);\n        if (!entryFocusEvt.defaultPrevented) {\n          var items = getItems().filter(function (item) {\n            return item.focusable;\n          });\n          var activeItem = items.find(function (item) {\n            return item.active;\n          });\n          var currentItem = items.find(function (item) {\n            return item.id === unref(currentTabbedId);\n          });\n          var candidates = [activeItem, currentItem].concat(_toConsumableArray(items)).filter(Boolean);\n          var candidateNodes = candidates.map(function (item) {\n            return item.ref;\n          });\n          focusFirst(candidateNodes);\n        }\n      }\n      isClickFocus.value = false;\n    });\n    var onBlur = composeEventHandlers(function (e) {\n      var _a2;\n      (_a2 = props.onBlur) == null ? void 0 : _a2.call(props, e);\n    }, function () {\n      isBackingOut.value = false;\n    });\n    var handleEntryFocus = function handleEntryFocus() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      emit.apply(void 0, [\"entryFocus\"].concat(args));\n    };\n    provide(ROVING_FOCUS_GROUP_INJECTION_KEY, {\n      currentTabbedId: readonly(currentTabbedId),\n      loop: toRef(props, \"loop\"),\n      tabIndex: computed(function () {\n        return unref(isBackingOut) ? -1 : 0;\n      }),\n      rovingFocusGroupRef: rovingFocusGroupRef,\n      rovingFocusGroupRootStyle: rovingFocusGroupRootStyle,\n      orientation: toRef(props, \"orientation\"),\n      dir: toRef(props, \"dir\"),\n      onItemFocus: onItemFocus,\n      onItemShiftTab: onItemShiftTab,\n      onBlur: onBlur,\n      onFocus: onFocus,\n      onMousedown: onMousedown\n    });\n    watch(function () {\n      return props.currentTabId;\n    }, function (val) {\n      currentTabbedId.value = val != null ? val : null;\n    });\n    useEventListener(rovingFocusGroupRef, ENTRY_FOCUS_EVT, handleEntryFocus);\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return renderSlot(_ctx.$slots, \"default\");\n}\nvar ElRovingFocusGroupImpl = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"roving-focus-group-impl.vue\"]]);\nexport { ElRovingFocusGroupImpl as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}