{"ast":null,"code":"import _defineProperty from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { defineComponent, useSlots, computed, provide, getCurrentInstance, openBlock, createElementBlock, normalizeClass, unref, createBlock, withCtx, normalizeStyle, renderSlot, createElementVNode, toDisplayString } from 'vue';\nimport { useTree } from './composables/useTree.mjs';\nimport ElTreeNode from './tree-node.mjs';\nimport { treeProps, treeEmits, ROOT_TREE_INJECTION_KEY } from './virtual-tree.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport { formItemContextKey } from '../../form/src/constants.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar __default__ = defineComponent({\n  name: \"ElTreeV2\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: treeProps,\n  emits: treeEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var slots = useSlots();\n    var treeNodeSize = computed(function () {\n      return props.itemSize;\n    });\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx: {\n        emit: emit,\n        slots: slots\n      },\n      props: props,\n      instance: getCurrentInstance()\n    });\n    provide(formItemContextKey, void 0);\n    var _useLocale = useLocale(),\n      t = _useLocale.t;\n    var ns = useNamespace(\"tree\");\n    var _useTree = useTree(props, emit),\n      flattenTree = _useTree.flattenTree,\n      isNotEmpty = _useTree.isNotEmpty,\n      listRef = _useTree.listRef,\n      toggleExpand = _useTree.toggleExpand,\n      isExpanded = _useTree.isExpanded,\n      isIndeterminate = _useTree.isIndeterminate,\n      isChecked = _useTree.isChecked,\n      isDisabled = _useTree.isDisabled,\n      isCurrent = _useTree.isCurrent,\n      isForceHiddenExpandIcon = _useTree.isForceHiddenExpandIcon,\n      handleNodeClick = _useTree.handleNodeClick,\n      handleNodeDrop = _useTree.handleNodeDrop,\n      handleNodeCheck = _useTree.handleNodeCheck,\n      toggleCheckbox = _useTree.toggleCheckbox,\n      getCurrentNode = _useTree.getCurrentNode,\n      getCurrentKey = _useTree.getCurrentKey,\n      setCurrentKey = _useTree.setCurrentKey,\n      getCheckedKeys = _useTree.getCheckedKeys,\n      getCheckedNodes = _useTree.getCheckedNodes,\n      getHalfCheckedKeys = _useTree.getHalfCheckedKeys,\n      getHalfCheckedNodes = _useTree.getHalfCheckedNodes,\n      setChecked = _useTree.setChecked,\n      setCheckedKeys = _useTree.setCheckedKeys,\n      filter = _useTree.filter,\n      setData = _useTree.setData,\n      getNode = _useTree.getNode,\n      expandNode = _useTree.expandNode,\n      collapseNode = _useTree.collapseNode,\n      setExpandedKeys = _useTree.setExpandedKeys,\n      scrollToNode = _useTree.scrollToNode,\n      scrollTo = _useTree.scrollTo;\n    expose({\n      toggleCheckbox: toggleCheckbox,\n      getCurrentNode: getCurrentNode,\n      getCurrentKey: getCurrentKey,\n      setCurrentKey: setCurrentKey,\n      getCheckedKeys: getCheckedKeys,\n      getCheckedNodes: getCheckedNodes,\n      getHalfCheckedKeys: getHalfCheckedKeys,\n      getHalfCheckedNodes: getHalfCheckedNodes,\n      setChecked: setChecked,\n      setCheckedKeys: setCheckedKeys,\n      filter: filter,\n      setData: setData,\n      getNode: getNode,\n      expandNode: expandNode,\n      collapseNode: collapseNode,\n      setExpandedKeys: setExpandedKeys,\n      scrollToNode: scrollToNode,\n      scrollTo: scrollTo\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass([unref(ns).b(), _defineProperty({}, unref(ns).m(\"highlight-current\"), _ctx.highlightCurrent)]),\n        role: \"tree\"\n      }, [unref(isNotEmpty) ? (openBlock(), createBlock(unref(FixedSizeList), {\n        key: 0,\n        ref_key: \"listRef\",\n        ref: listRef,\n        \"class-name\": unref(ns).b(\"virtual-list\"),\n        data: unref(flattenTree),\n        total: unref(flattenTree).length,\n        height: _ctx.height,\n        \"item-size\": unref(treeNodeSize),\n        \"perf-mode\": _ctx.perfMode\n      }, {\n        \"default\": withCtx(function (_ref3) {\n          var data = _ref3.data,\n            index = _ref3.index,\n            style = _ref3.style;\n          return [(openBlock(), createBlock(ElTreeNode, {\n            key: data[index].key,\n            style: normalizeStyle(style),\n            node: data[index],\n            expanded: unref(isExpanded)(data[index]),\n            \"show-checkbox\": _ctx.showCheckbox,\n            checked: unref(isChecked)(data[index]),\n            indeterminate: unref(isIndeterminate)(data[index]),\n            \"item-size\": unref(treeNodeSize),\n            disabled: unref(isDisabled)(data[index]),\n            current: unref(isCurrent)(data[index]),\n            \"hidden-expand-icon\": unref(isForceHiddenExpandIcon)(data[index]),\n            onClick: unref(handleNodeClick),\n            onToggle: unref(toggleExpand),\n            onCheck: unref(handleNodeCheck),\n            onDrop: unref(handleNodeDrop)\n          }, null, 8, [\"style\", \"node\", \"expanded\", \"show-checkbox\", \"checked\", \"indeterminate\", \"item-size\", \"disabled\", \"current\", \"hidden-expand-icon\", \"onClick\", \"onToggle\", \"onCheck\", \"onDrop\"]))];\n        }),\n        _: 1\n      }, 8, [\"class-name\", \"data\", \"total\", \"height\", \"item-size\", \"perf-mode\"])) : (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        \"class\": normalizeClass(unref(ns).e(\"empty-block\"))\n      }, [renderSlot(_ctx.$slots, \"empty\", {}, function () {\n        var _a;\n        return [createElementVNode(\"span\", {\n          \"class\": normalizeClass(unref(ns).e(\"empty-text\"))\n        }, toDisplayString((_a = _ctx.emptyText) != null ? _a : unref(t)(\"el.tree.emptyText\")), 3)];\n      })], 2))], 2);\n    };\n  }\n}));\nvar TreeV2 = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"tree.vue\"]]);\nexport { TreeV2 as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}