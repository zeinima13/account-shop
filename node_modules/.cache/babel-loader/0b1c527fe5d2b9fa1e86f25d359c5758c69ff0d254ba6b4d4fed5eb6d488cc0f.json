{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { toRefs, computed, nextTick, watch } from 'vue';\nimport { pick, isEqual, isNil } from 'lodash-unified';\nimport { ElTree } from '../../tree/index.mjs';\nimport component from './tree-select-option.mjs';\nimport { treeEach, toValidArray, treeFind, isValidValue, isValidArray } from './utils.mjs';\nimport { escapeStringRegexp } from '../../../utils/strings.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { isFunction } from '@vue/shared';\nimport { isEmpty } from '../../../utils/types.mjs';\nvar useTree = function useTree(props, _ref, _ref2) {\n  var attrs = _ref.attrs,\n    slots = _ref.slots,\n    emit = _ref.emit;\n  var select = _ref2.select,\n    tree = _ref2.tree,\n    key = _ref2.key;\n  watch(function () {\n    return props.modelValue;\n  }, function () {\n    if (props.showCheckbox) {\n      nextTick(function () {\n        var treeInstance = tree.value;\n        if (treeInstance && !isEqual(treeInstance.getCheckedKeys(), toValidArray(props.modelValue))) {\n          treeInstance.setCheckedKeys(toValidArray(props.modelValue));\n        }\n      });\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  var propsMap = computed(function () {\n    return _objectSpread({\n      value: key.value,\n      label: \"label\",\n      children: \"children\",\n      disabled: \"disabled\",\n      isLeaf: \"isLeaf\"\n    }, props.props);\n  });\n  var _getNodeValByProp = function getNodeValByProp(prop, data) {\n    var _a;\n    var propVal = propsMap.value[prop];\n    if (isFunction(propVal)) {\n      return propVal(data, (_a = tree.value) == null ? void 0 : _a.getNode(_getNodeValByProp(\"value\", data)));\n    } else {\n      return data[propVal];\n    }\n  };\n  var defaultExpandedParentKeys = toValidArray(props.modelValue).map(function (value) {\n    return treeFind(props.data || [], function (data) {\n      return _getNodeValByProp(\"value\", data) === value;\n    }, function (data) {\n      return _getNodeValByProp(\"children\", data);\n    }, function (data, index, array, parent) {\n      return parent && _getNodeValByProp(\"value\", parent);\n    });\n  }).filter(function (item) {\n    return isValidValue(item);\n  });\n  var cacheOptions = computed(function () {\n    if (!props.renderAfterExpand && !props.lazy) return [];\n    var options = [];\n    treeEach(props.data.concat(props.cacheData), function (node) {\n      var value = _getNodeValByProp(\"value\", node);\n      options.push({\n        value: value,\n        currentLabel: _getNodeValByProp(\"label\", node),\n        isDisabled: _getNodeValByProp(\"disabled\", node)\n      });\n    }, function (data) {\n      return _getNodeValByProp(\"children\", data);\n    });\n    return options;\n  });\n  var getChildCheckedKeys = function getChildCheckedKeys() {\n    var _a;\n    return (_a = tree.value) == null ? void 0 : _a.getCheckedKeys().filter(function (checkedKey) {\n      var _a2;\n      var node = (_a2 = tree.value) == null ? void 0 : _a2.getNode(checkedKey);\n      return !isNil(node) && isEmpty(node.childNodes);\n    });\n  };\n  return _objectSpread(_objectSpread(_objectSpread({}, pick(toRefs(props), Object.keys(ElTree.props))), attrs), {}, {\n    nodeKey: key,\n    expandOnClickNode: computed(function () {\n      return !props.checkStrictly && props.expandOnClickNode;\n    }),\n    defaultExpandedKeys: computed(function () {\n      return props.defaultExpandedKeys ? props.defaultExpandedKeys.concat(defaultExpandedParentKeys) : defaultExpandedParentKeys;\n    }),\n    renderContent: function renderContent(h, _ref3) {\n      var node = _ref3.node,\n        data = _ref3.data,\n        store = _ref3.store;\n      return h(component, {\n        value: _getNodeValByProp(\"value\", data),\n        label: _getNodeValByProp(\"label\", data),\n        disabled: _getNodeValByProp(\"disabled\", data),\n        visible: node.visible\n      }, props.renderContent ? function () {\n        return props.renderContent(h, {\n          node: node,\n          data: data,\n          store: store\n        });\n      } : slots[\"default\"] ? function () {\n        return slots[\"default\"]({\n          node: node,\n          data: data,\n          store: store\n        });\n      } : void 0);\n    },\n    filterNodeMethod: function filterNodeMethod(value, data, node) {\n      if (props.filterNodeMethod) return props.filterNodeMethod(value, data, node);\n      if (!value) return true;\n      var regexp = new RegExp(escapeStringRegexp(value), \"i\");\n      return regexp.test(_getNodeValByProp(\"label\", data) || \"\");\n    },\n    onNodeClick: function onNodeClick(data, node, e) {\n      var _a, _b, _c, _d;\n      (_a = attrs.onNodeClick) == null ? void 0 : _a.call(attrs, data, node, e);\n      if (props.showCheckbox && props.checkOnClickNode) return;\n      if (!props.showCheckbox && (props.checkStrictly || node.isLeaf)) {\n        if (!_getNodeValByProp(\"disabled\", data)) {\n          var option = (_b = select.value) == null ? void 0 : _b.states.options.get(_getNodeValByProp(\"value\", data));\n          (_c = select.value) == null ? void 0 : _c.handleOptionSelect(option);\n        }\n      } else if (props.expandOnClickNode) {\n        e.proxy.handleExpandIconClick();\n      }\n      (_d = select.value) == null ? void 0 : _d.focus();\n    },\n    onCheck: function onCheck(data, params) {\n      var _a;\n      if (!props.showCheckbox) return;\n      var dataValue = _getNodeValByProp(\"value\", data);\n      var dataMap = {};\n      treeEach([tree.value.store.root], function (node) {\n        return dataMap[node.key] = node;\n      }, function (node) {\n        return node.childNodes;\n      });\n      var uncachedCheckedKeys = params.checkedKeys;\n      var cachedKeys = props.multiple ? toValidArray(props.modelValue).filter(function (item) {\n        return !(item in dataMap) && !uncachedCheckedKeys.includes(item);\n      }) : [];\n      var checkedKeys = cachedKeys.concat(uncachedCheckedKeys);\n      if (props.checkStrictly) {\n        emit(UPDATE_MODEL_EVENT, props.multiple ? checkedKeys : checkedKeys.includes(dataValue) ? dataValue : void 0);\n      } else {\n        if (props.multiple) {\n          var childKeys = getChildCheckedKeys();\n          emit(UPDATE_MODEL_EVENT, cachedKeys.concat(childKeys));\n        } else {\n          var firstLeaf = treeFind([data], function (data2) {\n            return !isValidArray(_getNodeValByProp(\"children\", data2)) && !_getNodeValByProp(\"disabled\", data2);\n          }, function (data2) {\n            return _getNodeValByProp(\"children\", data2);\n          });\n          var firstLeafKey = firstLeaf ? _getNodeValByProp(\"value\", firstLeaf) : void 0;\n          var hasCheckedChild = isValidValue(props.modelValue) && !!treeFind([data], function (data2) {\n            return _getNodeValByProp(\"value\", data2) === props.modelValue;\n          }, function (data2) {\n            return _getNodeValByProp(\"children\", data2);\n          });\n          emit(UPDATE_MODEL_EVENT, firstLeafKey === props.modelValue || hasCheckedChild ? void 0 : firstLeafKey);\n        }\n      }\n      nextTick(function () {\n        var _a2;\n        var checkedKeys2 = toValidArray(props.modelValue);\n        tree.value.setCheckedKeys(checkedKeys2);\n        (_a2 = attrs.onCheck) == null ? void 0 : _a2.call(attrs, data, {\n          checkedKeys: tree.value.getCheckedKeys(),\n          checkedNodes: tree.value.getCheckedNodes(),\n          halfCheckedKeys: tree.value.getHalfCheckedKeys(),\n          halfCheckedNodes: tree.value.getHalfCheckedNodes()\n        });\n      });\n      (_a = select.value) == null ? void 0 : _a.focus();\n    },\n    onNodeExpand: function onNodeExpand(data, node, e) {\n      var _a;\n      (_a = attrs.onNodeExpand) == null ? void 0 : _a.call(attrs, data, node, e);\n      nextTick(function () {\n        if (!props.checkStrictly && props.lazy && props.multiple && node.checked) {\n          var dataMap = {};\n          var uncachedCheckedKeys = tree.value.getCheckedKeys();\n          treeEach([tree.value.store.root], function (node2) {\n            return dataMap[node2.key] = node2;\n          }, function (node2) {\n            return node2.childNodes;\n          });\n          var cachedKeys = toValidArray(props.modelValue).filter(function (item) {\n            return !(item in dataMap) && !uncachedCheckedKeys.includes(item);\n          });\n          var childKeys = getChildCheckedKeys();\n          emit(UPDATE_MODEL_EVENT, cachedKeys.concat(childKeys));\n        }\n      });\n    },\n    cacheOptions: cacheOptions\n  });\n};\nexport { useTree };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}