{"ast":null,"code":"import _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { isArray } from '@vue/shared';\nvar FontGap = 3;\nfunction prepareCanvas(width, height) {\n  var ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var canvas = document.createElement(\"canvas\");\n  var ctx = canvas.getContext(\"2d\");\n  var realWidth = width * ratio;\n  var realHeight = height * ratio;\n  canvas.setAttribute(\"width\", \"\".concat(realWidth, \"px\"));\n  canvas.setAttribute(\"height\", \"\".concat(realHeight, \"px\"));\n  ctx.save();\n  return [ctx, canvas, realWidth, realHeight];\n}\nfunction useClips() {\n  function getClips(content, rotate, ratio, width, height, font, gapX, gapY) {\n    var _prepareCanvas = prepareCanvas(width, height, ratio),\n      _prepareCanvas2 = _slicedToArray(_prepareCanvas, 4),\n      ctx = _prepareCanvas2[0],\n      canvas = _prepareCanvas2[1],\n      contentWidth = _prepareCanvas2[2],\n      contentHeight = _prepareCanvas2[3];\n    if (content instanceof HTMLImageElement) {\n      ctx.drawImage(content, 0, 0, contentWidth, contentHeight);\n    } else {\n      var color = font.color,\n        fontSize = font.fontSize,\n        fontStyle = font.fontStyle,\n        fontWeight = font.fontWeight,\n        fontFamily = font.fontFamily,\n        textAlign = font.textAlign,\n        textBaseline = font.textBaseline;\n      var mergedFontSize = Number(fontSize) * ratio;\n      ctx.font = \"\".concat(fontStyle, \" normal \").concat(fontWeight, \" \").concat(mergedFontSize, \"px/\").concat(height, \"px \").concat(fontFamily);\n      ctx.fillStyle = color;\n      ctx.textAlign = textAlign;\n      ctx.textBaseline = textBaseline;\n      var contents = isArray(content) ? content : [content];\n      contents == null ? void 0 : contents.forEach(function (item, index) {\n        ctx.fillText(item != null ? item : \"\", contentWidth / 2, index * (mergedFontSize + FontGap * ratio));\n      });\n    }\n    var angle = Math.PI / 180 * Number(rotate);\n    var maxSize = Math.max(width, height);\n    var _prepareCanvas3 = prepareCanvas(maxSize, maxSize, ratio),\n      _prepareCanvas4 = _slicedToArray(_prepareCanvas3, 3),\n      rCtx = _prepareCanvas4[0],\n      rCanvas = _prepareCanvas4[1],\n      realMaxSize = _prepareCanvas4[2];\n    rCtx.translate(realMaxSize / 2, realMaxSize / 2);\n    rCtx.rotate(angle);\n    if (contentWidth > 0 && contentHeight > 0) {\n      rCtx.drawImage(canvas, -contentWidth / 2, -contentHeight / 2);\n    }\n    function getRotatePos(x, y) {\n      var targetX = x * Math.cos(angle) - y * Math.sin(angle);\n      var targetY = x * Math.sin(angle) + y * Math.cos(angle);\n      return [targetX, targetY];\n    }\n    var left = 0;\n    var right = 0;\n    var top = 0;\n    var bottom = 0;\n    var halfWidth = contentWidth / 2;\n    var halfHeight = contentHeight / 2;\n    var points = [[0 - halfWidth, 0 - halfHeight], [0 + halfWidth, 0 - halfHeight], [0 + halfWidth, 0 + halfHeight], [0 - halfWidth, 0 + halfHeight]];\n    points.forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        x = _ref2[0],\n        y = _ref2[1];\n      var _getRotatePos = getRotatePos(x, y),\n        _getRotatePos2 = _slicedToArray(_getRotatePos, 2),\n        targetX = _getRotatePos2[0],\n        targetY = _getRotatePos2[1];\n      left = Math.min(left, targetX);\n      right = Math.max(right, targetX);\n      top = Math.min(top, targetY);\n      bottom = Math.max(bottom, targetY);\n    });\n    var cutLeft = left + realMaxSize / 2;\n    var cutTop = top + realMaxSize / 2;\n    var cutWidth = right - left;\n    var cutHeight = bottom - top;\n    var realGapX = gapX * ratio;\n    var realGapY = gapY * ratio;\n    var filledWidth = (cutWidth + realGapX) * 2;\n    var filledHeight = cutHeight + realGapY;\n    var _prepareCanvas5 = prepareCanvas(filledWidth, filledHeight),\n      _prepareCanvas6 = _slicedToArray(_prepareCanvas5, 2),\n      fCtx = _prepareCanvas6[0],\n      fCanvas = _prepareCanvas6[1];\n    function drawImg() {\n      var targetX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var targetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      fCtx.drawImage(rCanvas, cutLeft, cutTop, cutWidth, cutHeight, targetX, targetY, cutWidth, cutHeight);\n    }\n    drawImg();\n    drawImg(cutWidth + realGapX, -cutHeight / 2 - realGapY / 2);\n    drawImg(cutWidth + realGapX, +cutHeight / 2 + realGapY / 2);\n    return [fCanvas.toDataURL(), filledWidth / ratio, filledHeight / ratio];\n  }\n  return getClips;\n}\nexport { FontGap, useClips as default };","map":{"version":3,"names":["FontGap","prepareCanvas","width","height","ratio","arguments","length","undefined","canvas","document","createElement","ctx","getContext","realWidth","realHeight","setAttribute","concat","save","useClips","getClips","content","rotate","font","gapX","gapY","_prepareCanvas","_prepareCanvas2","_slicedToArray","contentWidth","contentHeight","HTMLImageElement","drawImage","color","fontSize","fontStyle","fontWeight","fontFamily","textAlign","textBaseline","mergedFontSize","Number","fillStyle","contents","isArray","forEach","item","index","fillText","angle","Math","PI","maxSize","max","_prepareCanvas3","_prepareCanvas4","rCtx","rCanvas","realMaxSize","translate","getRotatePos","x","y","targetX","cos","sin","targetY","left","right","top","bottom","halfWidth","halfHeight","points","_ref","_ref2","_getRotatePos","_getRotatePos2","min","cutLeft","cutTop","cutWidth","cutHeight","realGapX","realGapY","filledWidth","filledHeight","_prepareCanvas5","_prepareCanvas6","fCtx","fCanvas","drawImg","toDataURL"],"sources":["../../../../../../packages/components/watermark/src/useClips.ts"],"sourcesContent":["import { isArray } from '@element-plus/utils'\n\nimport type { WatermarkProps } from './watermark'\n\nexport const FontGap = 3\n\nfunction prepareCanvas(\n  width: number,\n  height: number,\n  ratio = 1\n): [\n  ctx: CanvasRenderingContext2D,\n  canvas: HTMLCanvasElement,\n  realWidth: number,\n  realHeight: number\n] {\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')!\n  const realWidth = width * ratio\n  const realHeight = height * ratio\n  canvas.setAttribute('width', `${realWidth}px`)\n  canvas.setAttribute('height', `${realHeight}px`)\n  ctx.save()\n\n  return [ctx, canvas, realWidth, realHeight]\n}\n\n/**\n * Get the clips of text content.\n * This is a lazy hook function since SSR no need this\n */\nexport default function useClips() {\n  // Get single clips\n  function getClips(\n    content: NonNullable<WatermarkProps['content']> | HTMLImageElement,\n    rotate: number,\n    ratio: number,\n    width: number,\n    height: number,\n    font: Required<NonNullable<WatermarkProps['font']>>,\n    gapX: number,\n    gapY: number\n  ): [dataURL: string, finalWidth: number, finalHeight: number] {\n    // ================= Text / Image =================\n    const [ctx, canvas, contentWidth, contentHeight] = prepareCanvas(\n      width,\n      height,\n      ratio\n    )\n\n    if (content instanceof HTMLImageElement) {\n      // Image\n      ctx.drawImage(content, 0, 0, contentWidth, contentHeight)\n    } else {\n      // Text\n      const {\n        color,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        fontFamily,\n        textAlign,\n        textBaseline,\n      } = font\n      const mergedFontSize = Number(fontSize) * ratio\n\n      ctx.font = `${fontStyle} normal ${fontWeight} ${mergedFontSize}px/${height}px ${fontFamily}`\n      ctx.fillStyle = color\n      ctx.textAlign = textAlign\n      ctx.textBaseline = textBaseline\n      const contents = isArray(content) ? content : [content]\n      contents?.forEach((item, index) => {\n        ctx.fillText(\n          item ?? '',\n          contentWidth / 2,\n          index * (mergedFontSize + FontGap * ratio)\n        )\n      })\n    }\n\n    // ==================== Rotate ====================\n    const angle = (Math.PI / 180) * Number(rotate)\n    const maxSize = Math.max(width, height)\n    const [rCtx, rCanvas, realMaxSize] = prepareCanvas(maxSize, maxSize, ratio)\n\n    // Copy from `ctx` and rotate\n    rCtx.translate(realMaxSize / 2, realMaxSize / 2)\n    rCtx.rotate(angle)\n    if (contentWidth > 0 && contentHeight > 0) {\n      rCtx.drawImage(canvas, -contentWidth / 2, -contentHeight / 2)\n    }\n\n    // Get boundary of rotated text\n    function getRotatePos(x: number, y: number) {\n      const targetX = x * Math.cos(angle) - y * Math.sin(angle)\n      const targetY = x * Math.sin(angle) + y * Math.cos(angle)\n      return [targetX, targetY]\n    }\n\n    let left = 0\n    let right = 0\n    let top = 0\n    let bottom = 0\n\n    const halfWidth = contentWidth / 2\n    const halfHeight = contentHeight / 2\n    const points = [\n      [0 - halfWidth, 0 - halfHeight],\n      [0 + halfWidth, 0 - halfHeight],\n      [0 + halfWidth, 0 + halfHeight],\n      [0 - halfWidth, 0 + halfHeight],\n    ]\n    points.forEach(([x, y]) => {\n      const [targetX, targetY] = getRotatePos(x, y)\n      left = Math.min(left, targetX)\n      right = Math.max(right, targetX)\n      top = Math.min(top, targetY)\n      bottom = Math.max(bottom, targetY)\n    })\n\n    const cutLeft = left + realMaxSize / 2\n    const cutTop = top + realMaxSize / 2\n    const cutWidth = right - left\n    const cutHeight = bottom - top\n\n    // ================ Fill Alternate ================\n    const realGapX = gapX * ratio\n    const realGapY = gapY * ratio\n    const filledWidth = (cutWidth + realGapX) * 2\n    const filledHeight = cutHeight + realGapY\n\n    const [fCtx, fCanvas] = prepareCanvas(filledWidth, filledHeight)\n\n    function drawImg(targetX = 0, targetY = 0) {\n      fCtx.drawImage(\n        rCanvas,\n        cutLeft,\n        cutTop,\n        cutWidth,\n        cutHeight,\n        targetX,\n        targetY,\n        cutWidth,\n        cutHeight\n      )\n    }\n    drawImg()\n    drawImg(cutWidth + realGapX, -cutHeight / 2 - realGapY / 2)\n    drawImg(cutWidth + realGapX, +cutHeight / 2 + realGapY / 2)\n\n    return [fCanvas.toDataURL(), filledWidth / ratio, filledHeight / ratio]\n  }\n\n  return getClips\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}