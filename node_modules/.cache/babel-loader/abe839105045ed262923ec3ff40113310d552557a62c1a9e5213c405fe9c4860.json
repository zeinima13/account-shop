{"ast":null,"code":"import _defineProperty from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { watch } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport useStore from './index.mjs';\nimport { isObject } from '@vue/shared';\nvar InitialStateMap = _defineProperty(_defineProperty(_defineProperty({\n  rowKey: \"rowKey\",\n  defaultExpandAll: \"defaultExpandAll\",\n  selectOnIndeterminate: \"selectOnIndeterminate\",\n  indent: \"indent\",\n  lazy: \"lazy\",\n  data: \"data\"\n}, \"treeProps.hasChildren\", {\n  key: \"lazyColumnIdentifier\",\n  \"default\": \"hasChildren\"\n}), \"treeProps.children\", {\n  key: \"childrenColumnName\",\n  \"default\": \"children\"\n}), \"treeProps.checkStrictly\", {\n  key: \"checkStrictly\",\n  \"default\": false\n});\nfunction createStore(table, props) {\n  if (!table) {\n    throw new Error(\"Table is required.\");\n  }\n  var store = useStore();\n  store.toggleAllSelection = debounce(store._toggleAllSelection, 10);\n  Object.keys(InitialStateMap).forEach(function (key) {\n    handleValue(getArrKeysValue(props, key), key, store);\n  });\n  proxyTableProps(store, props);\n  return store;\n}\nfunction proxyTableProps(store, props) {\n  Object.keys(InitialStateMap).forEach(function (key) {\n    watch(function () {\n      return getArrKeysValue(props, key);\n    }, function (value) {\n      handleValue(value, key, store);\n    });\n  });\n}\nfunction handleValue(value, propsKey, store) {\n  var newVal = value;\n  var storeKey = InitialStateMap[propsKey];\n  if (isObject(InitialStateMap[propsKey])) {\n    storeKey = storeKey.key;\n    newVal = newVal || InitialStateMap[propsKey][\"default\"];\n  }\n  store.states[storeKey].value = newVal;\n}\nfunction getArrKeysValue(props, keys) {\n  if (keys.includes(\".\")) {\n    var keyList = keys.split(\".\");\n    var value = props;\n    keyList.forEach(function (key) {\n      value = value[key];\n    });\n    return value;\n  } else {\n    return props[keys];\n  }\n}\nexport { createStore };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}