{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { defineComponent, inject, ref, watch, watchEffect, openBlock, createElementBlock, normalizeClass, createElementVNode, Fragment, renderList, normalizeStyle } from 'vue';\nimport { colorPickerContextKey } from '../color-picker2.mjs';\nimport Color from '../utils/color.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nvar _sfc_main = defineComponent({\n  props: {\n    colors: {\n      type: Array,\n      required: true\n    },\n    color: {\n      type: Object,\n      required: true\n    },\n    enableAlpha: {\n      type: Boolean,\n      required: true\n    }\n  },\n  setup: function setup(props) {\n    var ns = useNamespace(\"color-predefine\");\n    var _inject = inject(colorPickerContextKey),\n      currentColor = _inject.currentColor;\n    var rgbaColors = ref(parseColors(props.colors, props.color));\n    watch(function () {\n      return currentColor.value;\n    }, function (val) {\n      var color = new Color();\n      color.fromString(val);\n      rgbaColors.value.forEach(function (item) {\n        item.selected = color.compare(item);\n      });\n    });\n    watchEffect(function () {\n      rgbaColors.value = parseColors(props.colors, props.color);\n    });\n    function handleSelect(index) {\n      props.color.fromString(props.colors[index]);\n    }\n    function parseColors(colors, color) {\n      return colors.map(function (value) {\n        var c = new Color();\n        c.enableAlpha = props.enableAlpha;\n        c.format = \"rgba\";\n        c.fromString(value);\n        c.selected = c.value === color.value;\n        return c;\n      });\n    }\n    return {\n      rgbaColors: rgbaColors,\n      handleSelect: handleSelect,\n      ns: ns\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    \"class\": normalizeClass(_ctx.ns.b())\n  }, [createElementVNode(\"div\", {\n    \"class\": normalizeClass(_ctx.ns.e(\"colors\"))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rgbaColors, function (item, index) {\n    return openBlock(), createElementBlock(\"div\", {\n      key: _ctx.colors[index],\n      \"class\": normalizeClass([_ctx.ns.e(\"color-selector\"), _ctx.ns.is(\"alpha\", item._alpha < 100), {\n        selected: item.selected\n      }]),\n      onClick: function onClick($event) {\n        return _ctx.handleSelect(index);\n      }\n    }, [createElementVNode(\"div\", {\n      style: normalizeStyle({\n        backgroundColor: item.value\n      })\n    }, null, 4)], 10, [\"onClick\"]);\n  }), 128))], 2)], 2);\n}\nvar Predefine = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"predefine.vue\"]]);\nexport { Predefine as default };","map":{"version":3,"names":["_sfc_main","defineComponent","props","colors","type","Array","required","color","Object","enableAlpha","Boolean","setup","ns","useNamespace","_inject","inject","colorPickerContextKey","currentColor","rgbaColors","ref","parseColors","watch","value","val","Color","fromString","forEach","item","selected","compare","watchEffect","handleSelect","index","map","c","format","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","openBlock","createElementBlock","createElementVNode","normalizeClass","e","Fragment","renderList","is","_alpha","style","normalizeStyle","backgroundColor","Predefine","_export_sfc"],"sources":["../../../../../../../packages/components/color-picker/src/components/predefine.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\">\n    <div :class=\"ns.e('colors')\">\n      <div\n        v-for=\"(item, index) in rgbaColors\"\n        :key=\"colors[index]\"\n        :class=\"[\n          ns.e('color-selector'),\n          ns.is('alpha', item._alpha < 100),\n          { selected: item.selected },\n        ]\"\n        @click=\"handleSelect(index)\"\n      >\n        <div :style=\"{ backgroundColor: item.value }\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject, ref, watch, watchEffect } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { colorPickerContextKey } from '../color-picker'\nimport Color from '../utils/color'\n\nimport type { PropType, Ref } from 'vue'\n\nexport default defineComponent({\n  props: {\n    colors: {\n      type: Array as PropType<string[]>,\n      required: true,\n    },\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n    enableAlpha: {\n      type: Boolean,\n      required: true,\n    },\n  },\n  setup(props) {\n    const ns = useNamespace('color-predefine')\n    const { currentColor } = inject(colorPickerContextKey)!\n\n    const rgbaColors = ref(parseColors(props.colors, props.color)) as Ref<\n      Color[]\n    >\n\n    watch(\n      () => currentColor.value,\n      (val) => {\n        const color = new Color()\n        color.fromString(val)\n\n        rgbaColors.value.forEach((item) => {\n          item.selected = color.compare(item)\n        })\n      }\n    )\n\n    watchEffect(() => {\n      rgbaColors.value = parseColors(props.colors, props.color)\n    })\n\n    function handleSelect(index: number) {\n      props.color.fromString(props.colors[index])\n    }\n\n    function parseColors(colors: string[], color: Color) {\n      return colors.map((value) => {\n        const c = new Color()\n        c.enableAlpha = props.enableAlpha\n        c.format = 'rgba'\n        c.fromString(value)\n        c.selected = c.value === color.value\n        return c\n      })\n    }\n    return {\n      rgbaColors,\n      handleSelect,\n      ns,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;;;;;;AA2BA,IAAKA,SAAA,GAAaC,eAAa;EAC7BC,KAAO;IACLC,MAAQ;MACNC,IAAM,EAAAC,KAAA;MACNC,QAAU;IAAA,CACZ;IACAC,KAAO;MACLH,IAAM,EAAAI,MAAA;MACNF,QAAU;IAAA,CACZ;IACAG,WAAa;MACXL,IAAM,EAAAM,OAAA;MACNJ,QAAU;IAAA;EACZ,CACF;EACAK,KAAA,WAAAA,MAAMT,KAAO;IACL,IAAAU,EAAA,GAAKC,YAAA,CAAa,iBAAiB;IACzC,IAAAC,OAAA,GAAyBC,MAAA,CAAOC,qBAAqB;MAA7CC,YAAA,GAAAH,OAAA,CAAAG,YAAA;IAER,IAAMC,UAAA,GAAaC,GAAI,CAAAC,WAAA,CAAYlB,KAAA,CAAMC,MAAQ,EAAAD,KAAA,CAAMK,KAAK,CAAC;IAI7Dc,KAAA;MAAA,OAAAJ,YAAA,CAAAK,KAAA;IAAA,aAAAC,GAAA;MACE,IAAMhB,KAAa,OAAAiB,KAAA;MACnBjB,KAAS,CAAAkB,UAAA,CAAAF,GAAA;MACDL,UAAA,CAAAI,KAAQ,CAAAI,OAAU,WAAAC,IAAA;QACxBA,IAAA,CAAAC,QAAA,GAAArB,KAAoB,CAAAsB,OAAA,CAAAF,IAAA;MAEpB,CAAW;IACT,CAAK;IAA6BG,WACnC;MACHZ,UAAA,CAAAI,KAAA,GAAAF,WAAA,CAAAlB,KAAA,CAAAC,MAAA,EAAAD,KAAA,CAAAK,KAAA;IAAA,CACF;IAEA,SAAAwB,YAAkBA,CAAAC,KAAA;MAChB9B,KAAA,CAAAK,KAAW,CAAQkB,UAAA,CAAAvB,KAAA,CAAAC,MAAkB,CAAA6B,KAAA;IAAmB;IAG1D,SAASZ,YAAAjB,MAA4B,EAAAI,KAAA;MACnC,OAAYJ,MAAA,CAAA8B,GAAA,WAAAX,KAAiB;QAC/B,IAAAY,CAAA,OAAAV,KAAA;QAESU,CAAA,CAAAzB,WAAA,GAAAP,KAAA,CAAAO,WAA4C;QAC5CyB,CAAA,CAAAC,MAAA,SAAY;QACXD,CAAA,CAAAT,UAAA,CAAAH,KAAc;QACpBY,CAAA,CAAEN,QAAA,GAAAM,CAAA,CAAAZ,KAAoB,KAAAf,KAAA,CAAAe,KAAA;QACtB,OAAWY,CAAA;MACX;IACA;IACO;MACThB,UAAC,EAADA,UAAC;MACHa,YAAA,EAAAA,YAAA;MACOnB,EAAA,EAAAA;IAAA,CACL;EAAA;AACA,CACA;AACF,SACFwB,YAAAC,IAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,QAAA;EACD,OAAAC,SAAA,IAAAC,kBAAA;;MArFCC,kBAAA;IAeM,SAAAC,cAAA,CAAAT,IAAA,CAAAzB,EAAA,CAAAmC,CAAA;EAAA,KAfAJ,SAAO,QAAAC,kBAAI,CAAAI,QAAA,QAAAC,UAAA,CAAAZ,IAAA,CAAAnB,UAAA,YAAAS,IAAA,EAAAK,KAAA;IAAA,OAAAW,SAAA,IAAAC,kBAAA;;MACf,SAAAE,cAAA,EAaMT,IAAA,CAAAzB,EAAA,CAAAmC,CAAA,oBAAAV,IAAA,CAAAzB,EAAA,CAAAsC,EAAA,UAAAvB,IAAA,CAAAwB,MAAA,SAbA;QAAAvB,QAAO,EAAAD,IAAA,CAAAC;MAAA,EAAI;;;;IACf,IAWMiB,kBAAA;MAAAO,KAAA,EAAAC,cAAA;QAAAC,eAAA,EAAA3B,IAAA,CAAAL;MAAA;IAAA,CAVoB,W;EAUpB,CATH,SAAiB,KACZ;AAAkB;AAAoG,IAAAiC,SAAA,kBAAAC,WAAA,CAAAxD,SAAA,cAAAoC,WAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}