{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { defineComponent, getCurrentInstance, useSlots, inject, ref, computed, watch, reactive, onMounted, onUnmounted, unref, withDirectives, openBlock, createElementBlock, normalizeClass, renderSlot, vShow, createCommentVNode } from 'vue';\nimport { eagerComputed } from '@vueuse/core';\nimport { tabsRootContextKey } from './constants.mjs';\nimport { tabPaneProps } from './tab-pane.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar COMPONENT_NAME = \"ElTabPane\";\nvar __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: tabPaneProps,\n  setup: function setup(__props) {\n    var props = __props;\n    var instance = getCurrentInstance();\n    var slots = useSlots();\n    var tabsRoot = inject(tabsRootContextKey);\n    if (!tabsRoot) throwError(COMPONENT_NAME, \"usage: <el-tabs><el-tab-pane /></el-tabs/>\");\n    var ns = useNamespace(\"tab-pane\");\n    var index = ref();\n    var isClosable = computed(function () {\n      return props.closable || tabsRoot.props.closable;\n    });\n    var active = eagerComputed(function () {\n      var _a;\n      return tabsRoot.currentName.value === ((_a = props.name) != null ? _a : index.value);\n    });\n    var loaded = ref(active.value);\n    var paneName = computed(function () {\n      var _a;\n      return (_a = props.name) != null ? _a : index.value;\n    });\n    var shouldBeRender = eagerComputed(function () {\n      return !props.lazy || loaded.value || active.value;\n    });\n    watch(active, function (val) {\n      if (val) loaded.value = true;\n    });\n    var pane = reactive({\n      uid: instance.uid,\n      slots: slots,\n      props: props,\n      paneName: paneName,\n      active: active,\n      index: index,\n      isClosable: isClosable\n    });\n    tabsRoot.registerPane(pane);\n    onMounted(function () {\n      tabsRoot.sortPane(pane);\n    });\n    onUnmounted(function () {\n      tabsRoot.unregisterPane(pane.uid);\n    });\n    return function (_ctx, _cache) {\n      return unref(shouldBeRender) ? withDirectives((openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        id: \"pane-\".concat(unref(paneName)),\n        \"class\": normalizeClass(unref(ns).b()),\n        role: \"tabpanel\",\n        \"aria-hidden\": !unref(active),\n        \"aria-labelledby\": \"tab-\".concat(unref(paneName))\n      }, [renderSlot(_ctx.$slots, \"default\")], 10, [\"id\", \"aria-hidden\", \"aria-labelledby\"])), [[vShow, unref(active)]]) : createCommentVNode(\"v-if\", true);\n    };\n  }\n}));\nvar TabPane = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"tab-pane.vue\"]]);\nexport { TabPane as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}