{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { defineComponent, inject, computed, onMounted, watch, onBeforeUnmount, openBlock, createBlock, unref, mergeProps, withCtx, renderSlot, createCommentVNode } from 'vue';\nimport { isNil } from 'lodash-unified';\nimport { unrefElement } from '@vueuse/core';\nimport { POPPER_INJECTION_KEY } from './constants.mjs';\nimport { popperTriggerProps } from './trigger.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useForwardRef } from '../../../hooks/use-forward-ref/index.mjs';\nimport { isFocusable } from '../../../utils/dom/aria.mjs';\nimport { OnlyChild } from '../../slot/src/only-child.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nvar __default__ = defineComponent({\n  name: \"ElPopperTrigger\",\n  inheritAttrs: false\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: popperTriggerProps,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    var _inject = inject(POPPER_INJECTION_KEY, void 0),\n      role = _inject.role,\n      triggerRef = _inject.triggerRef;\n    useForwardRef(triggerRef);\n    var ariaControls = computed(function () {\n      return ariaHaspopup.value ? props.id : void 0;\n    });\n    var ariaDescribedby = computed(function () {\n      if (role && role.value === \"tooltip\") {\n        return props.open && props.id ? props.id : void 0;\n      }\n      return void 0;\n    });\n    var ariaHaspopup = computed(function () {\n      if (role && role.value !== \"tooltip\") {\n        return role.value;\n      }\n      return void 0;\n    });\n    var ariaExpanded = computed(function () {\n      return ariaHaspopup.value ? \"\".concat(props.open) : void 0;\n    });\n    var virtualTriggerAriaStopWatch = void 0;\n    var TRIGGER_ELE_EVENTS = [\"onMouseenter\", \"onMouseleave\", \"onClick\", \"onKeydown\", \"onFocus\", \"onBlur\", \"onContextmenu\"];\n    onMounted(function () {\n      watch(function () {\n        return props.virtualRef;\n      }, function (virtualEl) {\n        if (virtualEl) {\n          triggerRef.value = unrefElement(virtualEl);\n        }\n      }, {\n        immediate: true\n      });\n      watch(triggerRef, function (el, prevEl) {\n        virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();\n        virtualTriggerAriaStopWatch = void 0;\n        if (isElement(el)) {\n          TRIGGER_ELE_EVENTS.forEach(function (eventName) {\n            var _a;\n            var handler = props[eventName];\n            if (handler) {\n              el.addEventListener(eventName.slice(2).toLowerCase(), handler);\n              (_a = prevEl == null ? void 0 : prevEl.removeEventListener) == null ? void 0 : _a.call(prevEl, eventName.slice(2).toLowerCase(), handler);\n            }\n          });\n          if (isFocusable(el)) {\n            virtualTriggerAriaStopWatch = watch([ariaControls, ariaDescribedby, ariaHaspopup, ariaExpanded], function (watches) {\n              [\"aria-controls\", \"aria-describedby\", \"aria-haspopup\", \"aria-expanded\"].forEach(function (key, idx) {\n                isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);\n              });\n            }, {\n              immediate: true\n            });\n          }\n        }\n        if (isElement(prevEl) && isFocusable(prevEl)) {\n          [\"aria-controls\", \"aria-describedby\", \"aria-haspopup\", \"aria-expanded\"].forEach(function (key) {\n            return prevEl.removeAttribute(key);\n          });\n        }\n      }, {\n        immediate: true\n      });\n    });\n    onBeforeUnmount(function () {\n      virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();\n      virtualTriggerAriaStopWatch = void 0;\n      if (triggerRef.value && isElement(triggerRef.value)) {\n        var el = triggerRef.value;\n        TRIGGER_ELE_EVENTS.forEach(function (eventName) {\n          var handler = props[eventName];\n          if (handler) {\n            el.removeEventListener(eventName.slice(2).toLowerCase(), handler);\n          }\n        });\n        triggerRef.value = void 0;\n      }\n    });\n    expose({\n      triggerRef: triggerRef\n    });\n    return function (_ctx, _cache) {\n      return !_ctx.virtualTriggering ? (openBlock(), createBlock(unref(OnlyChild), mergeProps({\n        key: 0\n      }, _ctx.$attrs, {\n        \"aria-controls\": unref(ariaControls),\n        \"aria-describedby\": unref(ariaDescribedby),\n        \"aria-expanded\": unref(ariaExpanded),\n        \"aria-haspopup\": unref(ariaHaspopup)\n      }), {\n        \"default\": withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"default\")];\n        }),\n        _: 3\n      }, 16, [\"aria-controls\", \"aria-describedby\", \"aria-expanded\", \"aria-haspopup\"])) : createCommentVNode(\"v-if\", true);\n    };\n  }\n}));\nvar ElPopperTrigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"trigger.vue\"]]);\nexport { ElPopperTrigger as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}