{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { inject, ref, computed, unref } from 'vue';\nimport { collapseContextKey } from './constants.mjs';\nimport { useIdInjection } from '../../../hooks/use-id/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar useCollapseItem = function useCollapseItem(props) {\n  var collapse = inject(collapseContextKey);\n  var _useNamespace = useNamespace(\"collapse\"),\n    namespace = _useNamespace.namespace;\n  var focusing = ref(false);\n  var isClick = ref(false);\n  var idInjection = useIdInjection();\n  var id = computed(function () {\n    return idInjection.current++;\n  });\n  var name = computed(function () {\n    var _a;\n    return (_a = props.name) != null ? _a : \"\".concat(namespace.value, \"-id-\").concat(idInjection.prefix, \"-\").concat(unref(id));\n  });\n  var isActive = computed(function () {\n    return collapse == null ? void 0 : collapse.activeNames.value.includes(unref(name));\n  });\n  var handleFocus = function handleFocus() {\n    setTimeout(function () {\n      if (!isClick.value) {\n        focusing.value = true;\n      } else {\n        isClick.value = false;\n      }\n    }, 50);\n  };\n  var handleHeaderClick = function handleHeaderClick() {\n    if (props.disabled) return;\n    collapse == null ? void 0 : collapse.handleItemClick(unref(name));\n    focusing.value = false;\n    isClick.value = true;\n  };\n  var handleEnterClick = function handleEnterClick() {\n    collapse == null ? void 0 : collapse.handleItemClick(unref(name));\n  };\n  return {\n    focusing: focusing,\n    id: id,\n    isActive: isActive,\n    handleFocus: handleFocus,\n    handleHeaderClick: handleHeaderClick,\n    handleEnterClick: handleEnterClick\n  };\n};\nvar useCollapseItemDOM = function useCollapseItemDOM(props, _ref) {\n  var focusing = _ref.focusing,\n    isActive = _ref.isActive,\n    id = _ref.id;\n  var ns = useNamespace(\"collapse\");\n  var rootKls = computed(function () {\n    return [ns.b(\"item\"), ns.is(\"active\", unref(isActive)), ns.is(\"disabled\", props.disabled)];\n  });\n  var headKls = computed(function () {\n    return [ns.be(\"item\", \"header\"), ns.is(\"active\", unref(isActive)), {\n      focusing: unref(focusing) && !props.disabled\n    }];\n  });\n  var arrowKls = computed(function () {\n    return [ns.be(\"item\", \"arrow\"), ns.is(\"active\", unref(isActive))];\n  });\n  var itemWrapperKls = computed(function () {\n    return ns.be(\"item\", \"wrap\");\n  });\n  var itemContentKls = computed(function () {\n    return ns.be(\"item\", \"content\");\n  });\n  var scopedContentId = computed(function () {\n    return ns.b(\"content-\".concat(unref(id)));\n  });\n  var scopedHeadId = computed(function () {\n    return ns.b(\"head-\".concat(unref(id)));\n  });\n  return {\n    arrowKls: arrowKls,\n    headKls: headKls,\n    rootKls: rootKls,\n    itemWrapperKls: itemWrapperKls,\n    itemContentKls: itemContentKls,\n    scopedContentId: scopedContentId,\n    scopedHeadId: scopedHeadId\n  };\n};\nexport { useCollapseItem, useCollapseItemDOM };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}