{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url.to-json.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { watch } from 'vue';\nimport { isNil } from 'lodash-unified';\nimport { useVModel } from '@vueuse/core';\nimport { genFileId } from './upload.mjs';\nimport { debugWarn, throwError } from '../../../utils/error.mjs';\nvar SCOPE = \"ElUpload\";\nvar revokeFileObjectURL = function revokeFileObjectURL(file) {\n  var _a;\n  if ((_a = file.url) == null ? void 0 : _a.startsWith(\"blob:\")) {\n    URL.revokeObjectURL(file.url);\n  }\n};\nvar useHandlers = function useHandlers(props, uploadRef) {\n  var uploadFiles = useVModel(props, \"fileList\", void 0, {\n    passive: true\n  });\n  var getFile = function getFile(rawFile) {\n    return uploadFiles.value.find(function (file) {\n      return file.uid === rawFile.uid;\n    });\n  };\n  function abort(file) {\n    var _a;\n    (_a = uploadRef.value) == null ? void 0 : _a.abort(file);\n  }\n  function clearFiles() {\n    var states = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [\"ready\", \"uploading\", \"success\", \"fail\"];\n    uploadFiles.value = uploadFiles.value.filter(function (row) {\n      return !states.includes(row.status);\n    });\n  }\n  function removeFile(file) {\n    uploadFiles.value = uploadFiles.value.filter(function (uploadFile) {\n      return uploadFile.uid !== file.uid;\n    });\n  }\n  var handleError = function handleError(err, rawFile) {\n    var file = getFile(rawFile);\n    if (!file) return;\n    console.error(err);\n    file.status = \"fail\";\n    removeFile(file);\n    props.onError(err, file, uploadFiles.value);\n    props.onChange(file, uploadFiles.value);\n  };\n  var handleProgress = function handleProgress(evt, rawFile) {\n    var file = getFile(rawFile);\n    if (!file) return;\n    props.onProgress(evt, file, uploadFiles.value);\n    file.status = \"uploading\";\n    file.percentage = Math.round(evt.percent);\n  };\n  var handleSuccess = function handleSuccess(response, rawFile) {\n    var file = getFile(rawFile);\n    if (!file) return;\n    file.status = \"success\";\n    file.response = response;\n    props.onSuccess(response, file, uploadFiles.value);\n    props.onChange(file, uploadFiles.value);\n  };\n  var handleStart = function handleStart(file) {\n    if (isNil(file.uid)) file.uid = genFileId();\n    var uploadFile = {\n      name: file.name,\n      percentage: 0,\n      status: \"ready\",\n      size: file.size,\n      raw: file,\n      uid: file.uid\n    };\n    if (props.listType === \"picture-card\" || props.listType === \"picture\") {\n      try {\n        uploadFile.url = URL.createObjectURL(file);\n      } catch (err) {\n        debugWarn(SCOPE, err.message);\n        props.onError(err, uploadFile, uploadFiles.value);\n      }\n    }\n    uploadFiles.value = [].concat(_toConsumableArray(uploadFiles.value), [uploadFile]);\n    props.onChange(uploadFile, uploadFiles.value);\n  };\n  var handleRemove = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(file) {\n      var uploadFile, doRemove, before;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            uploadFile = file instanceof File ? getFile(file) : file;\n            if (!uploadFile) throwError(SCOPE, \"file to be removed not found\");\n            doRemove = function doRemove(file2) {\n              abort(file2);\n              removeFile(file2);\n              props.onRemove(file2, uploadFiles.value);\n              revokeFileObjectURL(file2);\n            };\n            if (!props.beforeRemove) {\n              _context.next = 10;\n              break;\n            }\n            _context.next = 6;\n            return props.beforeRemove(uploadFile, uploadFiles.value);\n          case 6:\n            before = _context.sent;\n            if (before !== false) doRemove(uploadFile);\n            _context.next = 11;\n            break;\n          case 10:\n            doRemove(uploadFile);\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function handleRemove(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  function submit() {\n    uploadFiles.value.filter(function (_ref2) {\n      var status = _ref2.status;\n      return status === \"ready\";\n    }).forEach(function (_ref3) {\n      var raw = _ref3.raw;\n      var _a;\n      return raw && ((_a = uploadRef.value) == null ? void 0 : _a.upload(raw));\n    });\n  }\n  watch(function () {\n    return props.listType;\n  }, function (val) {\n    if (val !== \"picture-card\" && val !== \"picture\") {\n      return;\n    }\n    uploadFiles.value = uploadFiles.value.map(function (file) {\n      var raw = file.raw,\n        url = file.url;\n      if (!url && raw) {\n        try {\n          file.url = URL.createObjectURL(raw);\n        } catch (err) {\n          props.onError(err, file, uploadFiles.value);\n        }\n      }\n      return file;\n    });\n  });\n  watch(uploadFiles, function (files) {\n    var _iterator = _createForOfIteratorHelper(files),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var file = _step.value;\n        file.uid || (file.uid = genFileId());\n        file.status || (file.status = \"success\");\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  return {\n    uploadFiles: uploadFiles,\n    abort: abort,\n    clearFiles: clearFiles,\n    handleError: handleError,\n    handleProgress: handleProgress,\n    handleStart: handleStart,\n    handleSuccess: handleSuccess,\n    handleRemove: handleRemove,\n    submit: submit,\n    revokeFileObjectURL: revokeFileObjectURL\n  };\n};\nexport { useHandlers };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}