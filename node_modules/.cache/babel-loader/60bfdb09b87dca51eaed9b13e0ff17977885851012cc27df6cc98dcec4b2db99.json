{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.fixed.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { computed, unref } from 'vue';\nimport { sum, enforceUnit } from '../utils.mjs';\nimport { isNumber } from '../../../../utils/types.mjs';\nimport { addUnit } from '../../../../utils/dom/style.mjs';\nvar useStyles = function useStyles(props, _ref) {\n  var columnsTotalWidth = _ref.columnsTotalWidth,\n    rowsHeight = _ref.rowsHeight,\n    fixedColumnsOnLeft = _ref.fixedColumnsOnLeft,\n    fixedColumnsOnRight = _ref.fixedColumnsOnRight;\n  var bodyWidth = computed(function () {\n    var fixed = props.fixed,\n      width = props.width,\n      vScrollbarSize = props.vScrollbarSize;\n    var ret = width - vScrollbarSize;\n    return fixed ? Math.max(Math.round(unref(columnsTotalWidth)), ret) : ret;\n  });\n  var headerWidth = computed(function () {\n    return unref(bodyWidth) + props.vScrollbarSize;\n  });\n  var mainTableHeight = computed(function () {\n    var _props$height = props.height,\n      height = _props$height === void 0 ? 0 : _props$height,\n      _props$maxHeight = props.maxHeight,\n      maxHeight = _props$maxHeight === void 0 ? 0 : _props$maxHeight,\n      footerHeight2 = props.footerHeight,\n      hScrollbarSize = props.hScrollbarSize;\n    if (maxHeight > 0) {\n      var _fixedRowsHeight = unref(fixedRowsHeight);\n      var _rowsHeight = unref(rowsHeight);\n      var _headerHeight = unref(headerHeight);\n      var total = _headerHeight + _fixedRowsHeight + _rowsHeight + hScrollbarSize;\n      return Math.min(total, maxHeight - footerHeight2);\n    }\n    return height - footerHeight2;\n  });\n  var fixedTableHeight = computed(function () {\n    var maxHeight = props.maxHeight;\n    var tableHeight = unref(mainTableHeight);\n    if (isNumber(maxHeight) && maxHeight > 0) return tableHeight;\n    var totalHeight = unref(rowsHeight) + unref(headerHeight) + unref(fixedRowsHeight);\n    return Math.min(tableHeight, totalHeight);\n  });\n  var mapColumn = function mapColumn(column) {\n    return column.width;\n  };\n  var leftTableWidth = computed(function () {\n    return sum(unref(fixedColumnsOnLeft).map(mapColumn));\n  });\n  var rightTableWidth = computed(function () {\n    return sum(unref(fixedColumnsOnRight).map(mapColumn));\n  });\n  var headerHeight = computed(function () {\n    return sum(props.headerHeight);\n  });\n  var fixedRowsHeight = computed(function () {\n    var _a;\n    return (((_a = props.fixedData) == null ? void 0 : _a.length) || 0) * props.rowHeight;\n  });\n  var windowHeight = computed(function () {\n    return unref(mainTableHeight) - unref(headerHeight) - unref(fixedRowsHeight);\n  });\n  var rootStyle = computed(function () {\n    var _props$style = props.style,\n      style = _props$style === void 0 ? {} : _props$style,\n      height = props.height,\n      width = props.width;\n    return enforceUnit(_objectSpread(_objectSpread({}, style), {}, {\n      height: height,\n      width: width\n    }));\n  });\n  var footerHeight = computed(function () {\n    return enforceUnit({\n      height: props.footerHeight\n    });\n  });\n  var emptyStyle = computed(function () {\n    return {\n      top: addUnit(unref(headerHeight)),\n      bottom: addUnit(props.footerHeight),\n      width: addUnit(props.width)\n    };\n  });\n  return {\n    bodyWidth: bodyWidth,\n    fixedTableHeight: fixedTableHeight,\n    mainTableHeight: mainTableHeight,\n    leftTableWidth: leftTableWidth,\n    rightTableWidth: rightTableWidth,\n    headerWidth: headerWidth,\n    windowHeight: windowHeight,\n    footerHeight: footerHeight,\n    emptyStyle: emptyStyle,\n    rootStyle: rootStyle,\n    headerHeight: headerHeight\n  };\n};\nexport { useStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}