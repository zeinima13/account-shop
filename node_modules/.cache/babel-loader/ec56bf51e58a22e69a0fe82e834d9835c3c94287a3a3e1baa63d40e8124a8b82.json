{"ast":null,"code":"import { computed, unref, ref, inject } from 'vue';\nimport { formContextKey, formItemContextKey } from '../constants.mjs';\nimport { useProp } from '../../../../hooks/use-prop/index.mjs';\nimport { useGlobalSize } from '../../../../hooks/use-size/index.mjs';\nvar useFormSize = function useFormSize(fallback) {\n  var ignore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var emptyRef = ref(void 0);\n  var size = ignore.prop ? emptyRef : useProp(\"size\");\n  var globalConfig = ignore.global ? emptyRef : useGlobalSize();\n  var form = ignore.form ? {\n    size: void 0\n  } : inject(formContextKey, void 0);\n  var formItem = ignore.formItem ? {\n    size: void 0\n  } : inject(formItemContextKey, void 0);\n  return computed(function () {\n    return size.value || unref(fallback) || (formItem == null ? void 0 : formItem.size) || (form == null ? void 0 : form.size) || globalConfig.value || \"\";\n  });\n};\nvar useFormDisabled = function useFormDisabled(fallback) {\n  var disabled = useProp(\"disabled\");\n  var form = inject(formContextKey, void 0);\n  return computed(function () {\n    return disabled.value || unref(fallback) || (form == null ? void 0 : form.disabled) || false;\n  });\n};\nvar useSize = useFormSize;\nvar useDisabled = useFormDisabled;\nexport { useDisabled, useFormDisabled, useFormSize, useSize };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}