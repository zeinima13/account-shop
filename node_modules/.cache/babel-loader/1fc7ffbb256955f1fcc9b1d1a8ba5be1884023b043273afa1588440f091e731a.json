{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"cacheOptions\"];\nimport { defineComponent, ref, computed, reactive, onMounted, h } from 'vue';\nimport { pick } from 'lodash-unified';\nimport { ElSelect } from '../../select/index.mjs';\nimport { ElTree } from '../../tree/index.mjs';\nimport { useSelect } from './select.mjs';\nimport { useTree } from './tree.mjs';\nimport CacheOptions from './cache-options.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nvar _sfc_main = defineComponent({\n  name: \"ElTreeSelect\",\n  inheritAttrs: false,\n  props: _objectSpread(_objectSpread(_objectSpread({}, ElSelect.props), ElTree.props), {}, {\n    cacheData: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  }),\n  setup: function setup(props, context) {\n    var slots = context.slots,\n      expose = context.expose;\n    var select = ref();\n    var tree = ref();\n    var key = computed(function () {\n      return props.nodeKey || props.valueKey || \"value\";\n    });\n    var selectProps = useSelect(props, context, {\n      select: select,\n      tree: tree,\n      key: key\n    });\n    var _useTree = useTree(props, context, {\n        select: select,\n        tree: tree,\n        key: key\n      }),\n      cacheOptions = _useTree.cacheOptions,\n      treeProps = _objectWithoutProperties(_useTree, _excluded);\n    var methods = reactive({});\n    expose(methods);\n    onMounted(function () {\n      Object.assign(methods, _objectSpread(_objectSpread({}, pick(tree.value, [\"filter\", \"updateKeyChildren\", \"getCheckedNodes\", \"setCheckedNodes\", \"getCheckedKeys\", \"setCheckedKeys\", \"setChecked\", \"getHalfCheckedNodes\", \"getHalfCheckedKeys\", \"getCurrentKey\", \"getCurrentNode\", \"setCurrentKey\", \"setCurrentNode\", \"getNode\", \"remove\", \"append\", \"insertBefore\", \"insertAfter\"])), pick(select.value, [\"focus\", \"blur\", \"selectedLabel\"])));\n    });\n    return function () {\n      return h(ElSelect, reactive(_objectSpread(_objectSpread({}, selectProps), {}, {\n        ref: function ref(ref2) {\n          return select.value = ref2;\n        }\n      })), _objectSpread(_objectSpread({}, slots), {}, {\n        \"default\": function _default() {\n          return [h(CacheOptions, {\n            data: cacheOptions.value\n          }), h(ElTree, reactive(_objectSpread(_objectSpread({}, treeProps), {}, {\n            ref: function ref(ref2) {\n              return tree.value = ref2;\n            }\n          })))];\n        }\n      }));\n    };\n  }\n});\nvar TreeSelect = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"tree-select.vue\"]]);\nexport { TreeSelect as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}