{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch, onMounted, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode } from 'vue';\nimport { draggable } from '../utils/draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\nvar _sfc_main = defineComponent({\n  name: \"ElSlPanel\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    }\n  },\n  setup: function setup(props) {\n    var ns = useNamespace(\"color-svpanel\");\n    var instance = getCurrentInstance();\n    var cursorTop = ref(0);\n    var cursorLeft = ref(0);\n    var background = ref(\"hsl(0, 100%, 50%)\");\n    var colorValue = computed(function () {\n      var hue = props.color.get(\"hue\");\n      var value = props.color.get(\"value\");\n      return {\n        hue: hue,\n        value: value\n      };\n    });\n    function update() {\n      var saturation = props.color.get(\"saturation\");\n      var value = props.color.get(\"value\");\n      var el = instance.vnode.el;\n      var width = el.clientWidth,\n        height = el.clientHeight;\n      cursorLeft.value = saturation * width / 100;\n      cursorTop.value = (100 - value) * height / 100;\n      background.value = \"hsl(\".concat(props.color.get(\"hue\"), \", 100%, 50%)\");\n    }\n    function handleDrag(event) {\n      var el = instance.vnode.el;\n      var rect = el.getBoundingClientRect();\n      var _getClientXY = getClientXY(event),\n        clientX = _getClientXY.clientX,\n        clientY = _getClientXY.clientY;\n      var left = clientX - rect.left;\n      var top = clientY - rect.top;\n      left = Math.max(0, left);\n      left = Math.min(left, rect.width);\n      top = Math.max(0, top);\n      top = Math.min(top, rect.height);\n      cursorLeft.value = left;\n      cursorTop.value = top;\n      props.color.set({\n        saturation: left / rect.width * 100,\n        value: 100 - top / rect.height * 100\n      });\n    }\n    watch(function () {\n      return colorValue.value;\n    }, function () {\n      update();\n    });\n    onMounted(function () {\n      draggable(instance.vnode.el, {\n        drag: function drag(event) {\n          handleDrag(event);\n        },\n        end: function end(event) {\n          handleDrag(event);\n        }\n      });\n      update();\n    });\n    return {\n      cursorTop: cursorTop,\n      cursorLeft: cursorLeft,\n      background: background,\n      colorValue: colorValue,\n      handleDrag: handleDrag,\n      update: update,\n      ns: ns\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    \"class\": normalizeClass(_ctx.ns.b()),\n    style: normalizeStyle({\n      backgroundColor: _ctx.background\n    })\n  }, [createElementVNode(\"div\", {\n    \"class\": normalizeClass(_ctx.ns.e(\"white\"))\n  }, null, 2), createElementVNode(\"div\", {\n    \"class\": normalizeClass(_ctx.ns.e(\"black\"))\n  }, null, 2), createElementVNode(\"div\", {\n    \"class\": normalizeClass(_ctx.ns.e(\"cursor\")),\n    style: normalizeStyle({\n      top: _ctx.cursorTop + \"px\",\n      left: _ctx.cursorLeft + \"px\"\n    })\n  }, [createElementVNode(\"div\")], 6)], 6);\n}\nvar SvPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"sv-panel.vue\"]]);\nexport { SvPanel as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}