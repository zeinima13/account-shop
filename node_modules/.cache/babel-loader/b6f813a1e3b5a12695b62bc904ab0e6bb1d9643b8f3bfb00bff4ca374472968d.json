{"ast":null,"code":"import \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.is-nan.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { getCurrentInstance, useSlots, ref, computed, unref, isVNode, watch, shallowRef, onMounted, onBeforeUnmount, provide } from 'vue';\nimport { throttle } from 'lodash-unified';\nimport { useResizeObserver } from '@vueuse/core';\nimport { CAROUSEL_ITEM_NAME, carouselContextKey } from './constants.mjs';\nimport { useOrderedChildren } from '../../../hooks/use-ordered-children/index.mjs';\nimport { isString } from '@vue/shared';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { flattedChildren } from '../../../utils/vue/vnode.mjs';\nvar THROTTLE_TIME = 300;\nvar useCarousel = function useCarousel(props, emit, componentName) {\n  var _useOrderedChildren = useOrderedChildren(getCurrentInstance(), CAROUSEL_ITEM_NAME),\n    items = _useOrderedChildren.children,\n    addItem = _useOrderedChildren.addChild,\n    removeItem = _useOrderedChildren.removeChild;\n  var slots = useSlots();\n  var activeIndex = ref(-1);\n  var timer = ref(null);\n  var hover = ref(false);\n  var root = ref();\n  var containerHeight = ref(0);\n  var isItemsTwoLength = ref(true);\n  var isFirstCall = ref(true);\n  var isTransitioning = ref(false);\n  var arrowDisplay = computed(function () {\n    return props.arrow !== \"never\" && !unref(isVertical);\n  });\n  var hasLabel = computed(function () {\n    return items.value.some(function (item) {\n      return item.props.label.toString().length > 0;\n    });\n  });\n  var isCardType = computed(function () {\n    return props.type === \"card\";\n  });\n  var isVertical = computed(function () {\n    return props.direction === \"vertical\";\n  });\n  var containerStyle = computed(function () {\n    if (props.height !== \"auto\") {\n      return {\n        height: props.height\n      };\n    }\n    return {\n      height: \"\".concat(containerHeight.value, \"px\"),\n      overflow: \"hidden\"\n    };\n  });\n  var throttledArrowClick = throttle(function (index) {\n    setActiveItem(index);\n  }, THROTTLE_TIME, {\n    trailing: true\n  });\n  var throttledIndicatorHover = throttle(function (index) {\n    handleIndicatorHover(index);\n  }, THROTTLE_TIME);\n  var isTwoLengthShow = function isTwoLengthShow(index) {\n    if (!isItemsTwoLength.value) return true;\n    return activeIndex.value <= 1 ? index <= 1 : index > 1;\n  };\n  function pauseTimer() {\n    if (timer.value) {\n      clearInterval(timer.value);\n      timer.value = null;\n    }\n  }\n  function startTimer() {\n    if (props.interval <= 0 || !props.autoplay || timer.value) return;\n    timer.value = setInterval(function () {\n      return playSlides();\n    }, props.interval);\n  }\n  var playSlides = function playSlides() {\n    if (!isFirstCall.value) {\n      isTransitioning.value = true;\n    }\n    isFirstCall.value = false;\n    if (activeIndex.value < items.value.length - 1) {\n      activeIndex.value = activeIndex.value + 1;\n    } else if (props.loop) {\n      activeIndex.value = 0;\n    } else {\n      isTransitioning.value = false;\n    }\n  };\n  function setActiveItem(index) {\n    if (!isFirstCall.value) {\n      isTransitioning.value = true;\n    }\n    isFirstCall.value = false;\n    if (isString(index)) {\n      var filteredItems = items.value.filter(function (item) {\n        return item.props.name === index;\n      });\n      if (filteredItems.length > 0) {\n        index = items.value.indexOf(filteredItems[0]);\n      }\n    }\n    index = Number(index);\n    if (Number.isNaN(index) || index !== Math.floor(index)) {\n      debugWarn(componentName, \"index must be integer.\");\n      return;\n    }\n    var itemCount = items.value.length;\n    var oldIndex = activeIndex.value;\n    if (index < 0) {\n      activeIndex.value = props.loop ? itemCount - 1 : 0;\n    } else if (index >= itemCount) {\n      activeIndex.value = props.loop ? 0 : itemCount - 1;\n    } else {\n      activeIndex.value = index;\n    }\n    if (oldIndex === activeIndex.value) {\n      resetItemPosition(oldIndex);\n    }\n    resetTimer();\n  }\n  function resetItemPosition(oldIndex) {\n    items.value.forEach(function (item, index) {\n      item.translateItem(index, activeIndex.value, oldIndex);\n    });\n  }\n  function itemInStage(item, index) {\n    var _a, _b, _c, _d;\n    var _items = unref(items);\n    var itemCount = _items.length;\n    if (itemCount === 0 || !item.states.inStage) return false;\n    var nextItemIndex = index + 1;\n    var prevItemIndex = index - 1;\n    var lastItemIndex = itemCount - 1;\n    var isLastItemActive = _items[lastItemIndex].states.active;\n    var isFirstItemActive = _items[0].states.active;\n    var isNextItemActive = (_b = (_a = _items[nextItemIndex]) == null ? void 0 : _a.states) == null ? void 0 : _b.active;\n    var isPrevItemActive = (_d = (_c = _items[prevItemIndex]) == null ? void 0 : _c.states) == null ? void 0 : _d.active;\n    if (index === lastItemIndex && isFirstItemActive || isNextItemActive) {\n      return \"left\";\n    } else if (index === 0 && isLastItemActive || isPrevItemActive) {\n      return \"right\";\n    }\n    return false;\n  }\n  function handleMouseEnter() {\n    hover.value = true;\n    if (props.pauseOnHover) {\n      pauseTimer();\n    }\n  }\n  function handleMouseLeave() {\n    hover.value = false;\n    startTimer();\n  }\n  function handleTransitionEnd() {\n    isTransitioning.value = false;\n  }\n  function handleButtonEnter(arrow) {\n    if (unref(isVertical)) return;\n    items.value.forEach(function (item, index) {\n      if (arrow === itemInStage(item, index)) {\n        item.states.hover = true;\n      }\n    });\n  }\n  function handleButtonLeave() {\n    if (unref(isVertical)) return;\n    items.value.forEach(function (item) {\n      item.states.hover = false;\n    });\n  }\n  function handleIndicatorClick(index) {\n    if (index !== activeIndex.value) {\n      if (!isFirstCall.value) {\n        isTransitioning.value = true;\n      }\n    }\n    activeIndex.value = index;\n  }\n  function handleIndicatorHover(index) {\n    if (props.trigger === \"hover\" && index !== activeIndex.value) {\n      activeIndex.value = index;\n      if (!isFirstCall.value) {\n        isTransitioning.value = true;\n      }\n    }\n  }\n  function prev() {\n    setActiveItem(activeIndex.value - 1);\n  }\n  function next() {\n    setActiveItem(activeIndex.value + 1);\n  }\n  function resetTimer() {\n    pauseTimer();\n    if (!props.pauseOnHover) startTimer();\n  }\n  function setContainerHeight(height) {\n    if (props.height !== \"auto\") return;\n    containerHeight.value = height;\n  }\n  function PlaceholderItem() {\n    var _a;\n    var defaultSlots = (_a = slots[\"default\"]) == null ? void 0 : _a.call(slots);\n    if (!defaultSlots) return null;\n    var flatSlots = flattedChildren(defaultSlots);\n    var normalizeSlots = flatSlots.filter(function (slot) {\n      return isVNode(slot) && slot.type.name === CAROUSEL_ITEM_NAME;\n    });\n    if ((normalizeSlots == null ? void 0 : normalizeSlots.length) === 2 && props.loop && !isCardType.value) {\n      isItemsTwoLength.value = true;\n      return normalizeSlots;\n    }\n    isItemsTwoLength.value = false;\n    return null;\n  }\n  watch(function () {\n    return activeIndex.value;\n  }, function (current, prev2) {\n    resetItemPosition(prev2);\n    if (isItemsTwoLength.value) {\n      current = current % 2;\n      prev2 = prev2 % 2;\n    }\n    if (prev2 > -1) {\n      emit(\"change\", current, prev2);\n    }\n  });\n  watch(function () {\n    return props.autoplay;\n  }, function (autoplay) {\n    autoplay ? startTimer() : pauseTimer();\n  });\n  watch(function () {\n    return props.loop;\n  }, function () {\n    setActiveItem(activeIndex.value);\n  });\n  watch(function () {\n    return props.interval;\n  }, function () {\n    resetTimer();\n  });\n  var resizeObserver = shallowRef();\n  onMounted(function () {\n    watch(function () {\n      return items.value;\n    }, function () {\n      if (items.value.length > 0) setActiveItem(props.initialIndex);\n    }, {\n      immediate: true\n    });\n    resizeObserver.value = useResizeObserver(root.value, function () {\n      resetItemPosition();\n    });\n    startTimer();\n  });\n  onBeforeUnmount(function () {\n    pauseTimer();\n    if (root.value && resizeObserver.value) resizeObserver.value.stop();\n  });\n  provide(carouselContextKey, {\n    root: root,\n    isCardType: isCardType,\n    isVertical: isVertical,\n    items: items,\n    loop: props.loop,\n    cardScale: props.cardScale,\n    addItem: addItem,\n    removeItem: removeItem,\n    setActiveItem: setActiveItem,\n    setContainerHeight: setContainerHeight\n  });\n  return {\n    root: root,\n    activeIndex: activeIndex,\n    arrowDisplay: arrowDisplay,\n    hasLabel: hasLabel,\n    hover: hover,\n    isCardType: isCardType,\n    isTransitioning: isTransitioning,\n    items: items,\n    isVertical: isVertical,\n    containerStyle: containerStyle,\n    isItemsTwoLength: isItemsTwoLength,\n    handleButtonEnter: handleButtonEnter,\n    handleTransitionEnd: handleTransitionEnd,\n    handleButtonLeave: handleButtonLeave,\n    handleIndicatorClick: handleIndicatorClick,\n    handleMouseEnter: handleMouseEnter,\n    handleMouseLeave: handleMouseLeave,\n    setActiveItem: setActiveItem,\n    prev: prev,\n    next: next,\n    PlaceholderItem: PlaceholderItem,\n    isTwoLengthShow: isTwoLengthShow,\n    throttledArrowClick: throttledArrowClick,\n    throttledIndicatorHover: throttledIndicatorHover\n  };\n};\nexport { useCarousel };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}