{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { defineComponent, useSlots, computed, openBlock, createBlock, resolveDynamicComponent, unref, normalizeClass, withCtx, createElementVNode, withDirectives, createElementBlock, isRef, withModifiers, vModelCheckbox, renderSlot, Fragment, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { checkboxProps, checkboxEmits } from './checkbox.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useCheckbox } from './composables/use-checkbox.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar __default__ = defineComponent({\n  name: \"ElCheckbox\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: checkboxProps,\n  emits: checkboxEmits,\n  setup: function setup(__props) {\n    var props = __props;\n    var slots = useSlots();\n    var _useCheckbox = useCheckbox(props, slots),\n      inputId = _useCheckbox.inputId,\n      isLabeledByFormItem = _useCheckbox.isLabeledByFormItem,\n      isChecked = _useCheckbox.isChecked,\n      isDisabled = _useCheckbox.isDisabled,\n      isFocused = _useCheckbox.isFocused,\n      checkboxSize = _useCheckbox.checkboxSize,\n      hasOwnLabel = _useCheckbox.hasOwnLabel,\n      model = _useCheckbox.model,\n      actualValue = _useCheckbox.actualValue,\n      handleChange = _useCheckbox.handleChange,\n      onClickRoot = _useCheckbox.onClickRoot;\n    var ns = useNamespace(\"checkbox\");\n    var compKls = computed(function () {\n      return [ns.b(), ns.m(checkboxSize.value), ns.is(\"disabled\", isDisabled.value), ns.is(\"bordered\", props.border), ns.is(\"checked\", isChecked.value)];\n    });\n    var spanKls = computed(function () {\n      return [ns.e(\"input\"), ns.is(\"disabled\", isDisabled.value), ns.is(\"checked\", isChecked.value), ns.is(\"indeterminate\", props.indeterminate), ns.is(\"focus\", isFocused.value)];\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(resolveDynamicComponent(!unref(hasOwnLabel) && unref(isLabeledByFormItem) ? \"span\" : \"label\"), {\n        \"class\": normalizeClass(unref(compKls)),\n        \"aria-controls\": _ctx.indeterminate ? _ctx.ariaControls : null,\n        onClick: unref(onClickRoot)\n      }, {\n        \"default\": withCtx(function () {\n          var _a, _b, _c, _d;\n          return [createElementVNode(\"span\", {\n            \"class\": normalizeClass(unref(spanKls))\n          }, [_ctx.trueValue || _ctx.falseValue || _ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock(\"input\", {\n            key: 0,\n            id: unref(inputId),\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return isRef(model) ? model.value = $event : null;\n            },\n            \"class\": normalizeClass(unref(ns).e(\"original\")),\n            type: \"checkbox\",\n            indeterminate: _ctx.indeterminate,\n            name: _ctx.name,\n            tabindex: _ctx.tabindex,\n            disabled: unref(isDisabled),\n            \"true-value\": (_b = (_a = _ctx.trueValue) != null ? _a : _ctx.trueLabel) != null ? _b : true,\n            \"false-value\": (_d = (_c = _ctx.falseValue) != null ? _c : _ctx.falseLabel) != null ? _d : false,\n            onChange: unref(handleChange),\n            onFocus: function onFocus($event) {\n              return isFocused.value = true;\n            },\n            onBlur: function onBlur($event) {\n              return isFocused.value = false;\n            },\n            onClick: withModifiers(function () {}, [\"stop\"])\n          }, null, 42, [\"id\", \"onUpdate:modelValue\", \"indeterminate\", \"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\", \"onChange\", \"onFocus\", \"onBlur\", \"onClick\"])), [[vModelCheckbox, unref(model)]]) : withDirectives((openBlock(), createElementBlock(\"input\", {\n            key: 1,\n            id: unref(inputId),\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return isRef(model) ? model.value = $event : null;\n            },\n            \"class\": normalizeClass(unref(ns).e(\"original\")),\n            type: \"checkbox\",\n            indeterminate: _ctx.indeterminate,\n            disabled: unref(isDisabled),\n            value: unref(actualValue),\n            name: _ctx.name,\n            tabindex: _ctx.tabindex,\n            onChange: unref(handleChange),\n            onFocus: function onFocus($event) {\n              return isFocused.value = true;\n            },\n            onBlur: function onBlur($event) {\n              return isFocused.value = false;\n            },\n            onClick: withModifiers(function () {}, [\"stop\"])\n          }, null, 42, [\"id\", \"onUpdate:modelValue\", \"indeterminate\", \"disabled\", \"value\", \"name\", \"tabindex\", \"onChange\", \"onFocus\", \"onBlur\", \"onClick\"])), [[vModelCheckbox, unref(model)]]), createElementVNode(\"span\", {\n            \"class\": normalizeClass(unref(ns).e(\"inner\"))\n          }, null, 2)], 2), unref(hasOwnLabel) ? (openBlock(), createElementBlock(\"span\", {\n            key: 0,\n            \"class\": normalizeClass(unref(ns).e(\"label\"))\n          }, [renderSlot(_ctx.$slots, \"default\"), !_ctx.$slots[\"default\"] ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [createTextVNode(toDisplayString(_ctx.label), 1)], 64)) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true)];\n        }),\n        _: 3\n      }, 8, [\"class\", \"aria-controls\", \"onClick\"]);\n    };\n  }\n}));\nvar Checkbox = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"checkbox.vue\"]]);\nexport { Checkbox as default };","map":{"version":3,"names":["name","slots","useSlots","_useCheckbox","useCheckbox","props","inputId","isLabeledByFormItem","isChecked","isDisabled","isFocused","checkboxSize","hasOwnLabel","model","actualValue","handleChange","onClickRoot","ns","useNamespace","compKls","computed","b","m","value","is","border","spanKls","e","indeterminate"],"sources":["../../../../../../packages/components/checkbox/src/checkbox.vue"],"sourcesContent":["<template>\n  <component\n    :is=\"!hasOwnLabel && isLabeledByFormItem ? 'span' : 'label'\"\n    :class=\"compKls\"\n    :aria-controls=\"indeterminate ? ariaControls : null\"\n    @click=\"onClickRoot\"\n  >\n    <span :class=\"spanKls\">\n      <input\n        v-if=\"trueValue || falseValue || trueLabel || falseLabel\"\n        :id=\"inputId\"\n        v-model=\"model\"\n        :class=\"ns.e('original')\"\n        type=\"checkbox\"\n        :indeterminate=\"indeterminate\"\n        :name=\"name\"\n        :tabindex=\"tabindex\"\n        :disabled=\"isDisabled\"\n        :true-value=\"trueValue ?? trueLabel ?? true\"\n        :false-value=\"falseValue ?? falseLabel ?? false\"\n        @change=\"handleChange\"\n        @focus=\"isFocused = true\"\n        @blur=\"isFocused = false\"\n        @click.stop\n      />\n      <input\n        v-else\n        :id=\"inputId\"\n        v-model=\"model\"\n        :class=\"ns.e('original')\"\n        type=\"checkbox\"\n        :indeterminate=\"indeterminate\"\n        :disabled=\"isDisabled\"\n        :value=\"actualValue\"\n        :name=\"name\"\n        :tabindex=\"tabindex\"\n        @change=\"handleChange\"\n        @focus=\"isFocused = true\"\n        @blur=\"isFocused = false\"\n        @click.stop\n      />\n      <span :class=\"ns.e('inner')\" />\n    </span>\n    <span v-if=\"hasOwnLabel\" :class=\"ns.e('label')\">\n      <slot />\n      <template v-if=\"!$slots.default\">{{ label }}</template>\n    </span>\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, useSlots } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { checkboxEmits, checkboxProps } from './checkbox'\nimport { useCheckbox } from './composables'\n\ndefineOptions({\n  name: 'ElCheckbox',\n})\n\nconst props = defineProps(checkboxProps)\ndefineEmits(checkboxEmits)\nconst slots = useSlots()\n\nconst {\n  inputId,\n  isLabeledByFormItem,\n  isChecked,\n  isDisabled,\n  isFocused,\n  checkboxSize,\n  hasOwnLabel,\n  model,\n  actualValue,\n  handleChange,\n  onClickRoot,\n} = useCheckbox(props, slots)\n\nconst ns = useNamespace('checkbox')\n\nconst compKls = computed(() => {\n  return [\n    ns.b(),\n    ns.m(checkboxSize.value),\n    ns.is('disabled', isDisabled.value),\n    ns.is('bordered', props.border),\n    ns.is('checked', isChecked.value),\n  ]\n})\n\nconst spanKls = computed(() => {\n  return [\n    ns.e('input'),\n    ns.is('disabled', isDisabled.value),\n    ns.is('checked', isChecked.value),\n    ns.is('indeterminate', props.indeterminate),\n    ns.is('focus', isFocused.value),\n  ]\n})\n</script>\n"],"mappings":";;;;;;;iCAwDc;EACZA,IAAM;AACR;;;;;;IAIA,IAAMC,KAAA,GAAQC,QAAS;IAEjB,IAAAC,YAAA,GAYFC,WAAY,CAAAC,KAAA,EAAOJ,KAAK;MAX1BK,OAAA,GAAAH,YAAA,CAAAG,OAAA;MACAC,mBAAA,GAAAJ,YAAA,CAAAI,mBAAA;MACAC,SAAA,GAAAL,YAAA,CAAAK,SAAA;MACAC,UAAA,GAAAN,YAAA,CAAAM,UAAA;MACAC,SAAA,GAAAP,YAAA,CAAAO,SAAA;MACAC,YAAA,GAAAR,YAAA,CAAAQ,YAAA;MACAC,WAAA,GAAAT,YAAA,CAAAS,WAAA;MACAC,KAAA,GAAAV,YAAA,CAAAU,KAAA;MACAC,WAAA,GAAAX,YAAA,CAAAW,WAAA;MACAC,YAAA,GAAAZ,YAAA,CAAAY,YAAA;MACAC,WAAA,GAAAb,YAAA,CAAAa,WAAA;IAGI,IAAAC,EAAA,GAAKC,YAAA,CAAa,UAAU;IAE5B,IAAAC,OAAA,GAAUC,QAAA,CAAS,YAAM;MACtB,QACLH,EAAA,CAAGI,CAAE,IACLJ,EAAA,CAAGK,CAAE,CAAAX,YAAA,CAAaY,KAAK,GACvBN,EAAG,CAAAO,EAAA,CAAG,UAAY,EAAAf,UAAA,CAAWc,KAAK,GAClCN,EAAG,CAAAO,EAAA,CAAG,UAAY,EAAAnB,KAAA,CAAMoB,MAAM,GAC9BR,EAAG,CAAAO,EAAA,CAAG,SAAW,EAAAhB,SAAA,CAAUe,KAAK,EAClC;IAAA,CACD;IAEK,IAAAG,OAAA,GAAUN,QAAA,CAAS,YAAM;MACtB,QACLH,EAAA,CAAGU,CAAA,CAAE,OAAO,GACZV,EAAG,CAAAO,EAAA,CAAG,UAAY,EAAAf,UAAA,CAAWc,KAAK,GAClCN,EAAG,CAAAO,EAAA,CAAG,SAAW,EAAAhB,SAAA,CAAUe,KAAK,GAChCN,EAAG,CAAAO,EAAA,CAAG,eAAiB,EAAAnB,KAAA,CAAMuB,aAAa,GAC1CX,EAAG,CAAAO,EAAA,CAAG,OAAS,EAAAd,SAAA,CAAUa,KAAK,EAChC;IAAA,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}