{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { shallowRef, onMounted, onUpdated, watch } from 'vue';\nimport { useEventListener } from '@vueuse/core';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria.mjs';\nfunction useKeydown(_ref, store) {\n  var el$ = _ref.el$;\n  var ns = useNamespace(\"tree\");\n  var treeItems = shallowRef([]);\n  var checkboxItems = shallowRef([]);\n  onMounted(function () {\n    initTabIndex();\n  });\n  onUpdated(function () {\n    treeItems.value = Array.from(el$.value.querySelectorAll(\"[role=treeitem]\"));\n    checkboxItems.value = Array.from(el$.value.querySelectorAll(\"input[type=checkbox]\"));\n  });\n  watch(checkboxItems, function (val) {\n    val.forEach(function (checkbox) {\n      checkbox.setAttribute(\"tabindex\", \"-1\");\n    });\n  });\n  var handleKeydown = function handleKeydown(ev) {\n    var currentItem = ev.target;\n    if (!currentItem.className.includes(ns.b(\"node\"))) return;\n    var code = ev.code;\n    treeItems.value = Array.from(el$.value.querySelectorAll(\".\".concat(ns.is(\"focusable\"), \"[role=treeitem]\")));\n    var currentIndex = treeItems.value.indexOf(currentItem);\n    var nextIndex;\n    if ([EVENT_CODE.up, EVENT_CODE.down].includes(code)) {\n      ev.preventDefault();\n      if (code === EVENT_CODE.up) {\n        nextIndex = currentIndex === -1 ? 0 : currentIndex !== 0 ? currentIndex - 1 : treeItems.value.length - 1;\n        var startIndex = nextIndex;\n        while (true) {\n          if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus) break;\n          nextIndex--;\n          if (nextIndex === startIndex) {\n            nextIndex = -1;\n            break;\n          }\n          if (nextIndex < 0) {\n            nextIndex = treeItems.value.length - 1;\n          }\n        }\n      } else {\n        nextIndex = currentIndex === -1 ? 0 : currentIndex < treeItems.value.length - 1 ? currentIndex + 1 : 0;\n        var _startIndex = nextIndex;\n        while (true) {\n          if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus) break;\n          nextIndex++;\n          if (nextIndex === _startIndex) {\n            nextIndex = -1;\n            break;\n          }\n          if (nextIndex >= treeItems.value.length) {\n            nextIndex = 0;\n          }\n        }\n      }\n      nextIndex !== -1 && treeItems.value[nextIndex].focus();\n    }\n    if ([EVENT_CODE.left, EVENT_CODE.right].includes(code)) {\n      ev.preventDefault();\n      currentItem.click();\n    }\n    var hasInput = currentItem.querySelector('[type=\"checkbox\"]');\n    if ([EVENT_CODE.enter, EVENT_CODE.numpadEnter, EVENT_CODE.space].includes(code) && hasInput) {\n      ev.preventDefault();\n      hasInput.click();\n    }\n  };\n  useEventListener(el$, \"keydown\", handleKeydown);\n  var initTabIndex = function initTabIndex() {\n    var _a;\n    treeItems.value = Array.from(el$.value.querySelectorAll(\".\".concat(ns.is(\"focusable\"), \"[role=treeitem]\")));\n    checkboxItems.value = Array.from(el$.value.querySelectorAll(\"input[type=checkbox]\"));\n    var checkedItem = el$.value.querySelectorAll(\".\".concat(ns.is(\"checked\"), \"[role=treeitem]\"));\n    if (checkedItem.length) {\n      checkedItem[0].setAttribute(\"tabindex\", \"0\");\n      return;\n    }\n    (_a = treeItems.value[0]) == null ? void 0 : _a.setAttribute(\"tabindex\", \"0\");\n  };\n}\nexport { useKeydown };","map":{"version":3,"names":["useKeydown","_ref","store","el$","ns","useNamespace","treeItems","shallowRef","checkboxItems","onMounted","initTabIndex","onUpdated","value","Array","from","querySelectorAll","watch","val","forEach","checkbox","setAttribute","handleKeydown","ev","currentItem","target","className","includes","b","code","concat","is","currentIndex","indexOf","nextIndex","EVENT_CODE","up","down","preventDefault","length","startIndex","getNode","dataset","key","canFocus","focus","left","right","click","hasInput","querySelector","enter","numpadEnter","space","useEventListener","_a","checkedItem"],"sources":["../../../../../../../packages/components/tree/src/model/useKeydown.ts"],"sourcesContent":["// @ts-nocheck\nimport { onMounted, onUpdated, shallowRef, watch } from 'vue'\nimport { useEventListener } from '@vueuse/core'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport type TreeStore from './tree-store'\n\nimport type { Ref } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\n\ninterface UseKeydownOption {\n  el$: Ref<HTMLElement>\n}\nexport function useKeydown({ el$ }: UseKeydownOption, store: Ref<TreeStore>) {\n  const ns = useNamespace('tree')\n\n  const treeItems = shallowRef<Nullable<HTMLElement>[]>([])\n  const checkboxItems = shallowRef<Nullable<HTMLElement>[]>([])\n\n  onMounted(() => {\n    initTabIndex()\n  })\n\n  onUpdated(() => {\n    treeItems.value = Array.from(el$.value.querySelectorAll('[role=treeitem]'))\n    checkboxItems.value = Array.from(\n      el$.value.querySelectorAll('input[type=checkbox]')\n    )\n  })\n\n  watch(checkboxItems, (val) => {\n    val.forEach((checkbox) => {\n      checkbox.setAttribute('tabindex', '-1')\n    })\n  })\n\n  const handleKeydown = (ev: KeyboardEvent): void => {\n    const currentItem = ev.target as HTMLElement\n    if (!currentItem.className.includes(ns.b('node'))) return\n    const code = ev.code\n    treeItems.value = Array.from(\n      el$.value.querySelectorAll(`.${ns.is('focusable')}[role=treeitem]`)\n    )\n    const currentIndex = treeItems.value.indexOf(currentItem)\n    let nextIndex\n    if ([EVENT_CODE.up, EVENT_CODE.down].includes(code)) {\n      ev.preventDefault()\n      if (code === EVENT_CODE.up) {\n        nextIndex =\n          currentIndex === -1\n            ? 0\n            : currentIndex !== 0\n            ? currentIndex - 1\n            : treeItems.value.length - 1\n        const startIndex = nextIndex\n        while (true) {\n          if (\n            store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus\n          )\n            break\n          nextIndex--\n          if (nextIndex === startIndex) {\n            nextIndex = -1\n            break\n          }\n          if (nextIndex < 0) {\n            nextIndex = treeItems.value.length - 1\n          }\n        }\n      } else {\n        nextIndex =\n          currentIndex === -1\n            ? 0\n            : currentIndex < treeItems.value.length - 1\n            ? currentIndex + 1\n            : 0\n        const startIndex = nextIndex\n        while (true) {\n          if (\n            store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus\n          )\n            break\n          nextIndex++\n          if (nextIndex === startIndex) {\n            nextIndex = -1\n            break\n          }\n          if (nextIndex >= treeItems.value.length) {\n            nextIndex = 0\n          }\n        }\n      }\n      nextIndex !== -1 && treeItems.value[nextIndex].focus()\n    }\n    if ([EVENT_CODE.left, EVENT_CODE.right].includes(code)) {\n      ev.preventDefault()\n      currentItem.click()\n    }\n    const hasInput = currentItem.querySelector(\n      '[type=\"checkbox\"]'\n    ) as Nullable<HTMLInputElement>\n    if (\n      [EVENT_CODE.enter, EVENT_CODE.numpadEnter, EVENT_CODE.space].includes(\n        code\n      ) &&\n      hasInput\n    ) {\n      ev.preventDefault()\n      hasInput.click()\n    }\n  }\n\n  useEventListener(el$, 'keydown', handleKeydown)\n\n  const initTabIndex = (): void => {\n    treeItems.value = Array.from(\n      el$.value.querySelectorAll(`.${ns.is('focusable')}[role=treeitem]`)\n    )\n    checkboxItems.value = Array.from(\n      el$.value.querySelectorAll('input[type=checkbox]')\n    )\n    const checkedItem = el$.value.querySelectorAll(\n      `.${ns.is('checked')}[role=treeitem]`\n    )\n    if (checkedItem.length) {\n      checkedItem[0].setAttribute('tabindex', '0')\n      return\n    }\n    treeItems.value[0]?.setAttribute('tabindex', '0')\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}