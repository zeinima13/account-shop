{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { getCurrentInstance, inject, ref, computed, unref } from 'vue';\nvar defaultNamespace = \"el\";\nvar statePrefix = \"is-\";\nvar _bem = function _bem(namespace, block, blockSuffix, element, modifier) {\n  var cls = \"\".concat(namespace, \"-\").concat(block);\n  if (blockSuffix) {\n    cls += \"-\".concat(blockSuffix);\n  }\n  if (element) {\n    cls += \"__\".concat(element);\n  }\n  if (modifier) {\n    cls += \"--\".concat(modifier);\n  }\n  return cls;\n};\nvar namespaceContextKey = Symbol(\"namespaceContextKey\");\nvar useGetDerivedNamespace = function useGetDerivedNamespace(namespaceOverrides) {\n  var derivedNamespace = namespaceOverrides || (getCurrentInstance() ? inject(namespaceContextKey, ref(defaultNamespace)) : ref(defaultNamespace));\n  var namespace = computed(function () {\n    return unref(derivedNamespace) || defaultNamespace;\n  });\n  return namespace;\n};\nvar useNamespace = function useNamespace(block, namespaceOverrides) {\n  var namespace = useGetDerivedNamespace(namespaceOverrides);\n  var b = function b() {\n    var blockSuffix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return _bem(namespace.value, block, blockSuffix, \"\", \"\");\n  };\n  var e = function e(element) {\n    return element ? _bem(namespace.value, block, \"\", element, \"\") : \"\";\n  };\n  var m = function m(modifier) {\n    return modifier ? _bem(namespace.value, block, \"\", \"\", modifier) : \"\";\n  };\n  var be = function be(blockSuffix, element) {\n    return blockSuffix && element ? _bem(namespace.value, block, blockSuffix, element, \"\") : \"\";\n  };\n  var em = function em(element, modifier) {\n    return element && modifier ? _bem(namespace.value, block, \"\", element, modifier) : \"\";\n  };\n  var bm = function bm(blockSuffix, modifier) {\n    return blockSuffix && modifier ? _bem(namespace.value, block, blockSuffix, \"\", modifier) : \"\";\n  };\n  var bem = function bem(blockSuffix, element, modifier) {\n    return blockSuffix && element && modifier ? _bem(namespace.value, block, blockSuffix, element, modifier) : \"\";\n  };\n  var is = function is(name) {\n    var state = (arguments.length <= 1 ? 0 : arguments.length - 1) >= 1 ? arguments.length <= 1 ? undefined : arguments[1] : true;\n    return name && state ? \"\".concat(statePrefix).concat(name) : \"\";\n  };\n  var cssVar = function cssVar(object) {\n    var styles = {};\n    for (var key in object) {\n      if (object[key]) {\n        styles[\"--\".concat(namespace.value, \"-\").concat(key)] = object[key];\n      }\n    }\n    return styles;\n  };\n  var cssVarBlock = function cssVarBlock(object) {\n    var styles = {};\n    for (var key in object) {\n      if (object[key]) {\n        styles[\"--\".concat(namespace.value, \"-\").concat(block, \"-\").concat(key)] = object[key];\n      }\n    }\n    return styles;\n  };\n  var cssVarName = function cssVarName(name) {\n    return \"--\".concat(namespace.value, \"-\").concat(name);\n  };\n  var cssVarBlockName = function cssVarBlockName(name) {\n    return \"--\".concat(namespace.value, \"-\").concat(block, \"-\").concat(name);\n  };\n  return {\n    namespace: namespace,\n    b: b,\n    e: e,\n    m: m,\n    be: be,\n    em: em,\n    bm: bm,\n    bem: bem,\n    is: is,\n    cssVar: cssVar,\n    cssVarName: cssVarName,\n    cssVarBlock: cssVarBlock,\n    cssVarBlockName: cssVarBlockName\n  };\n};\nexport { defaultNamespace, namespaceContextKey, useGetDerivedNamespace, useNamespace };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}