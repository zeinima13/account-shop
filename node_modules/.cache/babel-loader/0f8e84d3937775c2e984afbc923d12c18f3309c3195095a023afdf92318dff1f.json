{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { inject, computed } from 'vue';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nvar _getAllColumns = function getAllColumns(columns) {\n  var result = [];\n  columns.forEach(function (column) {\n    if (column.children) {\n      result.push(column);\n      result.push.apply(result, _getAllColumns(column.children));\n    } else {\n      result.push(column);\n    }\n  });\n  return result;\n};\nvar convertToRows = function convertToRows(originColumns) {\n  var maxLevel = 1;\n  var _traverse = function traverse(column, parent) {\n    if (parent) {\n      column.level = parent.level + 1;\n      if (maxLevel < column.level) {\n        maxLevel = column.level;\n      }\n    }\n    if (column.children) {\n      var colSpan = 0;\n      column.children.forEach(function (subColumn) {\n        _traverse(subColumn, column);\n        colSpan += subColumn.colSpan;\n      });\n      column.colSpan = colSpan;\n    } else {\n      column.colSpan = 1;\n    }\n  };\n  originColumns.forEach(function (column) {\n    column.level = 1;\n    _traverse(column, void 0);\n  });\n  var rows = [];\n  for (var i = 0; i < maxLevel; i++) {\n    rows.push([]);\n  }\n  var allColumns = _getAllColumns(originColumns);\n  allColumns.forEach(function (column) {\n    if (!column.children) {\n      column.rowSpan = maxLevel - column.level + 1;\n    } else {\n      column.rowSpan = 1;\n      column.children.forEach(function (col) {\n        return col.isSubColumn = true;\n      });\n    }\n    rows[column.level - 1].push(column);\n  });\n  return rows;\n};\nfunction useUtils(props) {\n  var parent = inject(TABLE_INJECTION_KEY);\n  var columnRows = computed(function () {\n    return convertToRows(props.store.states.originColumns.value);\n  });\n  var isGroup = computed(function () {\n    var result = columnRows.value.length > 1;\n    if (result && parent) {\n      parent.state.isGroup.value = true;\n    }\n    return result;\n  });\n  var toggleAllSelection = function toggleAllSelection(event) {\n    event.stopPropagation();\n    parent == null ? void 0 : parent.store.commit(\"toggleAllSelection\");\n  };\n  return {\n    isGroup: isGroup,\n    toggleAllSelection: toggleAllSelection,\n    columnRows: columnRows\n  };\n}\nexport { convertToRows, useUtils as default };","map":{"version":3,"names":["getAllColumns","columns","result","forEach","column","children","push","apply","convertToRows","originColumns","maxLevel","traverse","parent","level","colSpan","subColumn","rows","i","allColumns","rowSpan","col","isSubColumn","useUtils","props","inject","TABLE_INJECTION_KEY","columnRows","computed","store","states","value","isGroup","length","state","toggleAllSelection","event","stopPropagation","commit"],"sources":["../../../../../../../packages/components/table/src/table-header/utils-helper.ts"],"sourcesContent":["// @ts-nocheck\nimport { computed, inject } from 'vue'\nimport { TABLE_INJECTION_KEY } from '../tokens'\nimport type { TableColumnCtx } from '../table-column/defaults'\nimport type { TableHeaderProps } from '.'\n\nconst getAllColumns = <T>(\n  columns: TableColumnCtx<T>[]\n): TableColumnCtx<T>[] => {\n  const result: TableColumnCtx<T>[] = []\n  columns.forEach((column) => {\n    if (column.children) {\n      result.push(column)\n      // eslint-disable-next-line prefer-spread\n      result.push.apply(result, getAllColumns(column.children))\n    } else {\n      result.push(column)\n    }\n  })\n  return result\n}\n\nexport const convertToRows = <T>(\n  originColumns: TableColumnCtx<T>[]\n): TableColumnCtx<T>[] => {\n  let maxLevel = 1\n  const traverse = (column: TableColumnCtx<T>, parent: TableColumnCtx<T>) => {\n    if (parent) {\n      column.level = parent.level + 1\n      if (maxLevel < column.level) {\n        maxLevel = column.level\n      }\n    }\n    if (column.children) {\n      let colSpan = 0\n      column.children.forEach((subColumn) => {\n        traverse(subColumn, column)\n        colSpan += subColumn.colSpan\n      })\n      column.colSpan = colSpan\n    } else {\n      column.colSpan = 1\n    }\n  }\n\n  originColumns.forEach((column) => {\n    column.level = 1\n    traverse(column, undefined)\n  })\n\n  const rows = []\n  for (let i = 0; i < maxLevel; i++) {\n    rows.push([])\n  }\n\n  const allColumns: TableColumnCtx<T>[] = getAllColumns(originColumns)\n\n  allColumns.forEach((column) => {\n    if (!column.children) {\n      column.rowSpan = maxLevel - column.level + 1\n    } else {\n      column.rowSpan = 1\n      column.children.forEach((col) => (col.isSubColumn = true))\n    }\n    rows[column.level - 1].push(column)\n  })\n\n  return rows\n}\n\nfunction useUtils<T>(props: TableHeaderProps<T>) {\n  const parent = inject(TABLE_INJECTION_KEY)\n  const columnRows = computed(() => {\n    return convertToRows(props.store.states.originColumns.value)\n  })\n  const isGroup = computed(() => {\n    const result = columnRows.value.length > 1\n    if (result && parent) {\n      parent.state.isGroup.value = true\n    }\n    return result\n  })\n  const toggleAllSelection = (event: Event) => {\n    event.stopPropagation()\n    parent?.store.commit('toggleAllSelection')\n  }\n  return {\n    isGroup,\n    toggleAllSelection,\n    columnRows,\n  }\n}\n\nexport default useUtils\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}