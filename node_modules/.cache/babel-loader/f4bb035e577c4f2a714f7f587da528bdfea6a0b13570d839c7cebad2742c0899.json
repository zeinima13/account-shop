{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { ref, getCurrentInstance, inject, computed, unref } from 'vue';\nimport { isNumber } from '../../utils/types.mjs';\nimport { isClient } from '@vueuse/core';\nimport { debugWarn } from '../../utils/error.mjs';\nvar initial = {\n  current: 0\n};\nvar zIndex = ref(0);\nvar defaultInitialZIndex = 2e3;\nvar ZINDEX_INJECTION_KEY = Symbol(\"elZIndexContextKey\");\nvar zIndexContextKey = Symbol(\"zIndexContextKey\");\nvar useZIndex = function useZIndex(zIndexOverrides) {\n  var increasingInjection = getCurrentInstance() ? inject(ZINDEX_INJECTION_KEY, initial) : initial;\n  var zIndexInjection = zIndexOverrides || (getCurrentInstance() ? inject(zIndexContextKey, void 0) : void 0);\n  var initialZIndex = computed(function () {\n    var zIndexFromInjection = unref(zIndexInjection);\n    return isNumber(zIndexFromInjection) ? zIndexFromInjection : defaultInitialZIndex;\n  });\n  var currentZIndex = computed(function () {\n    return initialZIndex.value + zIndex.value;\n  });\n  var nextZIndex = function nextZIndex() {\n    increasingInjection.current++;\n    zIndex.value = increasingInjection.current;\n    return currentZIndex.value;\n  };\n  if (!isClient && !inject(ZINDEX_INJECTION_KEY)) {\n    debugWarn(\"ZIndexInjection\", \"Looks like you are using server rendering, you must provide a z-index provider to ensure the hydration process to be succeed\\nusage: app.provide(ZINDEX_INJECTION_KEY, { current: 0 })\");\n  }\n  return {\n    initialZIndex: initialZIndex,\n    currentZIndex: currentZIndex,\n    nextZIndex: nextZIndex\n  };\n};\nexport { ZINDEX_INJECTION_KEY, defaultInitialZIndex, useZIndex, zIndexContextKey };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}