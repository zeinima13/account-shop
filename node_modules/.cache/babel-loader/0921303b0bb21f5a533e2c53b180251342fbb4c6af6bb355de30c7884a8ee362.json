{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { watch, nextTick, toRefs, computed } from 'vue';\nimport { pick } from 'lodash-unified';\nimport { ElSelect } from '../../select/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nvar useSelect = function useSelect(props, _ref, _ref2) {\n  var attrs = _ref.attrs,\n    emit = _ref.emit;\n  var select = _ref2.select,\n    tree = _ref2.tree,\n    key = _ref2.key;\n  var ns = useNamespace(\"tree-select\");\n  watch(function () {\n    return props.data;\n  }, function () {\n    if (props.filterable) {\n      nextTick(function () {\n        var _a, _b;\n        (_b = tree.value) == null ? void 0 : _b.filter((_a = select.value) == null ? void 0 : _a.states.inputValue);\n      });\n    }\n  }, {\n    flush: \"post\"\n  });\n  var result = _objectSpread(_objectSpread(_objectSpread({}, pick(toRefs(props), Object.keys(ElSelect.props))), attrs), {}, {\n    \"onUpdate:modelValue\": function onUpdateModelValue(value) {\n      return emit(UPDATE_MODEL_EVENT, value);\n    },\n    valueKey: key,\n    popperClass: computed(function () {\n      var classes = [ns.e(\"popper\")];\n      if (props.popperClass) classes.push(props.popperClass);\n      return classes.join(\" \");\n    }),\n    filterMethod: function filterMethod() {\n      var keyword = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var _a;\n      if (props.filterMethod) {\n        props.filterMethod(keyword);\n      } else if (props.remoteMethod) {\n        props.remoteMethod(keyword);\n      } else {\n        (_a = tree.value) == null ? void 0 : _a.filter(keyword);\n      }\n    }\n  });\n  return result;\n};\nexport { useSelect };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}