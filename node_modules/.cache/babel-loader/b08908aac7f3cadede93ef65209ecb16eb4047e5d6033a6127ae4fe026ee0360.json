{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { computed } from 'vue';\nimport dayjs from 'dayjs';\nimport localeData from 'dayjs/plugin/localeData.js';\nimport { getPrevMonthLastDays, getMonthDays, toNestedArr } from './date-table.mjs';\nimport { WEEK_DAYS } from '../../../constants/date.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { rangeArr } from '../../time-picker/src/utils.mjs';\nvar useDateTable = function useDateTable(props, emit) {\n  dayjs.extend(localeData);\n  var firstDayOfWeek = dayjs.localeData().firstDayOfWeek();\n  var _useLocale = useLocale(),\n    t = _useLocale.t,\n    lang = _useLocale.lang;\n  var now = dayjs().locale(lang.value);\n  var isInRange = computed(function () {\n    return !!props.range && !!props.range.length;\n  });\n  var rows = computed(function () {\n    var days = [];\n    if (isInRange.value) {\n      var _props$range = _slicedToArray(props.range, 2),\n        start = _props$range[0],\n        end = _props$range[1];\n      var currentMonthRange = rangeArr(end.date() - start.date() + 1).map(function (index) {\n        return {\n          text: start.date() + index,\n          type: \"current\"\n        };\n      });\n      var remaining = currentMonthRange.length % 7;\n      remaining = remaining === 0 ? 0 : 7 - remaining;\n      var nextMonthRange = rangeArr(remaining).map(function (_, index) {\n        return {\n          text: index + 1,\n          type: \"next\"\n        };\n      });\n      days = currentMonthRange.concat(nextMonthRange);\n    } else {\n      var firstDay = props.date.startOf(\"month\").day();\n      var prevMonthDays = getPrevMonthLastDays(props.date, (firstDay - firstDayOfWeek + 7) % 7).map(function (day) {\n        return {\n          text: day,\n          type: \"prev\"\n        };\n      });\n      var currentMonthDays = getMonthDays(props.date).map(function (day) {\n        return {\n          text: day,\n          type: \"current\"\n        };\n      });\n      days = [].concat(_toConsumableArray(prevMonthDays), _toConsumableArray(currentMonthDays));\n      var _remaining = 7 - (days.length % 7 || 7);\n      var nextMonthDays = rangeArr(_remaining).map(function (_, index) {\n        return {\n          text: index + 1,\n          type: \"next\"\n        };\n      });\n      days = days.concat(nextMonthDays);\n    }\n    return toNestedArr(days);\n  });\n  var weekDays = computed(function () {\n    var start = firstDayOfWeek;\n    if (start === 0) {\n      return WEEK_DAYS.map(function (_) {\n        return t(\"el.datepicker.weeks.\".concat(_));\n      });\n    } else {\n      return WEEK_DAYS.slice(start).concat(WEEK_DAYS.slice(0, start)).map(function (_) {\n        return t(\"el.datepicker.weeks.\".concat(_));\n      });\n    }\n  });\n  var getFormattedDate = function getFormattedDate(day, type) {\n    switch (type) {\n      case \"prev\":\n        return props.date.startOf(\"month\").subtract(1, \"month\").date(day);\n      case \"next\":\n        return props.date.startOf(\"month\").add(1, \"month\").date(day);\n      case \"current\":\n        return props.date.date(day);\n    }\n  };\n  var handlePickDay = function handlePickDay(_ref) {\n    var text = _ref.text,\n      type = _ref.type;\n    var date = getFormattedDate(text, type);\n    emit(\"pick\", date);\n  };\n  var getSlotData = function getSlotData(_ref2) {\n    var text = _ref2.text,\n      type = _ref2.type;\n    var day = getFormattedDate(text, type);\n    return {\n      isSelected: day.isSame(props.selectedDay),\n      type: \"\".concat(type, \"-month\"),\n      day: day.format(\"YYYY-MM-DD\"),\n      date: day.toDate()\n    };\n  };\n  return {\n    now: now,\n    isInRange: isInRange,\n    rows: rows,\n    weekDays: weekDays,\n    getFormattedDate: getFormattedDate,\n    handlePickDay: handlePickDay,\n    getSlotData: getSlotData\n  };\n};\nexport { useDateTable };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}