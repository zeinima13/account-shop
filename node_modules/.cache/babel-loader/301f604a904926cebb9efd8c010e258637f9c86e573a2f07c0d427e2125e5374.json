{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { defineComponent, useAttrs, useSlots, computed, shallowRef, ref, watch, nextTick, onMounted, toRef, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, createCommentVNode, Fragment, renderSlot, createElementVNode, createBlock, withCtx, resolveDynamicComponent, mergeProps, withModifiers, createVNode, toDisplayString } from 'vue';\nimport { useResizeObserver, isClient } from '@vueuse/core';\nimport { isNil } from 'lodash-unified';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { View, Hide, CircleClose } from '@element-plus/icons-vue';\nimport { calcTextareaHeight } from './utils.mjs';\nimport { inputProps, inputEmits } from './input.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useAttrs as useAttrs$1 } from '../../../hooks/use-attrs/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { useFormSize, useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useFocusController } from '../../../hooks/use-focus-controller/index.mjs';\nimport { ValidateComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { useComposition } from '../../../hooks/use-composition/index.mjs';\nimport { useCursor } from '../../../hooks/use-cursor/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { NOOP, isObject } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nvar __default__ = defineComponent({\n  name: \"ElInput\",\n  inheritAttrs: false\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: inputProps,\n  emits: inputEmits,\n  setup: function setup(__props, _ref2) {\n    var expose = _ref2.expose,\n      emit = _ref2.emit;\n    var props = __props;\n    var rawAttrs = useAttrs();\n    var attrs = useAttrs$1();\n    var slots = useSlots();\n    var containerKls = computed(function () {\n      return [props.type === \"textarea\" ? nsTextarea.b() : nsInput.b(), nsInput.m(inputSize.value), nsInput.is(\"disabled\", inputDisabled.value), nsInput.is(\"exceed\", inputExceed.value), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, nsInput.b(\"group\"), slots.prepend || slots.append), nsInput.m(\"prefix\"), slots.prefix || props.prefixIcon), nsInput.m(\"suffix\"), slots.suffix || props.suffixIcon || props.clearable || props.showPassword), nsInput.bm(\"suffix\", \"password-clear\"), showClear.value && showPwdVisible.value), nsInput.b(\"hidden\"), props.type === \"hidden\"), rawAttrs[\"class\"]];\n    });\n    var wrapperKls = computed(function () {\n      return [nsInput.e(\"wrapper\"), nsInput.is(\"focus\", isFocused.value)];\n    });\n    var _useFormItem = useFormItem(),\n      elForm = _useFormItem.form,\n      elFormItem = _useFormItem.formItem;\n    var _useFormItemInputId = useFormItemInputId(props, {\n        formItemContext: elFormItem\n      }),\n      inputId = _useFormItemInputId.inputId;\n    var inputSize = useFormSize();\n    var inputDisabled = useFormDisabled();\n    var nsInput = useNamespace(\"input\");\n    var nsTextarea = useNamespace(\"textarea\");\n    var input = shallowRef();\n    var textarea = shallowRef();\n    var hovering = ref(false);\n    var passwordVisible = ref(false);\n    var countStyle = ref();\n    var textareaCalcStyle = shallowRef(props.inputStyle);\n    var _ref = computed(function () {\n      return input.value || textarea.value;\n    });\n    var _useFocusController = useFocusController(_ref, {\n        beforeFocus: function beforeFocus() {\n          return inputDisabled.value;\n        },\n        afterBlur: function afterBlur() {\n          var _a;\n          if (props.validateEvent) {\n            (_a = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"blur\")[\"catch\"](function (err) {\n              return debugWarn(err);\n            });\n          }\n        }\n      }),\n      wrapperRef = _useFocusController.wrapperRef,\n      isFocused = _useFocusController.isFocused,\n      handleFocus = _useFocusController.handleFocus,\n      handleBlur = _useFocusController.handleBlur;\n    var needStatusIcon = computed(function () {\n      var _a;\n      return (_a = elForm == null ? void 0 : elForm.statusIcon) != null ? _a : false;\n    });\n    var validateState = computed(function () {\n      return (elFormItem == null ? void 0 : elFormItem.validateState) || \"\";\n    });\n    var validateIcon = computed(function () {\n      return validateState.value && ValidateComponentsMap[validateState.value];\n    });\n    var passwordIcon = computed(function () {\n      return passwordVisible.value ? View : Hide;\n    });\n    var containerStyle = computed(function () {\n      return [rawAttrs.style];\n    });\n    var textareaStyle = computed(function () {\n      return [props.inputStyle, textareaCalcStyle.value, {\n        resize: props.resize\n      }];\n    });\n    var nativeInputValue = computed(function () {\n      return isNil(props.modelValue) ? \"\" : String(props.modelValue);\n    });\n    var showClear = computed(function () {\n      return props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (isFocused.value || hovering.value);\n    });\n    var showPwdVisible = computed(function () {\n      return props.showPassword && !inputDisabled.value && !!nativeInputValue.value && (!!nativeInputValue.value || isFocused.value);\n    });\n    var isWordLimitVisible = computed(function () {\n      return props.showWordLimit && !!props.maxlength && (props.type === \"text\" || props.type === \"textarea\") && !inputDisabled.value && !props.readonly && !props.showPassword;\n    });\n    var textLength = computed(function () {\n      return nativeInputValue.value.length;\n    });\n    var inputExceed = computed(function () {\n      return !!isWordLimitVisible.value && textLength.value > Number(props.maxlength);\n    });\n    var suffixVisible = computed(function () {\n      return !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value;\n    });\n    var _useCursor = useCursor(input),\n      _useCursor2 = _slicedToArray(_useCursor, 2),\n      recordCursor = _useCursor2[0],\n      setCursor = _useCursor2[1];\n    useResizeObserver(textarea, function (entries) {\n      onceInitSizeTextarea();\n      if (!isWordLimitVisible.value || props.resize !== \"both\") return;\n      var entry = entries[0];\n      var width = entry.contentRect.width;\n      countStyle.value = {\n        right: \"calc(100% - \".concat(width + 15 + 6, \"px)\")\n      };\n    });\n    var resizeTextarea = function resizeTextarea() {\n      var type = props.type,\n        autosize = props.autosize;\n      if (!isClient || type !== \"textarea\" || !textarea.value) return;\n      if (autosize) {\n        var minRows = isObject(autosize) ? autosize.minRows : void 0;\n        var maxRows = isObject(autosize) ? autosize.maxRows : void 0;\n        var textareaStyle2 = calcTextareaHeight(textarea.value, minRows, maxRows);\n        textareaCalcStyle.value = _objectSpread({\n          overflowY: \"hidden\"\n        }, textareaStyle2);\n        nextTick(function () {\n          textarea.value.offsetHeight;\n          textareaCalcStyle.value = textareaStyle2;\n        });\n      } else {\n        textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value).minHeight\n        };\n      }\n    };\n    var createOnceInitResize = function createOnceInitResize(resizeTextarea2) {\n      var isInit = false;\n      return function () {\n        var _a;\n        if (isInit || !props.autosize) return;\n        var isElHidden = ((_a = textarea.value) == null ? void 0 : _a.offsetParent) === null;\n        if (!isElHidden) {\n          resizeTextarea2();\n          isInit = true;\n        }\n      };\n    };\n    var onceInitSizeTextarea = createOnceInitResize(resizeTextarea);\n    var setNativeInputValue = function setNativeInputValue() {\n      var input2 = _ref.value;\n      var formatterValue = props.formatter ? props.formatter(nativeInputValue.value) : nativeInputValue.value;\n      if (!input2 || input2.value === formatterValue) return;\n      input2.value = formatterValue;\n    };\n    var handleInput = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n        var value;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              recordCursor();\n              value = event.target.value;\n              if (props.formatter) {\n                value = props.parser ? props.parser(value) : value;\n              }\n              if (!isComposing.value) {\n                _context.next = 5;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 5:\n              if (!(value === nativeInputValue.value)) {\n                _context.next = 8;\n                break;\n              }\n              setNativeInputValue();\n              return _context.abrupt(\"return\");\n            case 8:\n              emit(UPDATE_MODEL_EVENT, value);\n              emit(\"input\", value);\n              _context.next = 12;\n              return nextTick();\n            case 12:\n              setNativeInputValue();\n              setCursor();\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function handleInput(_x) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    var handleChange = function handleChange(event) {\n      emit(\"change\", event.target.value);\n    };\n    var _useComposition = useComposition({\n        emit: emit,\n        afterComposition: handleInput\n      }),\n      isComposing = _useComposition.isComposing,\n      handleCompositionStart = _useComposition.handleCompositionStart,\n      handleCompositionUpdate = _useComposition.handleCompositionUpdate,\n      handleCompositionEnd = _useComposition.handleCompositionEnd;\n    var handlePasswordVisible = function handlePasswordVisible() {\n      recordCursor();\n      passwordVisible.value = !passwordVisible.value;\n      setTimeout(setCursor);\n    };\n    var focus = function focus() {\n      var _a;\n      return (_a = _ref.value) == null ? void 0 : _a.focus();\n    };\n    var blur = function blur() {\n      var _a;\n      return (_a = _ref.value) == null ? void 0 : _a.blur();\n    };\n    var handleMouseLeave = function handleMouseLeave(evt) {\n      hovering.value = false;\n      emit(\"mouseleave\", evt);\n    };\n    var handleMouseEnter = function handleMouseEnter(evt) {\n      hovering.value = true;\n      emit(\"mouseenter\", evt);\n    };\n    var handleKeydown = function handleKeydown(evt) {\n      emit(\"keydown\", evt);\n    };\n    var select = function select() {\n      var _a;\n      (_a = _ref.value) == null ? void 0 : _a.select();\n    };\n    var clear = function clear() {\n      emit(UPDATE_MODEL_EVENT, \"\");\n      emit(\"change\", \"\");\n      emit(\"clear\");\n      emit(\"input\", \"\");\n    };\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      var _a;\n      nextTick(function () {\n        return resizeTextarea();\n      });\n      if (props.validateEvent) {\n        (_a = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\")[\"catch\"](function (err) {\n          return debugWarn(err);\n        });\n      }\n    });\n    watch(nativeInputValue, function () {\n      return setNativeInputValue();\n    });\n    watch(function () {\n      return props.type;\n    }, /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return nextTick();\n          case 2:\n            setNativeInputValue();\n            resizeTextarea();\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    })));\n    onMounted(function () {\n      if (!props.formatter && props.parser) {\n        debugWarn(\"ElInput\", \"If you set the parser, you also need to set the formatter.\");\n      }\n      setNativeInputValue();\n      nextTick(resizeTextarea);\n    });\n    expose({\n      input: input,\n      textarea: textarea,\n      ref: _ref,\n      textareaStyle: textareaStyle,\n      autosize: toRef(props, \"autosize\"),\n      isComposing: isComposing,\n      focus: focus,\n      blur: blur,\n      select: select,\n      clear: clear,\n      resizeTextarea: resizeTextarea\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass([unref(containerKls), _defineProperty(_defineProperty({}, unref(nsInput).bm(\"group\", \"append\"), _ctx.$slots.append), unref(nsInput).bm(\"group\", \"prepend\"), _ctx.$slots.prepend)]),\n        style: normalizeStyle(unref(containerStyle)),\n        onMouseenter: handleMouseEnter,\n        onMouseleave: handleMouseLeave\n      }, [createCommentVNode(\" input \"), _ctx.type !== \"textarea\" ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [createCommentVNode(\" prepend slot \"), _ctx.$slots.prepend ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"class\": normalizeClass(unref(nsInput).be(\"group\", \"prepend\"))\n      }, [renderSlot(_ctx.$slots, \"prepend\")], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n        ref_key: \"wrapperRef\",\n        ref: wrapperRef,\n        \"class\": normalizeClass(unref(wrapperKls))\n      }, [createCommentVNode(\" prefix slot \"), _ctx.$slots.prefix || _ctx.prefixIcon ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        \"class\": normalizeClass(unref(nsInput).e(\"prefix\"))\n      }, [createElementVNode(\"span\", {\n        \"class\": normalizeClass(unref(nsInput).e(\"prefix-inner\"))\n      }, [renderSlot(_ctx.$slots, \"prefix\"), _ctx.prefixIcon ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 0,\n        \"class\": normalizeClass(unref(nsInput).e(\"icon\"))\n      }, {\n        \"default\": withCtx(function () {\n          return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))];\n        }),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"input\", mergeProps({\n        id: unref(inputId),\n        ref_key: \"input\",\n        ref: input,\n        \"class\": unref(nsInput).e(\"inner\")\n      }, unref(attrs), {\n        minlength: _ctx.minlength,\n        maxlength: _ctx.maxlength,\n        type: _ctx.showPassword ? passwordVisible.value ? \"text\" : \"password\" : _ctx.type,\n        disabled: unref(inputDisabled),\n        readonly: _ctx.readonly,\n        autocomplete: _ctx.autocomplete,\n        tabindex: _ctx.tabindex,\n        \"aria-label\": _ctx.ariaLabel,\n        placeholder: _ctx.placeholder,\n        style: _ctx.inputStyle,\n        form: _ctx.form,\n        autofocus: _ctx.autofocus,\n        role: _ctx.containerRole,\n        onCompositionstart: unref(handleCompositionStart),\n        onCompositionupdate: unref(handleCompositionUpdate),\n        onCompositionend: unref(handleCompositionEnd),\n        onInput: handleInput,\n        onChange: handleChange,\n        onKeydown: handleKeydown\n      }), null, 16, [\"id\", \"minlength\", \"maxlength\", \"type\", \"disabled\", \"readonly\", \"autocomplete\", \"tabindex\", \"aria-label\", \"placeholder\", \"form\", \"autofocus\", \"role\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\"]), createCommentVNode(\" suffix slot \"), unref(suffixVisible) ? (openBlock(), createElementBlock(\"span\", {\n        key: 1,\n        \"class\": normalizeClass(unref(nsInput).e(\"suffix\"))\n      }, [createElementVNode(\"span\", {\n        \"class\": normalizeClass(unref(nsInput).e(\"suffix-inner\"))\n      }, [!unref(showClear) || !unref(showPwdVisible) || !unref(isWordLimitVisible) ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [renderSlot(_ctx.$slots, \"suffix\"), _ctx.suffixIcon ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 0,\n        \"class\": normalizeClass(unref(nsInput).e(\"icon\"))\n      }, {\n        \"default\": withCtx(function () {\n          return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon)))];\n        }),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 64)) : createCommentVNode(\"v-if\", true), unref(showClear) ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 1,\n        \"class\": normalizeClass([unref(nsInput).e(\"icon\"), unref(nsInput).e(\"clear\")]),\n        onMousedown: withModifiers(unref(NOOP), [\"prevent\"]),\n        onClick: clear\n      }, {\n        \"default\": withCtx(function () {\n          return [createVNode(unref(CircleClose))];\n        }),\n        _: 1\n      }, 8, [\"class\", \"onMousedown\"])) : createCommentVNode(\"v-if\", true), unref(showPwdVisible) ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 2,\n        \"class\": normalizeClass([unref(nsInput).e(\"icon\"), unref(nsInput).e(\"password\")]),\n        onClick: handlePasswordVisible\n      }, {\n        \"default\": withCtx(function () {\n          return [(openBlock(), createBlock(resolveDynamicComponent(unref(passwordIcon))))];\n        }),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), unref(isWordLimitVisible) ? (openBlock(), createElementBlock(\"span\", {\n        key: 3,\n        \"class\": normalizeClass(unref(nsInput).e(\"count\"))\n      }, [createElementVNode(\"span\", {\n        \"class\": normalizeClass(unref(nsInput).e(\"count-inner\"))\n      }, toDisplayString(unref(textLength)) + \" / \" + toDisplayString(_ctx.maxlength), 3)], 2)) : createCommentVNode(\"v-if\", true), unref(validateState) && unref(validateIcon) && unref(needStatusIcon) ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 4,\n        \"class\": normalizeClass([unref(nsInput).e(\"icon\"), unref(nsInput).e(\"validateIcon\"), unref(nsInput).is(\"loading\", unref(validateState) === \"validating\")])\n      }, {\n        \"default\": withCtx(function () {\n          return [(openBlock(), createBlock(resolveDynamicComponent(unref(validateIcon))))];\n        }),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)], 2)) : createCommentVNode(\"v-if\", true)], 2), createCommentVNode(\" append slot \"), _ctx.$slots.append ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        \"class\": normalizeClass(unref(nsInput).be(\"group\", \"append\"))\n      }, [renderSlot(_ctx.$slots, \"append\")], 2)) : createCommentVNode(\"v-if\", true)], 64)) : (openBlock(), createElementBlock(Fragment, {\n        key: 1\n      }, [createCommentVNode(\" textarea \"), createElementVNode(\"textarea\", mergeProps({\n        id: unref(inputId),\n        ref_key: \"textarea\",\n        ref: textarea,\n        \"class\": [unref(nsTextarea).e(\"inner\"), unref(nsInput).is(\"focus\", unref(isFocused))]\n      }, unref(attrs), {\n        minlength: _ctx.minlength,\n        maxlength: _ctx.maxlength,\n        tabindex: _ctx.tabindex,\n        disabled: unref(inputDisabled),\n        readonly: _ctx.readonly,\n        autocomplete: _ctx.autocomplete,\n        style: unref(textareaStyle),\n        \"aria-label\": _ctx.ariaLabel,\n        placeholder: _ctx.placeholder,\n        form: _ctx.form,\n        autofocus: _ctx.autofocus,\n        rows: _ctx.rows,\n        role: _ctx.containerRole,\n        onCompositionstart: unref(handleCompositionStart),\n        onCompositionupdate: unref(handleCompositionUpdate),\n        onCompositionend: unref(handleCompositionEnd),\n        onInput: handleInput,\n        onFocus: unref(handleFocus),\n        onBlur: unref(handleBlur),\n        onChange: handleChange,\n        onKeydown: handleKeydown\n      }), null, 16, [\"id\", \"minlength\", \"maxlength\", \"tabindex\", \"disabled\", \"readonly\", \"autocomplete\", \"aria-label\", \"placeholder\", \"form\", \"autofocus\", \"rows\", \"role\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\", \"onFocus\", \"onBlur\"]), unref(isWordLimitVisible) ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        style: normalizeStyle(countStyle.value),\n        \"class\": normalizeClass(unref(nsInput).e(\"count\"))\n      }, toDisplayString(unref(textLength)) + \" / \" + toDisplayString(_ctx.maxlength), 7)) : createCommentVNode(\"v-if\", true)], 64))], 38);\n    };\n  }\n}));\nvar Input = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"input.vue\"]]);\nexport { Input as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}