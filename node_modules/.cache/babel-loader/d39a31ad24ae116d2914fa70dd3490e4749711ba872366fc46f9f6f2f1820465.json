{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.number.parse-int.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { isVNode, createVNode, render } from 'vue';\nimport NotificationConstructor from './notification2.mjs';\nimport { notificationTypes } from './notification.mjs';\nimport { isClient } from '@vueuse/core';\nimport { isString, isFunction } from '@vue/shared';\nimport { isElement, isUndefined } from '../../../utils/types.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nvar notifications = {\n  \"top-left\": [],\n  \"top-right\": [],\n  \"bottom-left\": [],\n  \"bottom-right\": []\n};\nvar GAP_SIZE = 16;\nvar seed = 1;\nvar _notify = function notify() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var context = arguments.length > 1 ? arguments[1] : undefined;\n  if (!isClient) return {\n    close: function close() {\n      return void 0;\n    }\n  };\n  if (isString(options) || isVNode(options)) {\n    options = {\n      message: options\n    };\n  }\n  var position = options.position || \"top-right\";\n  var verticalOffset = options.offset || 0;\n  notifications[position].forEach(function (_ref) {\n    var vm2 = _ref.vm;\n    var _a;\n    verticalOffset += (((_a = vm2.el) == null ? void 0 : _a.offsetHeight) || 0) + GAP_SIZE;\n  });\n  verticalOffset += GAP_SIZE;\n  var id = \"notification_\".concat(seed++);\n  var userOnClose = options.onClose;\n  var props = _objectSpread(_objectSpread({}, options), {}, {\n    offset: verticalOffset,\n    id: id,\n    onClose: function onClose() {\n      close(id, position, userOnClose);\n    }\n  });\n  var appendTo = document.body;\n  if (isElement(options.appendTo)) {\n    appendTo = options.appendTo;\n  } else if (isString(options.appendTo)) {\n    appendTo = document.querySelector(options.appendTo);\n  }\n  if (!isElement(appendTo)) {\n    debugWarn(\"ElNotification\", \"the appendTo option is not an HTMLElement. Falling back to document.body.\");\n    appendTo = document.body;\n  }\n  var container = document.createElement(\"div\");\n  var vm = createVNode(NotificationConstructor, props, isFunction(props.message) ? props.message : isVNode(props.message) ? function () {\n    return props.message;\n  } : null);\n  vm.appContext = isUndefined(context) ? _notify._context : context;\n  vm.props.onDestroy = function () {\n    render(null, container);\n  };\n  render(vm, container);\n  notifications[position].push({\n    vm: vm\n  });\n  appendTo.appendChild(container.firstElementChild);\n  return {\n    close: function close() {\n      vm.component.exposed.visible.value = false;\n    }\n  };\n};\nnotificationTypes.forEach(function (type) {\n  _notify[type] = function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var appContext = arguments.length > 1 ? arguments[1] : undefined;\n    if (isString(options) || isVNode(options)) {\n      options = {\n        message: options\n      };\n    }\n    return _notify(_objectSpread(_objectSpread({}, options), {}, {\n      type: type\n    }), appContext);\n  };\n});\nfunction close(id, position, userOnClose) {\n  var orientedNotifications = notifications[position];\n  var idx = orientedNotifications.findIndex(function (_ref2) {\n    var vm2 = _ref2.vm;\n    var _a;\n    return ((_a = vm2.component) == null ? void 0 : _a.props.id) === id;\n  });\n  if (idx === -1) return;\n  var vm = orientedNotifications[idx].vm;\n  if (!vm) return;\n  userOnClose == null ? void 0 : userOnClose(vm);\n  var removedHeight = vm.el.offsetHeight;\n  var verticalPos = position.split(\"-\")[0];\n  orientedNotifications.splice(idx, 1);\n  var len = orientedNotifications.length;\n  if (len < 1) return;\n  for (var i = idx; i < len; i++) {\n    var _orientedNotification = orientedNotifications[i].vm,\n      el = _orientedNotification.el,\n      component = _orientedNotification.component;\n    var pos = Number.parseInt(el.style[verticalPos], 10) - removedHeight - GAP_SIZE;\n    component.props.offset = pos;\n  }\n}\nfunction closeAll() {\n  for (var _i = 0, _Object$values = Object.values(notifications); _i < _Object$values.length; _i++) {\n    var orientedNotifications = _Object$values[_i];\n    orientedNotifications.forEach(function (_ref3) {\n      var vm = _ref3.vm;\n      vm.component.exposed.visible.value = false;\n    });\n  }\n}\n_notify.closeAll = closeAll;\n_notify._context = null;\nexport { close, closeAll, _notify as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}