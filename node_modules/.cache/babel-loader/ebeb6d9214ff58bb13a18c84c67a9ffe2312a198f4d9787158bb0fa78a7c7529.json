{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { inject, ref, computed, unref, watch, onMounted } from 'vue';\nimport { isUndefined } from 'lodash-unified';\nimport { POPPER_INJECTION_KEY } from '../constants.mjs';\nimport { buildPopperOptions, unwrapMeasurableEl } from '../utils.mjs';\nimport { usePopper } from '../../../../hooks/use-popper/index.mjs';\nvar DEFAULT_ARROW_OFFSET = 0;\nvar usePopperContent = function usePopperContent(props) {\n  var _inject = inject(POPPER_INJECTION_KEY, void 0),\n    popperInstanceRef = _inject.popperInstanceRef,\n    contentRef = _inject.contentRef,\n    triggerRef = _inject.triggerRef,\n    role = _inject.role;\n  var arrowRef = ref();\n  var arrowOffset = ref();\n  var eventListenerModifier = computed(function () {\n    return {\n      name: \"eventListeners\",\n      enabled: !!props.visible\n    };\n  });\n  var arrowModifier = computed(function () {\n    var _a;\n    var arrowEl = unref(arrowRef);\n    var offset = (_a = unref(arrowOffset)) != null ? _a : DEFAULT_ARROW_OFFSET;\n    return {\n      name: \"arrow\",\n      enabled: !isUndefined(arrowEl),\n      options: {\n        element: arrowEl,\n        padding: offset\n      }\n    };\n  });\n  var options = computed(function () {\n    return _objectSpread({\n      onFirstUpdate: function onFirstUpdate() {\n        update();\n      }\n    }, buildPopperOptions(props, [unref(arrowModifier), unref(eventListenerModifier)]));\n  });\n  var computedReference = computed(function () {\n    return unwrapMeasurableEl(props.referenceEl) || unref(triggerRef);\n  });\n  var _usePopper = usePopper(computedReference, contentRef, options),\n    attributes = _usePopper.attributes,\n    state = _usePopper.state,\n    styles = _usePopper.styles,\n    update = _usePopper.update,\n    forceUpdate = _usePopper.forceUpdate,\n    instanceRef = _usePopper.instanceRef;\n  watch(instanceRef, function (instance) {\n    return popperInstanceRef.value = instance;\n  });\n  onMounted(function () {\n    watch(function () {\n      var _a;\n      return (_a = unref(computedReference)) == null ? void 0 : _a.getBoundingClientRect();\n    }, function () {\n      update();\n    });\n  });\n  return {\n    attributes: attributes,\n    arrowRef: arrowRef,\n    contentRef: contentRef,\n    instanceRef: instanceRef,\n    state: state,\n    styles: styles,\n    role: role,\n    forceUpdate: forceUpdate,\n    update: update\n  };\n};\nexport { usePopperContent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}