{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nvar FOCUSABLE_ELEMENT_SELECTORS = \"a[href],button:not([disabled]),button:not([hidden]),:not([tabindex=\\\"-1\\\"]),input:not([disabled]),input:not([type=\\\"hidden\\\"]),select:not([disabled]),textarea:not([disabled])\";\nvar isVisible = function isVisible(element) {\n  if (process.env.NODE_ENV === \"test\") return true;\n  var computed = getComputedStyle(element);\n  return computed.position === \"fixed\" ? false : element.offsetParent !== null;\n};\nvar obtainAllFocusableElements = function obtainAllFocusableElements(element) {\n  return Array.from(element.querySelectorAll(FOCUSABLE_ELEMENT_SELECTORS)).filter(function (item) {\n    return isFocusable(item) && isVisible(item);\n  });\n};\nvar isFocusable = function isFocusable(element) {\n  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute(\"tabIndex\") !== null) {\n    return true;\n  }\n  if (element.tabIndex < 0 || element.hasAttribute(\"disabled\") || element.getAttribute(\"aria-disabled\") === \"true\") {\n    return false;\n  }\n  switch (element.nodeName) {\n    case \"A\":\n      {\n        return !!element.href && element.rel !== \"ignore\";\n      }\n    case \"INPUT\":\n      {\n        return !(element.type === \"hidden\" || element.type === \"file\");\n      }\n    case \"BUTTON\":\n    case \"SELECT\":\n    case \"TEXTAREA\":\n      {\n        return true;\n      }\n    default:\n      {\n        return false;\n      }\n  }\n};\nvar attemptFocus = function attemptFocus(element) {\n  var _a;\n  if (!isFocusable(element)) {\n    return false;\n  }\n  (_a = element.focus) == null ? void 0 : _a.call(element);\n  return document.activeElement === element;\n};\nvar triggerEvent = function triggerEvent(elm, name) {\n  var eventName;\n  if (name.includes(\"mouse\") || name.includes(\"click\")) {\n    eventName = \"MouseEvents\";\n  } else if (name.includes(\"key\")) {\n    eventName = \"KeyboardEvent\";\n  } else {\n    eventName = \"HTMLEvents\";\n  }\n  var evt = document.createEvent(eventName);\n  for (var _len = arguments.length, opts = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    opts[_key - 2] = arguments[_key];\n  }\n  evt.initEvent.apply(evt, [name].concat(opts));\n  elm.dispatchEvent(evt);\n  return elm;\n};\nvar isLeaf = function isLeaf(el) {\n  return !el.getAttribute(\"aria-owns\");\n};\nvar getSibling = function getSibling(el, distance, elClass) {\n  var parentNode = el.parentNode;\n  if (!parentNode) return null;\n  var siblings = parentNode.querySelectorAll(elClass);\n  var index = Array.prototype.indexOf.call(siblings, el);\n  return siblings[index + distance] || null;\n};\nvar focusNode = function focusNode(el) {\n  if (!el) return;\n  el.focus();\n  !isLeaf(el) && el.click();\n};\nexport { attemptFocus, focusNode, getSibling, isFocusable, isLeaf, isVisible, obtainAllFocusableElements, triggerEvent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}