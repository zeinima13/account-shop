{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.fixed.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { inject } from 'vue';\nimport { getFixedColumnOffset, ensurePosition, getFixedColumnsClass } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { isFunction, isString } from '@vue/shared';\nfunction useStyle(props) {\n  var parent = inject(TABLE_INJECTION_KEY);\n  var ns = useNamespace(\"table\");\n  var getHeaderRowStyle = function getHeaderRowStyle(rowIndex) {\n    var headerRowStyle = parent == null ? void 0 : parent.props.headerRowStyle;\n    if (isFunction(headerRowStyle)) {\n      return headerRowStyle.call(null, {\n        rowIndex: rowIndex\n      });\n    }\n    return headerRowStyle;\n  };\n  var getHeaderRowClass = function getHeaderRowClass(rowIndex) {\n    var classes = [];\n    var headerRowClassName = parent == null ? void 0 : parent.props.headerRowClassName;\n    if (isString(headerRowClassName)) {\n      classes.push(headerRowClassName);\n    } else if (isFunction(headerRowClassName)) {\n      classes.push(headerRowClassName.call(null, {\n        rowIndex: rowIndex\n      }));\n    }\n    return classes.join(\" \");\n  };\n  var getHeaderCellStyle = function getHeaderCellStyle(rowIndex, columnIndex, row, column) {\n    var _a;\n    var headerCellStyles = (_a = parent == null ? void 0 : parent.props.headerCellStyle) != null ? _a : {};\n    if (isFunction(headerCellStyles)) {\n      headerCellStyles = headerCellStyles.call(null, {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        row: row,\n        column: column\n      });\n    }\n    var fixedStyle = getFixedColumnOffset(columnIndex, column.fixed, props.store, row);\n    ensurePosition(fixedStyle, \"left\");\n    ensurePosition(fixedStyle, \"right\");\n    return Object.assign({}, headerCellStyles, fixedStyle);\n  };\n  var getHeaderCellClass = function getHeaderCellClass(rowIndex, columnIndex, row, column) {\n    var fixedClasses = getFixedColumnsClass(ns.b(), columnIndex, column.fixed, props.store, row);\n    var classes = [column.id, column.order, column.headerAlign, column.className, column.labelClassName].concat(_toConsumableArray(fixedClasses));\n    if (!column.children) {\n      classes.push(\"is-leaf\");\n    }\n    if (column.sortable) {\n      classes.push(\"is-sortable\");\n    }\n    var headerCellClassName = parent == null ? void 0 : parent.props.headerCellClassName;\n    if (isString(headerCellClassName)) {\n      classes.push(headerCellClassName);\n    } else if (isFunction(headerCellClassName)) {\n      classes.push(headerCellClassName.call(null, {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        row: row,\n        column: column\n      }));\n    }\n    classes.push(ns.e(\"cell\"));\n    return classes.filter(function (className) {\n      return Boolean(className);\n    }).join(\" \");\n  };\n  return {\n    getHeaderRowStyle: getHeaderRowStyle,\n    getHeaderRowClass: getHeaderRowClass,\n    getHeaderCellStyle: getHeaderCellStyle,\n    getHeaderCellClass: getHeaderCellClass\n  };\n}\nexport { useStyle as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}