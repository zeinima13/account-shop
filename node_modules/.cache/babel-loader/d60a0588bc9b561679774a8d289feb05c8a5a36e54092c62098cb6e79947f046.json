{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectWithoutProperties from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"appendTo\"];\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { isVNode, render, createVNode } from 'vue';\nimport MessageConstructor from './message2.mjs';\nimport { messageTypes, messageDefaults } from './message.mjs';\nimport { instances } from './instance.mjs';\nimport { messageConfig } from '../../config-provider/src/config-provider.mjs';\nimport { isClient } from '@vueuse/core';\nimport { isNumber, isElement, isBoolean } from '../../../utils/types.mjs';\nimport { isString, isFunction } from '@vue/shared';\nimport { debugWarn } from '../../../utils/error.mjs';\nvar seed = 1;\nvar normalizeOptions = function normalizeOptions(params) {\n  var options = !params || isString(params) || isVNode(params) || isFunction(params) ? {\n    message: params\n  } : params;\n  var normalized = _objectSpread(_objectSpread({}, messageDefaults), options);\n  if (!normalized.appendTo) {\n    normalized.appendTo = document.body;\n  } else if (isString(normalized.appendTo)) {\n    var appendTo = document.querySelector(normalized.appendTo);\n    if (!isElement(appendTo)) {\n      debugWarn(\"ElMessage\", \"the appendTo option is not an HTMLElement. Falling back to document.body.\");\n      appendTo = document.body;\n    }\n    normalized.appendTo = appendTo;\n  }\n  if (isBoolean(messageConfig.grouping) && !normalized.grouping) {\n    normalized.grouping = messageConfig.grouping;\n  }\n  if (isNumber(messageConfig.duration) && normalized.duration === 3e3) {\n    normalized.duration = messageConfig.duration;\n  }\n  if (isNumber(messageConfig.offset) && normalized.offset === 16) {\n    normalized.offset = messageConfig.offset;\n  }\n  if (isBoolean(messageConfig.showClose) && !normalized.showClose) {\n    normalized.showClose = messageConfig.showClose;\n  }\n  return normalized;\n};\nvar closeMessage = function closeMessage(instance) {\n  var idx = instances.indexOf(instance);\n  if (idx === -1) return;\n  instances.splice(idx, 1);\n  var handler = instance.handler;\n  handler.close();\n};\nvar createMessage = function createMessage(_ref, context) {\n  var appendTo = _ref.appendTo,\n    options = _objectWithoutProperties(_ref, _excluded);\n  var id = \"message_\".concat(seed++);\n  var userOnClose = options.onClose;\n  var container = document.createElement(\"div\");\n  var props = _objectSpread(_objectSpread({}, options), {}, {\n    id: id,\n    onClose: function onClose() {\n      userOnClose == null ? void 0 : userOnClose();\n      closeMessage(instance);\n    },\n    onDestroy: function onDestroy() {\n      render(null, container);\n    }\n  });\n  var vnode = createVNode(MessageConstructor, props, isFunction(props.message) || isVNode(props.message) ? {\n    \"default\": isFunction(props.message) ? props.message : function () {\n      return props.message;\n    }\n  } : null);\n  vnode.appContext = context || message._context;\n  render(vnode, container);\n  appendTo.appendChild(container.firstElementChild);\n  var vm = vnode.component;\n  var handler = {\n    close: function close() {\n      vm.exposed.visible.value = false;\n    }\n  };\n  var instance = {\n    id: id,\n    vnode: vnode,\n    vm: vm,\n    handler: handler,\n    props: vnode.component.props\n  };\n  return instance;\n};\nvar message = function message() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var context = arguments.length > 1 ? arguments[1] : undefined;\n  if (!isClient) return {\n    close: function close() {\n      return void 0;\n    }\n  };\n  var normalized = normalizeOptions(options);\n  if (normalized.grouping && instances.length) {\n    var instance2 = instances.find(function (_ref2) {\n      var vm = _ref2.vnode;\n      var _a;\n      return ((_a = vm.props) == null ? void 0 : _a.message) === normalized.message;\n    });\n    if (instance2) {\n      instance2.props.repeatNum += 1;\n      instance2.props.type = normalized.type;\n      return instance2.handler;\n    }\n  }\n  if (isNumber(messageConfig.max) && instances.length >= messageConfig.max) {\n    return {\n      close: function close() {\n        return void 0;\n      }\n    };\n  }\n  var instance = createMessage(normalized, context);\n  instances.push(instance);\n  return instance.handler;\n};\nmessageTypes.forEach(function (type) {\n  message[type] = function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var appContext = arguments.length > 1 ? arguments[1] : undefined;\n    var normalized = normalizeOptions(options);\n    return message(_objectSpread(_objectSpread({}, normalized), {}, {\n      type: type\n    }), appContext);\n  };\n});\nfunction closeAll(type) {\n  var _iterator = _createForOfIteratorHelper(instances),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var instance = _step.value;\n      if (!type || type === instance.props.type) {\n        instance.handler.close();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nmessage.closeAll = closeAll;\nmessage._context = null;\nexport { closeAll, message as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}