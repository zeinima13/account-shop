{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport { isVNode, h } from 'vue';\nimport { isArray, isFunction } from '@vue/shared';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nvar sumReducer = function sumReducer(sum2, num) {\n  return sum2 + num;\n};\nvar sum = function sum(listLike) {\n  return isArray(listLike) ? listLike.reduce(sumReducer, 0) : listLike;\n};\nvar tryCall = function tryCall(fLike, params) {\n  var defaultRet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return isFunction(fLike) ? fLike(params) : fLike != null ? fLike : defaultRet;\n};\nvar enforceUnit = function enforceUnit(style) {\n  [\"width\", \"maxWidth\", \"minWidth\", \"height\"].forEach(function (key) {\n    style[key] = addUnit(style[key]);\n  });\n  return style;\n};\nvar componentToSlot = function componentToSlot(ComponentLike) {\n  return isVNode(ComponentLike) ? function (props) {\n    return h(ComponentLike, props);\n  } : ComponentLike;\n};\nexport { componentToSlot, enforceUnit, sum, tryCall };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}