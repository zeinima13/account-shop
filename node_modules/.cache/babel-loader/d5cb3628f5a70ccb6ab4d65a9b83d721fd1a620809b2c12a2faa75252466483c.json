{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { getCurrentInstance, inject, unref } from 'vue';\nimport { isClient, computedEager } from '@vueuse/core';\nimport { useGetDerivedNamespace } from '../use-namespace/index.mjs';\nimport { debugWarn } from '../../utils/error.mjs';\nvar defaultIdInjection = {\n  prefix: Math.floor(Math.random() * 1e4),\n  current: 0\n};\nvar ID_INJECTION_KEY = Symbol(\"elIdInjection\");\nvar useIdInjection = function useIdInjection() {\n  return getCurrentInstance() ? inject(ID_INJECTION_KEY, defaultIdInjection) : defaultIdInjection;\n};\nvar useId = function useId(deterministicId) {\n  var idInjection = useIdInjection();\n  if (!isClient && idInjection === defaultIdInjection) {\n    debugWarn(\"IdInjection\", \"Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed\\nusage: app.provide(ID_INJECTION_KEY, {\\n  prefix: number,\\n  current: number,\\n})\");\n  }\n  var namespace = useGetDerivedNamespace();\n  var idRef = computedEager(function () {\n    return unref(deterministicId) || \"\".concat(namespace.value, \"-id-\").concat(idInjection.prefix, \"-\").concat(idInjection.current++);\n  });\n  return idRef;\n};\nexport { ID_INJECTION_KEY, useId, useIdInjection };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}