{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.number.parse-float.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { reactive, ref, computed, watch, watchEffect, nextTick, onMounted } from 'vue';\nimport { castArray, isEqual, get, debounce, findLastIndex } from 'lodash-unified';\nimport { isIOS, isClient, useResizeObserver } from '@vueuse/core';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useComposition } from '../../../hooks/use-composition/index.mjs';\nimport { useFocusController } from '../../../hooks/use-focus-controller/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { useEmptyValues } from '../../../hooks/use-empty-values/index.mjs';\nimport { isArray, isFunction, isPlainObject, isObject } from '@vue/shared';\nimport { ValidateComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { useFormSize } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { isUndefined, isNumber } from '../../../utils/types.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { scrollIntoView } from '../../../utils/dom/scroll.mjs';\nvar useSelect = function useSelect(props, emit) {\n  var _useLocale = useLocale(),\n    t = _useLocale.t;\n  var contentId = useId();\n  var nsSelect = useNamespace(\"select\");\n  var nsInput = useNamespace(\"input\");\n  var states = reactive({\n    inputValue: \"\",\n    options: /* @__PURE__ */new Map(),\n    cachedOptions: /* @__PURE__ */new Map(),\n    optionValues: [],\n    selected: [],\n    selectionWidth: 0,\n    collapseItemWidth: 0,\n    selectedLabel: \"\",\n    hoveringIndex: -1,\n    previousQuery: null,\n    inputHovering: false,\n    menuVisibleOnFocus: false,\n    isBeforeHide: false\n  });\n  var selectRef = ref(null);\n  var selectionRef = ref(null);\n  var tooltipRef = ref(null);\n  var tagTooltipRef = ref(null);\n  var inputRef = ref(null);\n  var prefixRef = ref(null);\n  var suffixRef = ref(null);\n  var menuRef = ref(null);\n  var tagMenuRef = ref(null);\n  var collapseItemRef = ref(null);\n  var scrollbarRef = ref(null);\n  var _useComposition = useComposition({\n      afterComposition: function afterComposition(e) {\n        return onInput(e);\n      }\n    }),\n    isComposing = _useComposition.isComposing,\n    handleCompositionStart = _useComposition.handleCompositionStart,\n    handleCompositionUpdate = _useComposition.handleCompositionUpdate,\n    handleCompositionEnd = _useComposition.handleCompositionEnd;\n  var _useFocusController = useFocusController(inputRef, {\n      beforeFocus: function beforeFocus() {\n        return selectDisabled.value;\n      },\n      afterFocus: function afterFocus() {\n        if (props.automaticDropdown && !expanded.value) {\n          expanded.value = true;\n          states.menuVisibleOnFocus = true;\n        }\n      },\n      beforeBlur: function beforeBlur(event) {\n        var _a, _b;\n        return ((_a = tooltipRef.value) == null ? void 0 : _a.isFocusInsideContent(event)) || ((_b = tagTooltipRef.value) == null ? void 0 : _b.isFocusInsideContent(event));\n      },\n      afterBlur: function afterBlur() {\n        expanded.value = false;\n        states.menuVisibleOnFocus = false;\n      }\n    }),\n    wrapperRef = _useFocusController.wrapperRef,\n    isFocused = _useFocusController.isFocused,\n    handleBlur = _useFocusController.handleBlur;\n  var expanded = ref(false);\n  var hoverOption = ref();\n  var _useFormItem = useFormItem(),\n    form = _useFormItem.form,\n    formItem = _useFormItem.formItem;\n  var _useFormItemInputId = useFormItemInputId(props, {\n      formItemContext: formItem\n    }),\n    inputId = _useFormItemInputId.inputId;\n  var _useEmptyValues = useEmptyValues(props),\n    valueOnClear = _useEmptyValues.valueOnClear,\n    isEmptyValue = _useEmptyValues.isEmptyValue;\n  var selectDisabled = computed(function () {\n    return props.disabled || (form == null ? void 0 : form.disabled);\n  });\n  var hasModelValue = computed(function () {\n    return isArray(props.modelValue) ? props.modelValue.length > 0 : !isEmptyValue(props.modelValue);\n  });\n  var needStatusIcon = computed(function () {\n    var _a;\n    return (_a = form == null ? void 0 : form.statusIcon) != null ? _a : false;\n  });\n  var showClose = computed(function () {\n    return props.clearable && !selectDisabled.value && states.inputHovering && hasModelValue.value;\n  });\n  var iconComponent = computed(function () {\n    return props.remote && props.filterable && !props.remoteShowSuffix ? \"\" : props.suffixIcon;\n  });\n  var iconReverse = computed(function () {\n    return nsSelect.is(\"reverse\", iconComponent.value && expanded.value);\n  });\n  var validateState = computed(function () {\n    return (formItem == null ? void 0 : formItem.validateState) || \"\";\n  });\n  var validateIcon = computed(function () {\n    return ValidateComponentsMap[validateState.value];\n  });\n  var debounce$1 = computed(function () {\n    return props.remote ? 300 : 0;\n  });\n  var isRemoteSearchEmpty = computed(function () {\n    return props.remote && !states.inputValue && states.options.size === 0;\n  });\n  var emptyText = computed(function () {\n    if (props.loading) {\n      return props.loadingText || t(\"el.select.loading\");\n    } else {\n      if (props.filterable && states.inputValue && states.options.size > 0 && filteredOptionsCount.value === 0) {\n        return props.noMatchText || t(\"el.select.noMatch\");\n      }\n      if (states.options.size === 0) {\n        return props.noDataText || t(\"el.select.noData\");\n      }\n    }\n    return null;\n  });\n  var filteredOptionsCount = computed(function () {\n    return optionsArray.value.filter(function (option) {\n      return option.visible;\n    }).length;\n  });\n  var optionsArray = computed(function () {\n    var list = Array.from(states.options.values());\n    var newList = [];\n    states.optionValues.forEach(function (item) {\n      var index = list.findIndex(function (i) {\n        return i.value === item;\n      });\n      if (index > -1) {\n        newList.push(list[index]);\n      }\n    });\n    return newList.length >= list.length ? newList : list;\n  });\n  var cachedOptionsArray = computed(function () {\n    return Array.from(states.cachedOptions.values());\n  });\n  var showNewOption = computed(function () {\n    var hasExistingOption = optionsArray.value.filter(function (option) {\n      return !option.created;\n    }).some(function (option) {\n      return option.currentLabel === states.inputValue;\n    });\n    return props.filterable && props.allowCreate && states.inputValue !== \"\" && !hasExistingOption;\n  });\n  var updateOptions = function updateOptions() {\n    if (props.filterable && isFunction(props.filterMethod)) return;\n    if (props.filterable && props.remote && isFunction(props.remoteMethod)) return;\n    optionsArray.value.forEach(function (option) {\n      var _a;\n      (_a = option.updateOption) == null ? void 0 : _a.call(option, states.inputValue);\n    });\n  };\n  var selectSize = useFormSize();\n  var collapseTagSize = computed(function () {\n    return [\"small\"].includes(selectSize.value) ? \"small\" : \"default\";\n  });\n  var dropdownMenuVisible = computed({\n    get: function get() {\n      return expanded.value && !isRemoteSearchEmpty.value;\n    },\n    set: function set(val) {\n      expanded.value = val;\n    }\n  });\n  var shouldShowPlaceholder = computed(function () {\n    if (props.multiple && !isUndefined(props.modelValue)) {\n      return castArray(props.modelValue).length === 0 && !states.inputValue;\n    }\n    var value = isArray(props.modelValue) ? props.modelValue[0] : props.modelValue;\n    return props.filterable || isUndefined(value) ? !states.inputValue : true;\n  });\n  var currentPlaceholder = computed(function () {\n    var _a;\n    var _placeholder = (_a = props.placeholder) != null ? _a : t(\"el.select.placeholder\");\n    return props.multiple || !hasModelValue.value ? _placeholder : states.selectedLabel;\n  });\n  var mouseEnterEventName = computed(function () {\n    return isIOS ? null : \"mouseenter\";\n  });\n  watch(function () {\n    return props.modelValue;\n  }, function (val, oldVal) {\n    if (props.multiple) {\n      if (props.filterable && !props.reserveKeyword) {\n        states.inputValue = \"\";\n        handleQueryChange(\"\");\n      }\n    }\n    setSelected();\n    if (!isEqual(val, oldVal) && props.validateEvent) {\n      formItem == null ? void 0 : formItem.validate(\"change\")[\"catch\"](function (err) {\n        return debugWarn(err);\n      });\n    }\n  }, {\n    flush: \"post\",\n    deep: true\n  });\n  watch(function () {\n    return expanded.value;\n  }, function (val) {\n    if (val) {\n      handleQueryChange(states.inputValue);\n    } else {\n      states.inputValue = \"\";\n      states.previousQuery = null;\n      states.isBeforeHide = true;\n    }\n    emit(\"visible-change\", val);\n  });\n  watch(function () {\n    return states.options.entries();\n  }, function () {\n    if (!isClient) return;\n    setSelected();\n    if (props.defaultFirstOption && (props.filterable || props.remote) && filteredOptionsCount.value) {\n      checkDefaultFirstOption();\n    }\n  }, {\n    flush: \"post\"\n  });\n  watch(function () {\n    return states.hoveringIndex;\n  }, function (val) {\n    if (isNumber(val) && val > -1) {\n      hoverOption.value = optionsArray.value[val] || {};\n    } else {\n      hoverOption.value = {};\n    }\n    optionsArray.value.forEach(function (option) {\n      option.hover = hoverOption.value === option;\n    });\n  });\n  watchEffect(function () {\n    if (states.isBeforeHide) return;\n    updateOptions();\n  });\n  var handleQueryChange = function handleQueryChange(val) {\n    if (states.previousQuery === val || isComposing.value) {\n      return;\n    }\n    states.previousQuery = val;\n    if (props.filterable && isFunction(props.filterMethod)) {\n      props.filterMethod(val);\n    } else if (props.filterable && props.remote && isFunction(props.remoteMethod)) {\n      props.remoteMethod(val);\n    }\n    if (props.defaultFirstOption && (props.filterable || props.remote) && filteredOptionsCount.value) {\n      nextTick(checkDefaultFirstOption);\n    } else {\n      nextTick(updateHoveringIndex);\n    }\n  };\n  var checkDefaultFirstOption = function checkDefaultFirstOption() {\n    var optionsInDropdown = optionsArray.value.filter(function (n) {\n      return n.visible && !n.disabled && !n.states.groupDisabled;\n    });\n    var userCreatedOption = optionsInDropdown.find(function (n) {\n      return n.created;\n    });\n    var firstOriginOption = optionsInDropdown[0];\n    var valueList = optionsArray.value.map(function (item) {\n      return item.value;\n    });\n    states.hoveringIndex = getValueIndex(valueList, userCreatedOption || firstOriginOption);\n  };\n  var setSelected = function setSelected() {\n    if (!props.multiple) {\n      var value = isArray(props.modelValue) ? props.modelValue[0] : props.modelValue;\n      var option = getOption(value);\n      states.selectedLabel = option.currentLabel;\n      states.selected = [option];\n      return;\n    } else {\n      states.selectedLabel = \"\";\n    }\n    var result = [];\n    if (!isUndefined(props.modelValue)) {\n      castArray(props.modelValue).forEach(function (value) {\n        result.push(getOption(value));\n      });\n    }\n    states.selected = result;\n  };\n  var getOption = function getOption(value) {\n    var option;\n    var isObjectValue = isPlainObject(value);\n    var _loop = function _loop() {\n      var cachedOption = cachedOptionsArray.value[i];\n      var isEqualValue = isObjectValue ? get(cachedOption.value, props.valueKey) === get(value, props.valueKey) : cachedOption.value === value;\n      if (isEqualValue) {\n        option = {\n          value: value,\n          currentLabel: cachedOption.currentLabel,\n          get isDisabled() {\n            return cachedOption.isDisabled;\n          }\n        };\n        return 1; // break\n      }\n    };\n    for (var i = states.cachedOptions.size - 1; i >= 0; i--) {\n      if (_loop()) break;\n    }\n    if (option) return option;\n    var label = isObjectValue ? value.label : value != null ? value : \"\";\n    var newOption = {\n      value: value,\n      currentLabel: label\n    };\n    return newOption;\n  };\n  var updateHoveringIndex = function updateHoveringIndex() {\n    states.hoveringIndex = optionsArray.value.findIndex(function (item) {\n      return states.selected.some(function (selected) {\n        return getValueKey(selected) === getValueKey(item);\n      });\n    });\n  };\n  var resetSelectionWidth = function resetSelectionWidth() {\n    states.selectionWidth = selectionRef.value.getBoundingClientRect().width;\n  };\n  var resetCollapseItemWidth = function resetCollapseItemWidth() {\n    states.collapseItemWidth = collapseItemRef.value.getBoundingClientRect().width;\n  };\n  var updateTooltip = function updateTooltip() {\n    var _a, _b;\n    (_b = (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n  };\n  var updateTagTooltip = function updateTagTooltip() {\n    var _a, _b;\n    (_b = (_a = tagTooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n  };\n  var onInputChange = function onInputChange() {\n    if (states.inputValue.length > 0 && !expanded.value) {\n      expanded.value = true;\n    }\n    handleQueryChange(states.inputValue);\n  };\n  var onInput = function onInput(event) {\n    states.inputValue = event.target.value;\n    if (props.remote) {\n      debouncedOnInputChange();\n    } else {\n      return onInputChange();\n    }\n  };\n  var debouncedOnInputChange = debounce(function () {\n    onInputChange();\n  }, debounce$1.value);\n  var emitChange = function emitChange(val) {\n    if (!isEqual(props.modelValue, val)) {\n      emit(CHANGE_EVENT, val);\n    }\n  };\n  var getLastNotDisabledIndex = function getLastNotDisabledIndex(value) {\n    return findLastIndex(value, function (it) {\n      var option = states.cachedOptions.get(it);\n      return option && !option.disabled && !option.states.groupDisabled;\n    });\n  };\n  var deletePrevTag = function deletePrevTag(e) {\n    if (!props.multiple) return;\n    if (e.code === EVENT_CODE[\"delete\"]) return;\n    if (e.target.value.length <= 0) {\n      var value = castArray(props.modelValue).slice();\n      var lastNotDisabledIndex = getLastNotDisabledIndex(value);\n      if (lastNotDisabledIndex < 0) return;\n      var removeTagValue = value[lastNotDisabledIndex];\n      value.splice(lastNotDisabledIndex, 1);\n      emit(UPDATE_MODEL_EVENT, value);\n      emitChange(value);\n      emit(\"remove-tag\", removeTagValue);\n    }\n  };\n  var deleteTag = function deleteTag(event, tag) {\n    var index = states.selected.indexOf(tag);\n    if (index > -1 && !selectDisabled.value) {\n      var value = castArray(props.modelValue).slice();\n      value.splice(index, 1);\n      emit(UPDATE_MODEL_EVENT, value);\n      emitChange(value);\n      emit(\"remove-tag\", tag.value);\n    }\n    event.stopPropagation();\n    focus();\n  };\n  var deleteSelected = function deleteSelected(event) {\n    event.stopPropagation();\n    var value = props.multiple ? [] : valueOnClear.value;\n    if (props.multiple) {\n      var _iterator = _createForOfIteratorHelper(states.selected),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          if (item.isDisabled) value.push(item.value);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    emit(UPDATE_MODEL_EVENT, value);\n    emitChange(value);\n    states.hoveringIndex = -1;\n    expanded.value = false;\n    emit(\"clear\");\n    focus();\n  };\n  var handleOptionSelect = function handleOptionSelect(option) {\n    var _a;\n    if (props.multiple) {\n      var value = castArray((_a = props.modelValue) != null ? _a : []).slice();\n      var optionIndex = getValueIndex(value, option);\n      if (optionIndex > -1) {\n        value.splice(optionIndex, 1);\n      } else if (props.multipleLimit <= 0 || value.length < props.multipleLimit) {\n        value.push(option.value);\n      }\n      emit(UPDATE_MODEL_EVENT, value);\n      emitChange(value);\n      if (option.created) {\n        handleQueryChange(\"\");\n      }\n      if (props.filterable && !props.reserveKeyword) {\n        states.inputValue = \"\";\n      }\n    } else {\n      emit(UPDATE_MODEL_EVENT, option.value);\n      emitChange(option.value);\n      expanded.value = false;\n    }\n    focus();\n    if (expanded.value) return;\n    nextTick(function () {\n      scrollToOption(option);\n    });\n  };\n  var getValueIndex = function getValueIndex() {\n    var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var option = arguments.length > 1 ? arguments[1] : undefined;\n    if (isUndefined(option)) return -1;\n    if (!isObject(option.value)) return arr.indexOf(option.value);\n    return arr.findIndex(function (item) {\n      return isEqual(get(item, props.valueKey), getValueKey(option));\n    });\n  };\n  var scrollToOption = function scrollToOption(option) {\n    var _a, _b, _c, _d, _e;\n    var targetOption = isArray(option) ? option[0] : option;\n    var target = null;\n    if (targetOption == null ? void 0 : targetOption.value) {\n      var options = optionsArray.value.filter(function (item) {\n        return item.value === targetOption.value;\n      });\n      if (options.length > 0) {\n        target = options[0].$el;\n      }\n    }\n    if (tooltipRef.value && target) {\n      var menu = (_d = (_c = (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef) == null ? void 0 : _c.querySelector) == null ? void 0 : _d.call(_c, \".\".concat(nsSelect.be(\"dropdown\", \"wrap\")));\n      if (menu) {\n        scrollIntoView(menu, target);\n      }\n    }\n    (_e = scrollbarRef.value) == null ? void 0 : _e.handleScroll();\n  };\n  var onOptionCreate = function onOptionCreate(vm) {\n    states.options.set(vm.value, vm);\n    states.cachedOptions.set(vm.value, vm);\n  };\n  var onOptionDestroy = function onOptionDestroy(key, vm) {\n    if (states.options.get(key) === vm) {\n      states.options[\"delete\"](key);\n    }\n  };\n  var popperRef = computed(function () {\n    var _a, _b;\n    return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n  });\n  var handleMenuEnter = function handleMenuEnter() {\n    states.isBeforeHide = false;\n    nextTick(function () {\n      return scrollToOption(states.selected);\n    });\n  };\n  var focus = function focus() {\n    var _a;\n    (_a = inputRef.value) == null ? void 0 : _a.focus();\n  };\n  var blur = function blur() {\n    var _a;\n    if (expanded.value) {\n      expanded.value = false;\n      nextTick(function () {\n        var _a2;\n        return (_a2 = inputRef.value) == null ? void 0 : _a2.blur();\n      });\n      return;\n    }\n    (_a = inputRef.value) == null ? void 0 : _a.blur();\n  };\n  var handleClearClick = function handleClearClick(event) {\n    deleteSelected(event);\n  };\n  var handleClickOutside = function handleClickOutside(event) {\n    expanded.value = false;\n    if (isFocused.value) {\n      var _event = new FocusEvent(\"focus\", event);\n      nextTick(function () {\n        return handleBlur(_event);\n      });\n    }\n  };\n  var handleEsc = function handleEsc() {\n    if (states.inputValue.length > 0) {\n      states.inputValue = \"\";\n    } else {\n      expanded.value = false;\n    }\n  };\n  var toggleMenu = function toggleMenu() {\n    if (selectDisabled.value) return;\n    if (isIOS) states.inputHovering = true;\n    if (states.menuVisibleOnFocus) {\n      states.menuVisibleOnFocus = false;\n    } else {\n      expanded.value = !expanded.value;\n    }\n  };\n  var selectOption = function selectOption() {\n    if (!expanded.value) {\n      toggleMenu();\n    } else {\n      var option = optionsArray.value[states.hoveringIndex];\n      if (option && !option.isDisabled) {\n        handleOptionSelect(option);\n      }\n    }\n  };\n  var getValueKey = function getValueKey(item) {\n    return isObject(item.value) ? get(item.value, props.valueKey) : item.value;\n  };\n  var optionsAllDisabled = computed(function () {\n    return optionsArray.value.filter(function (option) {\n      return option.visible;\n    }).every(function (option) {\n      return option.isDisabled;\n    });\n  });\n  var showTagList = computed(function () {\n    if (!props.multiple) {\n      return [];\n    }\n    return props.collapseTags ? states.selected.slice(0, props.maxCollapseTags) : states.selected;\n  });\n  var collapseTagList = computed(function () {\n    if (!props.multiple) {\n      return [];\n    }\n    return props.collapseTags ? states.selected.slice(props.maxCollapseTags) : [];\n  });\n  var _navigateOptions = function navigateOptions(direction) {\n    if (!expanded.value) {\n      expanded.value = true;\n      return;\n    }\n    if (states.options.size === 0 || filteredOptionsCount.value === 0 || isComposing.value) return;\n    if (!optionsAllDisabled.value) {\n      if (direction === \"next\") {\n        states.hoveringIndex++;\n        if (states.hoveringIndex === states.options.size) {\n          states.hoveringIndex = 0;\n        }\n      } else if (direction === \"prev\") {\n        states.hoveringIndex--;\n        if (states.hoveringIndex < 0) {\n          states.hoveringIndex = states.options.size - 1;\n        }\n      }\n      var option = optionsArray.value[states.hoveringIndex];\n      if (option.isDisabled || !option.visible) {\n        _navigateOptions(direction);\n      }\n      nextTick(function () {\n        return scrollToOption(hoverOption.value);\n      });\n    }\n  };\n  var getGapWidth = function getGapWidth() {\n    if (!selectionRef.value) return 0;\n    var style = window.getComputedStyle(selectionRef.value);\n    return Number.parseFloat(style.gap || \"6px\");\n  };\n  var tagStyle = computed(function () {\n    var gapWidth = getGapWidth();\n    var maxWidth = collapseItemRef.value && props.maxCollapseTags === 1 ? states.selectionWidth - states.collapseItemWidth - gapWidth : states.selectionWidth;\n    return {\n      maxWidth: \"\".concat(maxWidth, \"px\")\n    };\n  });\n  var collapseTagStyle = computed(function () {\n    return {\n      maxWidth: \"\".concat(states.selectionWidth, \"px\")\n    };\n  });\n  useResizeObserver(selectionRef, resetSelectionWidth);\n  useResizeObserver(menuRef, updateTooltip);\n  useResizeObserver(wrapperRef, updateTooltip);\n  useResizeObserver(tagMenuRef, updateTagTooltip);\n  useResizeObserver(collapseItemRef, resetCollapseItemWidth);\n  onMounted(function () {\n    setSelected();\n  });\n  return {\n    inputId: inputId,\n    contentId: contentId,\n    nsSelect: nsSelect,\n    nsInput: nsInput,\n    states: states,\n    isFocused: isFocused,\n    expanded: expanded,\n    optionsArray: optionsArray,\n    hoverOption: hoverOption,\n    selectSize: selectSize,\n    filteredOptionsCount: filteredOptionsCount,\n    updateTooltip: updateTooltip,\n    updateTagTooltip: updateTagTooltip,\n    debouncedOnInputChange: debouncedOnInputChange,\n    onInput: onInput,\n    deletePrevTag: deletePrevTag,\n    deleteTag: deleteTag,\n    deleteSelected: deleteSelected,\n    handleOptionSelect: handleOptionSelect,\n    scrollToOption: scrollToOption,\n    hasModelValue: hasModelValue,\n    shouldShowPlaceholder: shouldShowPlaceholder,\n    currentPlaceholder: currentPlaceholder,\n    mouseEnterEventName: mouseEnterEventName,\n    needStatusIcon: needStatusIcon,\n    showClose: showClose,\n    iconComponent: iconComponent,\n    iconReverse: iconReverse,\n    validateState: validateState,\n    validateIcon: validateIcon,\n    showNewOption: showNewOption,\n    updateOptions: updateOptions,\n    collapseTagSize: collapseTagSize,\n    setSelected: setSelected,\n    selectDisabled: selectDisabled,\n    emptyText: emptyText,\n    handleCompositionStart: handleCompositionStart,\n    handleCompositionUpdate: handleCompositionUpdate,\n    handleCompositionEnd: handleCompositionEnd,\n    onOptionCreate: onOptionCreate,\n    onOptionDestroy: onOptionDestroy,\n    handleMenuEnter: handleMenuEnter,\n    focus: focus,\n    blur: blur,\n    handleClearClick: handleClearClick,\n    handleClickOutside: handleClickOutside,\n    handleEsc: handleEsc,\n    toggleMenu: toggleMenu,\n    selectOption: selectOption,\n    getValueKey: getValueKey,\n    navigateOptions: _navigateOptions,\n    dropdownMenuVisible: dropdownMenuVisible,\n    showTagList: showTagList,\n    collapseTagList: collapseTagList,\n    tagStyle: tagStyle,\n    collapseTagStyle: collapseTagStyle,\n    popperRef: popperRef,\n    inputRef: inputRef,\n    tooltipRef: tooltipRef,\n    tagTooltipRef: tagTooltipRef,\n    prefixRef: prefixRef,\n    suffixRef: suffixRef,\n    selectRef: selectRef,\n    wrapperRef: wrapperRef,\n    selectionRef: selectionRef,\n    scrollbarRef: scrollbarRef,\n    menuRef: menuRef,\n    tagMenuRef: tagMenuRef,\n    collapseItemRef: collapseItemRef\n  };\n};\nexport { useSelect };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}