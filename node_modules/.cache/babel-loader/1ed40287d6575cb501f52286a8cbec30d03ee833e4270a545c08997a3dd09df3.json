{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport { defineComponent, ref, reactive, computed, watch, openBlock, createElementBlock, unref, normalizeClass, createElementVNode, normalizeStyle, Fragment, renderList, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { useActiveElement, useResizeObserver } from '@vueuse/core';\nimport { segmentedProps, segmentedEmits } from './segmented.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { useFormSize, useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { isObject } from '@vue/shared';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nvar __default__ = defineComponent({\n  name: \"ElSegmented\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: segmentedProps,\n  emits: segmentedEmits,\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var ns = useNamespace(\"segmented\");\n    var segmentedId = useId();\n    var segmentedSize = useFormSize();\n    var _disabled = useFormDisabled();\n    var _useFormItem = useFormItem(),\n      formItem = _useFormItem.formItem;\n    var _useFormItemInputId = useFormItemInputId(props, {\n        formItemContext: formItem\n      }),\n      inputId = _useFormItemInputId.inputId,\n      isLabeledByFormItem = _useFormItemInputId.isLabeledByFormItem;\n    var segmentedRef = ref(null);\n    var activeElement = useActiveElement();\n    var state = reactive({\n      isInit: false,\n      width: 0,\n      height: 0,\n      translateX: 0,\n      translateY: 0,\n      focusVisible: false\n    });\n    var handleChange = function handleChange(item) {\n      var value = getValue(item);\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(CHANGE_EVENT, value);\n    };\n    var getValue = function getValue(item) {\n      return isObject(item) ? item.value : item;\n    };\n    var getLabel = function getLabel(item) {\n      return isObject(item) ? item.label : item;\n    };\n    var getDisabled = function getDisabled(item) {\n      return !!(_disabled.value || (isObject(item) ? item.disabled : false));\n    };\n    var getSelected = function getSelected(item) {\n      return props.modelValue === getValue(item);\n    };\n    var getOption = function getOption(value) {\n      return props.options.find(function (item) {\n        return getValue(item) === value;\n      });\n    };\n    var getItemCls = function getItemCls(item) {\n      return [ns.e(\"item\"), ns.is(\"selected\", getSelected(item)), ns.is(\"disabled\", getDisabled(item))];\n    };\n    var updateSelect = function updateSelect() {\n      if (!segmentedRef.value) return;\n      var selectedItem = segmentedRef.value.querySelector(\".is-selected\");\n      var selectedItemInput = segmentedRef.value.querySelector(\".is-selected input\");\n      if (!selectedItem || !selectedItemInput) {\n        state.width = 0;\n        state.height = 0;\n        state.translateX = 0;\n        state.translateY = 0;\n        state.focusVisible = false;\n        return;\n      }\n      var rect = selectedItem.getBoundingClientRect();\n      state.isInit = true;\n      if (props.direction === \"vertical\") {\n        state.height = rect.height;\n        state.translateY = selectedItem.offsetTop;\n      } else {\n        state.width = rect.width;\n        state.translateX = selectedItem.offsetLeft;\n      }\n      try {\n        state.focusVisible = selectedItemInput.matches(\":focus-visible\");\n      } catch (e) {}\n    };\n    var segmentedCls = computed(function () {\n      return [ns.b(), ns.m(segmentedSize.value), ns.is(\"block\", props.block)];\n    });\n    var selectedStyle = computed(function () {\n      return {\n        width: props.direction === \"vertical\" ? \"100%\" : \"\".concat(state.width, \"px\"),\n        height: props.direction === \"vertical\" ? \"\".concat(state.height, \"px\") : \"100%\",\n        transform: props.direction === \"vertical\" ? \"translateY(\".concat(state.translateY, \"px)\") : \"translateX(\".concat(state.translateX, \"px)\"),\n        display: state.isInit ? \"block\" : \"none\"\n      };\n    });\n    var selectedCls = computed(function () {\n      return [ns.e(\"item-selected\"), ns.is(\"disabled\", getDisabled(getOption(props.modelValue))), ns.is(\"focus-visible\", state.focusVisible)];\n    });\n    var name = computed(function () {\n      return props.name || segmentedId.value;\n    });\n    useResizeObserver(segmentedRef, updateSelect);\n    watch(activeElement, updateSelect);\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      var _a;\n      updateSelect();\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\")[\"catch\"](function (err) {\n          return debugWarn(err);\n        });\n      }\n    }, {\n      flush: \"post\"\n    });\n    return function (_ctx, _cache) {\n      return _ctx.options.length ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        id: unref(inputId),\n        ref_key: \"segmentedRef\",\n        ref: segmentedRef,\n        \"class\": normalizeClass(unref(segmentedCls)),\n        role: \"radiogroup\",\n        \"aria-label\": !unref(isLabeledByFormItem) ? _ctx.ariaLabel || \"segmented\" : void 0,\n        \"aria-labelledby\": unref(isLabeledByFormItem) ? unref(formItem).labelId : void 0\n      }, [createElementVNode(\"div\", {\n        \"class\": normalizeClass([unref(ns).e(\"group\"), unref(ns).m(props.direction)])\n      }, [createElementVNode(\"div\", {\n        style: normalizeStyle(unref(selectedStyle)),\n        \"class\": normalizeClass(unref(selectedCls))\n      }, null, 6), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, function (item, index) {\n        return openBlock(), createElementBlock(\"label\", {\n          key: index,\n          \"class\": normalizeClass(getItemCls(item))\n        }, [createElementVNode(\"input\", {\n          \"class\": normalizeClass(unref(ns).e(\"item-input\")),\n          type: \"radio\",\n          name: unref(name),\n          disabled: getDisabled(item),\n          checked: getSelected(item),\n          onChange: function onChange($event) {\n            return handleChange(item);\n          }\n        }, null, 42, [\"name\", \"disabled\", \"checked\", \"onChange\"]), createElementVNode(\"div\", {\n          \"class\": normalizeClass(unref(ns).e(\"item-label\"))\n        }, [renderSlot(_ctx.$slots, \"default\", {\n          item: item\n        }, function () {\n          return [createTextVNode(toDisplayString(getLabel(item)), 1)];\n        })], 2)], 2);\n      }), 128))], 2)], 10, [\"id\", \"aria-label\", \"aria-labelledby\"])) : createCommentVNode(\"v-if\", true);\n    };\n  }\n}));\nvar Segmented = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"segmented.vue\"]]);\nexport { Segmented as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}