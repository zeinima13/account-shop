{"ast":null,"code":"import _defineProperty from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { tagProps } from '../../tag/src/tag.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { useSizeProp } from '../../../hooks/use-size/index.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT, INPUT_EVENT } from '../../../constants/event.mjs';\nimport { isArray, isString } from '@vue/shared';\nimport { isUndefined } from '../../../utils/types.mjs';\nvar inputTagProps = buildProps({\n  modelValue: {\n    type: definePropType(Array)\n  },\n  max: Number,\n  tagType: _objectSpread(_objectSpread({}, tagProps.type), {}, {\n    \"default\": \"info\"\n  }),\n  tagEffect: tagProps.effect,\n  trigger: {\n    type: definePropType(String),\n    \"default\": EVENT_CODE.enter\n  },\n  draggable: {\n    type: Boolean,\n    \"default\": false\n  },\n  size: useSizeProp,\n  clearable: Boolean,\n  disabled: {\n    type: Boolean,\n    \"default\": void 0\n  },\n  validateEvent: {\n    type: Boolean,\n    \"default\": true\n  },\n  readonly: Boolean,\n  autofocus: Boolean,\n  id: {\n    type: String,\n    \"default\": void 0\n  },\n  tabindex: {\n    type: [String, Number],\n    \"default\": 0\n  },\n  maxlength: {\n    type: [String, Number]\n  },\n  minlength: {\n    type: [String, Number]\n  },\n  placeholder: String,\n  autocomplete: {\n    type: String,\n    \"default\": \"off\"\n  },\n  ariaLabel: String\n});\nvar inputTagEmits = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, UPDATE_MODEL_EVENT, function (value) {\n  return isArray(value) || isUndefined(value);\n}), CHANGE_EVENT, function (value) {\n  return isArray(value) || isUndefined(value);\n}), INPUT_EVENT, function (value) {\n  return isString(value);\n}), \"add-tag\", function addTag(value) {\n  return isString(value);\n}), \"remove-tag\", function removeTag(value) {\n  return isString(value);\n}), \"focus\", function focus(evt) {\n  return evt instanceof FocusEvent;\n}), \"blur\", function blur(evt) {\n  return evt instanceof FocusEvent;\n}), \"clear\", function clear() {\n  return true;\n});\nexport { inputTagEmits, inputTagProps };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}