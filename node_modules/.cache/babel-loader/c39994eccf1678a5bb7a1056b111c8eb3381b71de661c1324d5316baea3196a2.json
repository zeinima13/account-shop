{"ast":null,"code":"import _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { isNumber, isStringNumber } from '../types.mjs';\nimport { isClient } from '@vueuse/core';\nimport { entriesOf, keysOf } from '../objects.mjs';\nimport { debugWarn } from '../error.mjs';\nimport { camelize, isObject, isString } from '@vue/shared';\nvar SCOPE = \"utils/dom/style\";\nvar classNameToArray = function classNameToArray() {\n  var cls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return cls.split(\" \").filter(function (item) {\n    return !!item.trim();\n  });\n};\nvar hasClass = function hasClass(el, cls) {\n  if (!el || !cls) return false;\n  if (cls.includes(\" \")) throw new Error(\"className should not contain space.\");\n  return el.classList.contains(cls);\n};\nvar addClass = function addClass(el, cls) {\n  var _el$classList;\n  if (!el || !cls.trim()) return;\n  (_el$classList = el.classList).add.apply(_el$classList, _toConsumableArray(classNameToArray(cls)));\n};\nvar removeClass = function removeClass(el, cls) {\n  var _el$classList2;\n  if (!el || !cls.trim()) return;\n  (_el$classList2 = el.classList).remove.apply(_el$classList2, _toConsumableArray(classNameToArray(cls)));\n};\nvar getStyle = function getStyle(element, styleName) {\n  var _a;\n  if (!isClient || !element || !styleName) return \"\";\n  var key = camelize(styleName);\n  if (key === \"float\") key = \"cssFloat\";\n  try {\n    var style = element.style[key];\n    if (style) return style;\n    var computed = (_a = document.defaultView) == null ? void 0 : _a.getComputedStyle(element, \"\");\n    return computed ? computed[key] : \"\";\n  } catch (e) {\n    return element.style[key];\n  }\n};\nvar _setStyle = function setStyle(element, styleName, value) {\n  if (!element || !styleName) return;\n  if (isObject(styleName)) {\n    entriesOf(styleName).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        prop = _ref2[0],\n        value2 = _ref2[1];\n      return _setStyle(element, prop, value2);\n    });\n  } else {\n    var key = camelize(styleName);\n    element.style[key] = value;\n  }\n};\nvar _removeStyle = function removeStyle(element, style) {\n  if (!element || !style) return;\n  if (isObject(style)) {\n    keysOf(style).forEach(function (prop) {\n      return _removeStyle(element, prop);\n    });\n  } else {\n    _setStyle(element, style, \"\");\n  }\n};\nfunction addUnit(value) {\n  var defaultUnit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"px\";\n  if (!value) return \"\";\n  if (isNumber(value) || isStringNumber(value)) {\n    return \"\".concat(value).concat(defaultUnit);\n  } else if (isString(value)) {\n    return value;\n  }\n  debugWarn(SCOPE, \"binding value must be a string or number\");\n}\nexport { addClass, addUnit, classNameToArray, getStyle, hasClass, removeClass, _removeStyle as removeStyle, _setStyle as setStyle };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}