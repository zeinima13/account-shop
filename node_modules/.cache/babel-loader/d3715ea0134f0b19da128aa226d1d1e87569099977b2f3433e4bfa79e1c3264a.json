{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.parse-int.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport { castArray } from 'lodash-unified';\nimport { isFirefox } from '../../../utils/browser.mjs';\nvar filterOption = function filterOption(pattern, option) {\n  var lowerCase = pattern.toLowerCase();\n  var label = option.label || option.value;\n  return label.toLowerCase().includes(lowerCase);\n};\nvar getMentionCtx = function getMentionCtx(inputEl, prefix, split) {\n  var selectionEnd = inputEl.selectionEnd;\n  if (selectionEnd === null) return;\n  var inputValue = inputEl.value;\n  var prefixArray = castArray(prefix);\n  var splitIndex = -1;\n  var mentionCtx;\n  for (var i = selectionEnd - 1; i >= 0; --i) {\n    var _char = inputValue[i];\n    if (_char === split || _char === \"\\n\" || _char === \"\\r\") {\n      splitIndex = i;\n      continue;\n    }\n    if (prefixArray.includes(_char)) {\n      var end = splitIndex === -1 ? selectionEnd : splitIndex;\n      var pattern = inputValue.slice(i + 1, end);\n      mentionCtx = {\n        pattern: pattern,\n        start: i + 1,\n        end: end,\n        prefix: _char,\n        prefixIndex: i,\n        splitIndex: splitIndex,\n        selectionEnd: selectionEnd\n      };\n      break;\n    }\n  }\n  return mentionCtx;\n};\nvar getCursorPosition = function getCursorPosition(element) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    debug: false,\n    useSelectionEnd: false\n  };\n  var selectionStart = element.selectionStart !== null ? element.selectionStart : 0;\n  var selectionEnd = element.selectionEnd !== null ? element.selectionEnd : 0;\n  var position = options.useSelectionEnd ? selectionEnd : selectionStart;\n  var properties = [\"direction\", \"boxSizing\", \"width\", \"height\", \"overflowX\", \"overflowY\", \"borderTopWidth\", \"borderRightWidth\", \"borderBottomWidth\", \"borderLeftWidth\", \"borderStyle\", \"paddingTop\", \"paddingRight\", \"paddingBottom\", \"paddingLeft\", \"fontStyle\", \"fontVariant\", \"fontWeight\", \"fontStretch\", \"fontSize\", \"fontSizeAdjust\", \"lineHeight\", \"fontFamily\", \"textAlign\", \"textTransform\", \"textIndent\", \"textDecoration\", \"letterSpacing\", \"wordSpacing\", \"tabSize\", \"MozTabSize\"];\n  if (options.debug) {\n    var el = document.querySelector(\"#input-textarea-caret-position-mirror-div\");\n    if (el == null ? void 0 : el.parentNode) el.parentNode.removeChild(el);\n  }\n  var div = document.createElement(\"div\");\n  div.id = \"input-textarea-caret-position-mirror-div\";\n  document.body.appendChild(div);\n  var style = div.style;\n  var computed = window.getComputedStyle(element);\n  var isInput = element.nodeName === \"INPUT\";\n  style.whiteSpace = isInput ? \"nowrap\" : \"pre-wrap\";\n  if (!isInput) style.wordWrap = \"break-word\";\n  style.position = \"absolute\";\n  if (!options.debug) style.visibility = \"hidden\";\n  properties.forEach(function (prop) {\n    if (isInput && prop === \"lineHeight\") {\n      if (computed.boxSizing === \"border-box\") {\n        var height = Number.parseInt(computed.height);\n        var outerHeight = Number.parseInt(computed.paddingTop) + Number.parseInt(computed.paddingBottom) + Number.parseInt(computed.borderTopWidth) + Number.parseInt(computed.borderBottomWidth);\n        var targetHeight = outerHeight + Number.parseInt(computed.lineHeight);\n        if (height > targetHeight) {\n          style.lineHeight = \"\".concat(height - outerHeight, \"px\");\n        } else if (height === targetHeight) {\n          style.lineHeight = computed.lineHeight;\n        } else {\n          style.lineHeight = \"0\";\n        }\n      } else {\n        style.lineHeight = computed.height;\n      }\n    } else {\n      style[prop] = computed[prop];\n    }\n  });\n  if (isFirefox()) {\n    if (element.scrollHeight > Number.parseInt(computed.height)) {\n      style.overflowY = \"scroll\";\n    }\n  } else {\n    style.overflow = \"hidden\";\n  }\n  div.textContent = element.value.slice(0, Math.max(0, position));\n  if (isInput && div.textContent) {\n    div.textContent = div.textContent.replace(/\\s/g, \"\\xA0\");\n  }\n  var span = document.createElement(\"span\");\n  span.textContent = element.value.slice(Math.max(0, position)) || \".\";\n  span.style.position = \"relative\";\n  span.style.left = \"\".concat(-element.scrollLeft, \"px\");\n  span.style.top = \"\".concat(-element.scrollTop, \"px\");\n  div.appendChild(span);\n  var relativePosition = {\n    top: span.offsetTop + Number.parseInt(computed.borderTopWidth),\n    left: span.offsetLeft + Number.parseInt(computed.borderLeftWidth),\n    height: Number.parseInt(computed.fontSize) * 1.5\n  };\n  if (options.debug) {\n    span.style.backgroundColor = \"#aaa\";\n  } else {\n    document.body.removeChild(div);\n  }\n  if (relativePosition.left >= element.clientWidth) {\n    relativePosition.left = element.clientWidth;\n  }\n  return relativePosition;\n};\nexport { filterOption, getCursorPosition, getMentionCtx };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}