{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { defineComponent, useSlots, computed, openBlock, createBlock, resolveDynamicComponent, unref, normalizeClass, withCtx, createElementVNode, withDirectives, createElementBlock, isRef, withModifiers, vModelCheckbox, renderSlot, Fragment, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { checkboxProps, checkboxEmits } from './checkbox.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useCheckbox } from './composables/use-checkbox.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar __default__ = defineComponent({\n  name: \"ElCheckbox\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: checkboxProps,\n  emits: checkboxEmits,\n  setup: function setup(__props) {\n    var props = __props;\n    var slots = useSlots();\n    var _useCheckbox = useCheckbox(props, slots),\n      inputId = _useCheckbox.inputId,\n      isLabeledByFormItem = _useCheckbox.isLabeledByFormItem,\n      isChecked = _useCheckbox.isChecked,\n      isDisabled = _useCheckbox.isDisabled,\n      isFocused = _useCheckbox.isFocused,\n      checkboxSize = _useCheckbox.checkboxSize,\n      hasOwnLabel = _useCheckbox.hasOwnLabel,\n      model = _useCheckbox.model,\n      actualValue = _useCheckbox.actualValue,\n      handleChange = _useCheckbox.handleChange,\n      onClickRoot = _useCheckbox.onClickRoot;\n    var ns = useNamespace(\"checkbox\");\n    var compKls = computed(function () {\n      return [ns.b(), ns.m(checkboxSize.value), ns.is(\"disabled\", isDisabled.value), ns.is(\"bordered\", props.border), ns.is(\"checked\", isChecked.value)];\n    });\n    var spanKls = computed(function () {\n      return [ns.e(\"input\"), ns.is(\"disabled\", isDisabled.value), ns.is(\"checked\", isChecked.value), ns.is(\"indeterminate\", props.indeterminate), ns.is(\"focus\", isFocused.value)];\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(resolveDynamicComponent(!unref(hasOwnLabel) && unref(isLabeledByFormItem) ? \"span\" : \"label\"), {\n        \"class\": normalizeClass(unref(compKls)),\n        \"aria-controls\": _ctx.indeterminate ? _ctx.ariaControls : null,\n        onClick: unref(onClickRoot)\n      }, {\n        \"default\": withCtx(function () {\n          var _a, _b, _c, _d;\n          return [createElementVNode(\"span\", {\n            \"class\": normalizeClass(unref(spanKls))\n          }, [_ctx.trueValue || _ctx.falseValue || _ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock(\"input\", {\n            key: 0,\n            id: unref(inputId),\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return isRef(model) ? model.value = $event : null;\n            },\n            \"class\": normalizeClass(unref(ns).e(\"original\")),\n            type: \"checkbox\",\n            indeterminate: _ctx.indeterminate,\n            name: _ctx.name,\n            tabindex: _ctx.tabindex,\n            disabled: unref(isDisabled),\n            \"true-value\": (_b = (_a = _ctx.trueValue) != null ? _a : _ctx.trueLabel) != null ? _b : true,\n            \"false-value\": (_d = (_c = _ctx.falseValue) != null ? _c : _ctx.falseLabel) != null ? _d : false,\n            onChange: unref(handleChange),\n            onFocus: function onFocus($event) {\n              return isFocused.value = true;\n            },\n            onBlur: function onBlur($event) {\n              return isFocused.value = false;\n            },\n            onClick: withModifiers(function () {}, [\"stop\"])\n          }, null, 42, [\"id\", \"onUpdate:modelValue\", \"indeterminate\", \"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\", \"onChange\", \"onFocus\", \"onBlur\", \"onClick\"])), [[vModelCheckbox, unref(model)]]) : withDirectives((openBlock(), createElementBlock(\"input\", {\n            key: 1,\n            id: unref(inputId),\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return isRef(model) ? model.value = $event : null;\n            },\n            \"class\": normalizeClass(unref(ns).e(\"original\")),\n            type: \"checkbox\",\n            indeterminate: _ctx.indeterminate,\n            disabled: unref(isDisabled),\n            value: unref(actualValue),\n            name: _ctx.name,\n            tabindex: _ctx.tabindex,\n            onChange: unref(handleChange),\n            onFocus: function onFocus($event) {\n              return isFocused.value = true;\n            },\n            onBlur: function onBlur($event) {\n              return isFocused.value = false;\n            },\n            onClick: withModifiers(function () {}, [\"stop\"])\n          }, null, 42, [\"id\", \"onUpdate:modelValue\", \"indeterminate\", \"disabled\", \"value\", \"name\", \"tabindex\", \"onChange\", \"onFocus\", \"onBlur\", \"onClick\"])), [[vModelCheckbox, unref(model)]]), createElementVNode(\"span\", {\n            \"class\": normalizeClass(unref(ns).e(\"inner\"))\n          }, null, 2)], 2), unref(hasOwnLabel) ? (openBlock(), createElementBlock(\"span\", {\n            key: 0,\n            \"class\": normalizeClass(unref(ns).e(\"label\"))\n          }, [renderSlot(_ctx.$slots, \"default\"), !_ctx.$slots[\"default\"] ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [createTextVNode(toDisplayString(_ctx.label), 1)], 64)) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true)];\n        }),\n        _: 3\n      }, 8, [\"class\", \"aria-controls\", \"onClick\"]);\n    };\n  }\n}));\nvar Checkbox = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"checkbox.vue\"]]);\nexport { Checkbox as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}