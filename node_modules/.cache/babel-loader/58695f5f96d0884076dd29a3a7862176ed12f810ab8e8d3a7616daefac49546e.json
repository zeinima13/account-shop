{"ast":null,"code":"import _defineProperty from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { defineComponent, inject, ref, computed, watch, provide, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, renderSlot, createElementVNode, toDisplayString, createCommentVNode, withDirectives, vShow } from 'vue';\nimport { selectKey } from '../../select/src/token.mjs';\nimport TreeStore from './model/tree-store.mjs';\nimport { getNodeKey, handleCurrentChange } from './model/util.mjs';\nimport ElTreeNode from './tree-node.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { useDragNodeHandler } from './model/useDragNode.mjs';\nimport { useKeydown } from './model/useKeydown.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { iconPropType } from '../../../utils/vue/icon.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { formItemContextKey } from '../../form/src/constants.mjs';\nvar _sfc_main = defineComponent({\n  name: \"ElTree\",\n  components: {\n    ElTreeNode: ElTreeNode\n  },\n  props: {\n    data: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    emptyText: {\n      type: String\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      \"default\": true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      \"default\": true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      \"default\": false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      \"default\": true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    currentNodeKey: [String, Number],\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      \"default\": false\n    },\n    draggable: {\n      type: Boolean,\n      \"default\": false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object,\n      \"default\": function _default() {\n        return {\n          children: \"children\",\n          label: \"label\",\n          disabled: \"disabled\"\n        };\n      }\n    },\n    lazy: {\n      type: Boolean,\n      \"default\": false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      \"default\": 18\n    },\n    icon: {\n      type: iconPropType\n    }\n  },\n  emits: [\"check-change\", \"current-change\", \"node-click\", \"node-contextmenu\", \"node-collapse\", \"node-expand\", \"check\", \"node-drag-start\", \"node-drag-end\", \"node-drop\", \"node-drag-leave\", \"node-drag-enter\", \"node-drag-over\"],\n  setup: function setup(props, ctx) {\n    var _useLocale = useLocale(),\n      t = _useLocale.t;\n    var ns = useNamespace(\"tree\");\n    var selectInfo = inject(selectKey, null);\n    var store = ref(new TreeStore({\n      key: props.nodeKey,\n      data: props.data,\n      lazy: props.lazy,\n      props: props.props,\n      load: props.load,\n      currentNodeKey: props.currentNodeKey,\n      checkStrictly: props.checkStrictly,\n      checkDescendants: props.checkDescendants,\n      defaultCheckedKeys: props.defaultCheckedKeys,\n      defaultExpandedKeys: props.defaultExpandedKeys,\n      autoExpandParent: props.autoExpandParent,\n      defaultExpandAll: props.defaultExpandAll,\n      filterNodeMethod: props.filterNodeMethod\n    }));\n    store.value.initialize();\n    var root = ref(store.value.root);\n    var currentNode = ref(null);\n    var el$ = ref(null);\n    var dropIndicator$ = ref(null);\n    var _useNodeExpandEventBr = useNodeExpandEventBroadcast(props),\n      broadcastExpanded = _useNodeExpandEventBr.broadcastExpanded;\n    var _useDragNodeHandler = useDragNodeHandler({\n        props: props,\n        ctx: ctx,\n        el$: el$,\n        dropIndicator$: dropIndicator$,\n        store: store\n      }),\n      dragState = _useDragNodeHandler.dragState;\n    useKeydown({\n      el$: el$\n    }, store);\n    var isEmpty = computed(function () {\n      var childNodes = root.value.childNodes;\n      var hasFilteredOptions = selectInfo ? selectInfo.hasFilteredOptions !== 0 : false;\n      return (!childNodes || childNodes.length === 0 || childNodes.every(function (_ref) {\n        var visible = _ref.visible;\n        return !visible;\n      })) && !hasFilteredOptions;\n    });\n    watch(function () {\n      return props.currentNodeKey;\n    }, function (newVal) {\n      store.value.setCurrentNodeKey(newVal);\n    });\n    watch(function () {\n      return props.defaultCheckedKeys;\n    }, function (newVal) {\n      store.value.setDefaultCheckedKey(newVal);\n    });\n    watch(function () {\n      return props.defaultExpandedKeys;\n    }, function (newVal) {\n      store.value.setDefaultExpandedKeys(newVal);\n    });\n    watch(function () {\n      return props.data;\n    }, function (newVal) {\n      store.value.setData(newVal);\n    }, {\n      deep: true\n    });\n    watch(function () {\n      return props.checkStrictly;\n    }, function (newVal) {\n      store.value.checkStrictly = newVal;\n    });\n    var filter = function filter(value) {\n      if (!props.filterNodeMethod) throw new Error(\"[Tree] filterNodeMethod is required when filter\");\n      store.value.filter(value);\n    };\n    var getNodeKey$1 = function getNodeKey$1(node) {\n      return getNodeKey(props.nodeKey, node.data);\n    };\n    var getNodePath = function getNodePath(data) {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getNodePath\");\n      var node = store.value.getNode(data);\n      if (!node) return [];\n      var path = [node.data];\n      var parent = node.parent;\n      while (parent && parent !== root.value) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n      return path.reverse();\n    };\n    var getCheckedNodes = function getCheckedNodes(leafOnly, includeHalfChecked) {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked);\n    };\n    var getCheckedKeys = function getCheckedKeys(leafOnly) {\n      return store.value.getCheckedKeys(leafOnly);\n    };\n    var getCurrentNode = function getCurrentNode() {\n      var currentNode2 = store.value.getCurrentNode();\n      return currentNode2 ? currentNode2.data : null;\n    };\n    var getCurrentKey = function getCurrentKey() {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getCurrentKey\");\n      var currentNode2 = getCurrentNode();\n      return currentNode2 ? currentNode2[props.nodeKey] : null;\n    };\n    var setCheckedNodes = function setCheckedNodes(nodes, leafOnly) {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedNodes\");\n      store.value.setCheckedNodes(nodes, leafOnly);\n    };\n    var setCheckedKeys = function setCheckedKeys(keys, leafOnly) {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedKeys\");\n      store.value.setCheckedKeys(keys, leafOnly);\n    };\n    var setChecked = function setChecked(data, checked, deep) {\n      store.value.setChecked(data, checked, deep);\n    };\n    var getHalfCheckedNodes = function getHalfCheckedNodes() {\n      return store.value.getHalfCheckedNodes();\n    };\n    var getHalfCheckedKeys = function getHalfCheckedKeys() {\n      return store.value.getHalfCheckedKeys();\n    };\n    var setCurrentNode = function setCurrentNode(node) {\n      var shouldAutoExpandParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentNode\");\n      handleCurrentChange(store, ctx.emit, function () {\n        broadcastExpanded(node);\n        store.value.setUserCurrentNode(node, shouldAutoExpandParent);\n      });\n    };\n    var setCurrentKey = function setCurrentKey(key) {\n      var shouldAutoExpandParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentKey\");\n      handleCurrentChange(store, ctx.emit, function () {\n        broadcastExpanded();\n        store.value.setCurrentNodeKey(key, shouldAutoExpandParent);\n      });\n    };\n    var getNode = function getNode(data) {\n      return store.value.getNode(data);\n    };\n    var remove = function remove(data) {\n      store.value.remove(data);\n    };\n    var append = function append(data, parentNode) {\n      store.value.append(data, parentNode);\n    };\n    var insertBefore = function insertBefore(data, refNode) {\n      store.value.insertBefore(data, refNode);\n    };\n    var insertAfter = function insertAfter(data, refNode) {\n      store.value.insertAfter(data, refNode);\n    };\n    var handleNodeExpand = function handleNodeExpand(nodeData, node, instance) {\n      broadcastExpanded(node);\n      ctx.emit(\"node-expand\", nodeData, node, instance);\n    };\n    var updateKeyChildren = function updateKeyChildren(key, data) {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in updateKeyChild\");\n      store.value.updateChildren(key, data);\n    };\n    provide(\"RootTree\", {\n      ctx: ctx,\n      props: props,\n      store: store,\n      root: root,\n      currentNode: currentNode,\n      instance: getCurrentInstance()\n    });\n    provide(formItemContextKey, void 0);\n    return {\n      ns: ns,\n      store: store,\n      root: root,\n      currentNode: currentNode,\n      dragState: dragState,\n      el$: el$,\n      dropIndicator$: dropIndicator$,\n      isEmpty: isEmpty,\n      filter: filter,\n      getNodeKey: getNodeKey$1,\n      getNodePath: getNodePath,\n      getCheckedNodes: getCheckedNodes,\n      getCheckedKeys: getCheckedKeys,\n      getCurrentNode: getCurrentNode,\n      getCurrentKey: getCurrentKey,\n      setCheckedNodes: setCheckedNodes,\n      setCheckedKeys: setCheckedKeys,\n      setChecked: setChecked,\n      getHalfCheckedNodes: getHalfCheckedNodes,\n      getHalfCheckedKeys: getHalfCheckedKeys,\n      setCurrentNode: setCurrentNode,\n      setCurrentKey: setCurrentKey,\n      t: t,\n      getNode: getNode,\n      remove: remove,\n      append: append,\n      insertBefore: insertBefore,\n      insertAfter: insertAfter,\n      handleNodeExpand: handleNodeExpand,\n      updateKeyChildren: updateKeyChildren\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"el$\",\n    \"class\": normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"dragging\", !!_ctx.dragState.draggingNode), _ctx.ns.is(\"drop-not-allow\", !_ctx.dragState.allowDrop), _ctx.ns.is(\"drop-inner\", _ctx.dragState.dropType === \"inner\"), _defineProperty({}, _ctx.ns.m(\"highlight-current\"), _ctx.highlightCurrent)]),\n    role: \"tree\"\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.root.childNodes, function (child) {\n    return openBlock(), createBlock(_component_el_tree_node, {\n      key: _ctx.getNodeKey(child),\n      node: child,\n      props: _ctx.props,\n      accordion: _ctx.accordion,\n      \"render-after-expand\": _ctx.renderAfterExpand,\n      \"show-checkbox\": _ctx.showCheckbox,\n      \"render-content\": _ctx.renderContent,\n      onNodeExpand: _ctx.handleNodeExpand\n    }, null, 8, [\"node\", \"props\", \"accordion\", \"render-after-expand\", \"show-checkbox\", \"render-content\", \"onNodeExpand\"]);\n  }), 128)), _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    \"class\": normalizeClass(_ctx.ns.e(\"empty-block\"))\n  }, [renderSlot(_ctx.$slots, \"empty\", {}, function () {\n    var _a;\n    return [createElementVNode(\"span\", {\n      \"class\": normalizeClass(_ctx.ns.e(\"empty-text\"))\n    }, toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 3)];\n  })], 2)) : createCommentVNode(\"v-if\", true), withDirectives(createElementVNode(\"div\", {\n    ref: \"dropIndicator$\",\n    \"class\": normalizeClass(_ctx.ns.e(\"drop-indicator\"))\n  }, null, 2), [[vShow, _ctx.dragState.showDropIndicator]])], 2);\n}\nvar Tree = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"tree.vue\"]]);\nexport { Tree as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}