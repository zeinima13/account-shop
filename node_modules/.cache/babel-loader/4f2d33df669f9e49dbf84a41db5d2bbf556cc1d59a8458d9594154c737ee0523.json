{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.number.parse-int.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, reactive, defineComponent, h, Transition, withCtx, withDirectives, createVNode, vShow, createApp, toRefs } from 'vue';\nimport { useGlobalComponentSettings } from '../../config-provider/src/hooks/use-global-config.mjs';\nimport { removeClass } from '../../../utils/dom/style.mjs';\nfunction createLoadingComponent(options) {\n  var afterLeaveTimer;\n  var afterLeaveFlag = ref(false);\n  var data = reactive(_objectSpread(_objectSpread({}, options), {}, {\n    originalPosition: \"\",\n    originalOverflow: \"\",\n    visible: false\n  }));\n  function setText(text) {\n    data.text = text;\n  }\n  function destroySelf() {\n    var target = data.parent;\n    var ns = vm.ns;\n    if (!target.vLoadingAddClassList) {\n      var loadingNumber = target.getAttribute(\"loading-number\");\n      loadingNumber = Number.parseInt(loadingNumber) - 1;\n      if (!loadingNumber) {\n        removeClass(target, ns.bm(\"parent\", \"relative\"));\n        target.removeAttribute(\"loading-number\");\n      } else {\n        target.setAttribute(\"loading-number\", loadingNumber.toString());\n      }\n      removeClass(target, ns.bm(\"parent\", \"hidden\"));\n    }\n    removeElLoadingChild();\n    loadingInstance.unmount();\n  }\n  function removeElLoadingChild() {\n    var _a, _b;\n    (_b = (_a = vm.$el) == null ? void 0 : _a.parentNode) == null ? void 0 : _b.removeChild(vm.$el);\n  }\n  function close() {\n    var _a;\n    if (options.beforeClose && !options.beforeClose()) return;\n    afterLeaveFlag.value = true;\n    clearTimeout(afterLeaveTimer);\n    afterLeaveTimer = setTimeout(handleAfterLeave, 400);\n    data.visible = false;\n    (_a = options.closed) == null ? void 0 : _a.call(options);\n  }\n  function handleAfterLeave() {\n    if (!afterLeaveFlag.value) return;\n    var target = data.parent;\n    afterLeaveFlag.value = false;\n    target.vLoadingAddClassList = void 0;\n    destroySelf();\n  }\n  var elLoadingComponent = defineComponent({\n    name: \"ElLoading\",\n    setup: function setup(_, _ref) {\n      var expose = _ref.expose;\n      var _useGlobalComponentSe = useGlobalComponentSettings(\"loading\"),\n        ns = _useGlobalComponentSe.ns,\n        zIndex = _useGlobalComponentSe.zIndex;\n      expose({\n        ns: ns,\n        zIndex: zIndex\n      });\n      return function () {\n        var svg = data.spinner || data.svg;\n        var spinner = h(\"svg\", _objectSpread({\n          \"class\": \"circular\",\n          viewBox: data.svgViewBox ? data.svgViewBox : \"0 0 50 50\"\n        }, svg ? {\n          innerHTML: svg\n        } : {}), [h(\"circle\", {\n          \"class\": \"path\",\n          cx: \"25\",\n          cy: \"25\",\n          r: \"20\",\n          fill: \"none\"\n        })]);\n        var spinnerText = data.text ? h(\"p\", {\n          \"class\": ns.b(\"text\")\n        }, [data.text]) : void 0;\n        return h(Transition, {\n          name: ns.b(\"fade\"),\n          onAfterLeave: handleAfterLeave\n        }, {\n          \"default\": withCtx(function () {\n            return [withDirectives(createVNode(\"div\", {\n              style: {\n                backgroundColor: data.background || \"\"\n              },\n              \"class\": [ns.b(\"mask\"), data.customClass, data.fullscreen ? \"is-fullscreen\" : \"\"]\n            }, [h(\"div\", {\n              \"class\": ns.b(\"spinner\")\n            }, [spinner, spinnerText])]), [[vShow, data.visible]])];\n          })\n        });\n      };\n    }\n  });\n  var loadingInstance = createApp(elLoadingComponent);\n  var vm = loadingInstance.mount(document.createElement(\"div\"));\n  return _objectSpread(_objectSpread({}, toRefs(data)), {}, {\n    setText: setText,\n    removeElLoadingChild: removeElLoadingChild,\n    close: close,\n    handleAfterLeave: handleAfterLeave,\n    vm: vm,\n    get $el() {\n      return vm.$el;\n    }\n  });\n}\nexport { createLoadingComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}