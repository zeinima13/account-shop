{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.fixed.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { getCurrentInstance, toRefs, ref, computed, watch, unref } from 'vue';\nimport { getKeysMap, getRowIdentity, toggleRowStatus, getColumnById, getColumnByKey, orderBy } from '../util.mjs';\nimport useExpand from './expand.mjs';\nimport useCurrent from './current.mjs';\nimport useTree from './tree.mjs';\nimport { isUndefined } from '../../../../utils/types.mjs';\nimport { hasOwn, isArray, isString } from '@vue/shared';\nvar sortData = function sortData(data, states) {\n  var sortingColumn = states.sortingColumn;\n  if (!sortingColumn || isString(sortingColumn.sortable)) {\n    return data;\n  }\n  return orderBy(data, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);\n};\nvar _doFlattenColumns = function doFlattenColumns(columns) {\n  var result = [];\n  columns.forEach(function (column) {\n    if (column.children && column.children.length > 0) {\n      result.push.apply(result, _doFlattenColumns(column.children));\n    } else {\n      result.push(column);\n    }\n  });\n  return result;\n};\nfunction useWatcher() {\n  var _a;\n  var instance = getCurrentInstance();\n  var _toRefs = toRefs((_a = instance.proxy) == null ? void 0 : _a.$props),\n    tableSize = _toRefs.size;\n  var rowKey = ref(null);\n  var data = ref([]);\n  var _data = ref([]);\n  var isComplex = ref(false);\n  var _columns = ref([]);\n  var originColumns = ref([]);\n  var columns = ref([]);\n  var fixedColumns = ref([]);\n  var rightFixedColumns = ref([]);\n  var leafColumns = ref([]);\n  var fixedLeafColumns = ref([]);\n  var rightFixedLeafColumns = ref([]);\n  var updateOrderFns = [];\n  var leafColumnsLength = ref(0);\n  var fixedLeafColumnsLength = ref(0);\n  var rightFixedLeafColumnsLength = ref(0);\n  var isAllSelected = ref(false);\n  var selection = ref([]);\n  var reserveSelection = ref(false);\n  var selectOnIndeterminate = ref(false);\n  var selectable = ref(null);\n  var filters = ref({});\n  var filteredData = ref(null);\n  var sortingColumn = ref(null);\n  var sortProp = ref(null);\n  var sortOrder = ref(null);\n  var hoverRow = ref(null);\n  var selectedMap = computed(function () {\n    return rowKey.value ? getKeysMap(selection.value, rowKey.value) : void 0;\n  });\n  watch(data, function () {\n    var _a2;\n    if (instance.state) {\n      scheduleLayout(false);\n      var needUpdateFixed = instance.props.tableLayout === \"auto\";\n      if (needUpdateFixed) {\n        (_a2 = instance.refs.tableHeaderRef) == null ? void 0 : _a2.updateFixedColumnStyle();\n      }\n    }\n  }, {\n    deep: true\n  });\n  var assertRowKey = function assertRowKey() {\n    if (!rowKey.value) throw new Error(\"[ElTable] prop row-key is required\");\n  };\n  var _updateChildFixed = function updateChildFixed(column) {\n    var _a2;\n    (_a2 = column.children) == null ? void 0 : _a2.forEach(function (childColumn) {\n      childColumn.fixed = column.fixed;\n      _updateChildFixed(childColumn);\n    });\n  };\n  var selectionInitialFixed = void 0;\n  var updateColumns = function updateColumns() {\n    _columns.value.forEach(function (column) {\n      _updateChildFixed(column);\n    });\n    fixedColumns.value = _columns.value.filter(function (column) {\n      return column.fixed === true || column.fixed === \"left\";\n    });\n    rightFixedColumns.value = _columns.value.filter(function (column) {\n      return column.fixed === \"right\";\n    });\n    if (isUndefined(selectionInitialFixed) && _columns.value[0] && _columns.value[0].type === \"selection\") {\n      selectionInitialFixed = Boolean(_columns.value[0].fixed);\n    }\n    if (fixedColumns.value.length > 0 && _columns.value[0] && _columns.value[0].type === \"selection\") {\n      if (!_columns.value[0].fixed) {\n        _columns.value[0].fixed = true;\n        fixedColumns.value.unshift(_columns.value[0]);\n      } else {\n        var hasNotSelectionColumns = fixedColumns.value.some(function (column) {\n          return column.type !== \"selection\";\n        });\n        if (!hasNotSelectionColumns) {\n          _columns.value[0].fixed = selectionInitialFixed;\n          if (!selectionInitialFixed) fixedColumns.value.shift();\n        } else {\n          selectionInitialFixed = void 0;\n        }\n      }\n    }\n    var notFixedColumns = _columns.value.filter(function (column) {\n      return !column.fixed;\n    });\n    originColumns.value = [].concat(fixedColumns.value).concat(notFixedColumns).concat(rightFixedColumns.value);\n    var leafColumns2 = _doFlattenColumns(notFixedColumns);\n    var fixedLeafColumns2 = _doFlattenColumns(fixedColumns.value);\n    var rightFixedLeafColumns2 = _doFlattenColumns(rightFixedColumns.value);\n    leafColumnsLength.value = leafColumns2.length;\n    fixedLeafColumnsLength.value = fixedLeafColumns2.length;\n    rightFixedLeafColumnsLength.value = rightFixedLeafColumns2.length;\n    columns.value = [].concat(fixedLeafColumns2).concat(leafColumns2).concat(rightFixedLeafColumns2);\n    isComplex.value = fixedColumns.value.length > 0 || rightFixedColumns.value.length > 0;\n  };\n  var scheduleLayout = function scheduleLayout(needUpdateColumns) {\n    var immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (needUpdateColumns) {\n      updateColumns();\n    }\n    if (immediate) {\n      instance.state.doLayout();\n    } else {\n      instance.state.debouncedUpdateLayout();\n    }\n  };\n  var isSelected = function isSelected(row) {\n    if (selectedMap.value) {\n      return !!selectedMap.value[getRowIdentity(row, rowKey.value)];\n    } else {\n      return selection.value.includes(row);\n    }\n  };\n  var clearSelection = function clearSelection() {\n    isAllSelected.value = false;\n    var oldSelection = selection.value;\n    selection.value = [];\n    if (oldSelection.length) {\n      instance.emit(\"selection-change\", []);\n    }\n  };\n  var cleanSelection = function cleanSelection() {\n    var deleted;\n    if (rowKey.value) {\n      deleted = [];\n      var dataMap = getKeysMap(data.value, rowKey.value);\n      for (var key in selectedMap.value) {\n        if (hasOwn(selectedMap.value, key) && !dataMap[key]) {\n          deleted.push(selectedMap.value[key].row);\n        }\n      }\n    } else {\n      deleted = selection.value.filter(function (item) {\n        return !data.value.includes(item);\n      });\n    }\n    if (deleted.length) {\n      var newSelection = selection.value.filter(function (item) {\n        return !deleted.includes(item);\n      });\n      selection.value = newSelection;\n      instance.emit(\"selection-change\", newSelection.slice());\n    }\n  };\n  var getSelectionRows = function getSelectionRows() {\n    return (selection.value || []).slice();\n  };\n  var toggleRowSelection = function toggleRowSelection(row, selected) {\n    var emitChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var ignoreSelectable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var _a2, _b, _c, _d;\n    var treeProps = {\n      children: (_b = (_a2 = instance == null ? void 0 : instance.store) == null ? void 0 : _a2.states) == null ? void 0 : _b.childrenColumnName.value,\n      checkStrictly: (_d = (_c = instance == null ? void 0 : instance.store) == null ? void 0 : _c.states) == null ? void 0 : _d.checkStrictly.value\n    };\n    var changed = toggleRowStatus(selection.value, row, selected, treeProps, ignoreSelectable ? void 0 : selectable.value);\n    if (changed) {\n      var newSelection = (selection.value || []).slice();\n      if (emitChange) {\n        instance.emit(\"select\", newSelection, row);\n      }\n      instance.emit(\"selection-change\", newSelection);\n    }\n  };\n  var _toggleAllSelection = function _toggleAllSelection() {\n    var _a2, _b;\n    var value = selectOnIndeterminate.value ? !isAllSelected.value : !(isAllSelected.value || selection.value.length);\n    isAllSelected.value = value;\n    var selectionChanged = false;\n    var childrenCount = 0;\n    var rowKey2 = (_b = (_a2 = instance == null ? void 0 : instance.store) == null ? void 0 : _a2.states) == null ? void 0 : _b.rowKey.value;\n    var childrenColumnName = instance.store.states.childrenColumnName;\n    var treeProps = {\n      children: childrenColumnName.value,\n      checkStrictly: false\n    };\n    data.value.forEach(function (row, index) {\n      var rowIndex = index + childrenCount;\n      if (toggleRowStatus(selection.value, row, value, treeProps, selectable.value, rowIndex)) {\n        selectionChanged = true;\n      }\n      childrenCount += _getChildrenCount(getRowIdentity(row, rowKey2));\n    });\n    if (selectionChanged) {\n      instance.emit(\"selection-change\", selection.value ? selection.value.slice() : []);\n    }\n    instance.emit(\"select-all\", (selection.value || []).slice());\n  };\n  var updateSelectionByRowKey = function updateSelectionByRowKey() {\n    data.value.forEach(function (row) {\n      var rowId = getRowIdentity(row, rowKey.value);\n      var rowInfo = selectedMap.value[rowId];\n      if (rowInfo) {\n        selection.value[rowInfo.index] = row;\n      }\n    });\n  };\n  var updateAllSelected = function updateAllSelected() {\n    var _a2;\n    if (((_a2 = data.value) == null ? void 0 : _a2.length) === 0) {\n      isAllSelected.value = false;\n      return;\n    }\n    var childrenColumnName = instance.store.states.childrenColumnName;\n    var rowIndex = 0;\n    var selectedCount = 0;\n    var _checkSelectedStatus = function checkSelectedStatus(data2) {\n      var _a3;\n      var _iterator = _createForOfIteratorHelper(data2),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var row = _step.value;\n          var isRowSelectable = selectable.value && selectable.value.call(null, row, rowIndex);\n          if (!isSelected(row)) {\n            if (!selectable.value || isRowSelectable) {\n              return false;\n            }\n          } else {\n            selectedCount++;\n          }\n          rowIndex++;\n          if (((_a3 = row[childrenColumnName.value]) == null ? void 0 : _a3.length) && !_checkSelectedStatus(row[childrenColumnName.value])) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return true;\n    };\n    var isAllSelected_ = _checkSelectedStatus(data.value || []);\n    isAllSelected.value = selectedCount === 0 ? false : isAllSelected_;\n  };\n  var _getChildrenCount = function getChildrenCount(rowKey2) {\n    var _a2;\n    if (!instance || !instance.store) return 0;\n    var treeData = instance.store.states.treeData;\n    var count = 0;\n    var children = (_a2 = treeData.value[rowKey2]) == null ? void 0 : _a2.children;\n    if (children) {\n      count += children.length;\n      children.forEach(function (childKey) {\n        count += _getChildrenCount(childKey);\n      });\n    }\n    return count;\n  };\n  var updateFilters = function updateFilters(columns2, values) {\n    if (!isArray(columns2)) {\n      columns2 = [columns2];\n    }\n    var filters_ = {};\n    columns2.forEach(function (col) {\n      filters.value[col.id] = values;\n      filters_[col.columnKey || col.id] = values;\n    });\n    return filters_;\n  };\n  var updateSort = function updateSort(column, prop, order) {\n    if (sortingColumn.value && sortingColumn.value !== column) {\n      sortingColumn.value.order = null;\n    }\n    sortingColumn.value = column;\n    sortProp.value = prop;\n    sortOrder.value = order;\n  };\n  var execFilter = function execFilter() {\n    var sourceData = unref(_data);\n    Object.keys(filters.value).forEach(function (columnId) {\n      var values = filters.value[columnId];\n      if (!values || values.length === 0) return;\n      var column = getColumnById({\n        columns: columns.value\n      }, columnId);\n      if (column && column.filterMethod) {\n        sourceData = sourceData.filter(function (row) {\n          return values.some(function (value) {\n            return column.filterMethod.call(null, value, row, column);\n          });\n        });\n      }\n    });\n    filteredData.value = sourceData;\n  };\n  var execSort = function execSort() {\n    data.value = sortData(filteredData.value, {\n      sortingColumn: sortingColumn.value,\n      sortProp: sortProp.value,\n      sortOrder: sortOrder.value\n    });\n  };\n  var execQuery = function execQuery() {\n    var ignore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : void 0;\n    if (!(ignore && ignore.filter)) {\n      execFilter();\n    }\n    execSort();\n  };\n  var clearFilter = function clearFilter(columnKeys) {\n    var tableHeaderRef = instance.refs.tableHeaderRef;\n    if (!tableHeaderRef) return;\n    var panels = Object.assign({}, tableHeaderRef.filterPanels);\n    var keys = Object.keys(panels);\n    if (!keys.length) return;\n    if (isString(columnKeys)) {\n      columnKeys = [columnKeys];\n    }\n    if (isArray(columnKeys)) {\n      var columns_ = columnKeys.map(function (key) {\n        return getColumnByKey({\n          columns: columns.value\n        }, key);\n      });\n      keys.forEach(function (key) {\n        var column = columns_.find(function (col) {\n          return col.id === key;\n        });\n        if (column) {\n          column.filteredValue = [];\n        }\n      });\n      instance.store.commit(\"filterChange\", {\n        column: columns_,\n        values: [],\n        silent: true,\n        multi: true\n      });\n    } else {\n      keys.forEach(function (key) {\n        var column = columns.value.find(function (col) {\n          return col.id === key;\n        });\n        if (column) {\n          column.filteredValue = [];\n        }\n      });\n      filters.value = {};\n      instance.store.commit(\"filterChange\", {\n        column: {},\n        values: [],\n        silent: true\n      });\n    }\n  };\n  var clearSort = function clearSort() {\n    if (!sortingColumn.value) return;\n    updateSort(null, null, null);\n    instance.store.commit(\"changeSortCondition\", {\n      silent: true\n    });\n  };\n  var _useExpand = useExpand({\n      data: data,\n      rowKey: rowKey\n    }),\n    setExpandRowKeys = _useExpand.setExpandRowKeys,\n    toggleRowExpansion = _useExpand.toggleRowExpansion,\n    updateExpandRows = _useExpand.updateExpandRows,\n    expandStates = _useExpand.states,\n    isRowExpanded = _useExpand.isRowExpanded;\n  var _useTree = useTree({\n      data: data,\n      rowKey: rowKey\n    }),\n    updateTreeExpandKeys = _useTree.updateTreeExpandKeys,\n    toggleTreeExpansion = _useTree.toggleTreeExpansion,\n    updateTreeData = _useTree.updateTreeData,\n    updateKeyChildren = _useTree.updateKeyChildren,\n    loadOrToggle = _useTree.loadOrToggle,\n    treeStates = _useTree.states;\n  var _useCurrent = useCurrent({\n      data: data,\n      rowKey: rowKey\n    }),\n    updateCurrentRowData = _useCurrent.updateCurrentRowData,\n    updateCurrentRow = _useCurrent.updateCurrentRow,\n    setCurrentRowKey = _useCurrent.setCurrentRowKey,\n    currentData = _useCurrent.states;\n  var setExpandRowKeysAdapter = function setExpandRowKeysAdapter(val) {\n    setExpandRowKeys(val);\n    updateTreeExpandKeys(val);\n  };\n  var toggleRowExpansionAdapter = function toggleRowExpansionAdapter(row, expanded) {\n    var hasExpandColumn = columns.value.some(function (_ref) {\n      var type = _ref.type;\n      return type === \"expand\";\n    });\n    if (hasExpandColumn) {\n      toggleRowExpansion(row, expanded);\n    } else {\n      toggleTreeExpansion(row, expanded);\n    }\n  };\n  return {\n    assertRowKey: assertRowKey,\n    updateColumns: updateColumns,\n    scheduleLayout: scheduleLayout,\n    isSelected: isSelected,\n    clearSelection: clearSelection,\n    cleanSelection: cleanSelection,\n    getSelectionRows: getSelectionRows,\n    toggleRowSelection: toggleRowSelection,\n    _toggleAllSelection: _toggleAllSelection,\n    toggleAllSelection: null,\n    updateSelectionByRowKey: updateSelectionByRowKey,\n    updateAllSelected: updateAllSelected,\n    updateFilters: updateFilters,\n    updateCurrentRow: updateCurrentRow,\n    updateSort: updateSort,\n    execFilter: execFilter,\n    execSort: execSort,\n    execQuery: execQuery,\n    clearFilter: clearFilter,\n    clearSort: clearSort,\n    toggleRowExpansion: toggleRowExpansion,\n    setExpandRowKeysAdapter: setExpandRowKeysAdapter,\n    setCurrentRowKey: setCurrentRowKey,\n    toggleRowExpansionAdapter: toggleRowExpansionAdapter,\n    isRowExpanded: isRowExpanded,\n    updateExpandRows: updateExpandRows,\n    updateCurrentRowData: updateCurrentRowData,\n    loadOrToggle: loadOrToggle,\n    updateTreeData: updateTreeData,\n    updateKeyChildren: updateKeyChildren,\n    states: _objectSpread(_objectSpread(_objectSpread({\n      tableSize: tableSize,\n      rowKey: rowKey,\n      data: data,\n      _data: _data,\n      isComplex: isComplex,\n      _columns: _columns,\n      originColumns: originColumns,\n      columns: columns,\n      fixedColumns: fixedColumns,\n      rightFixedColumns: rightFixedColumns,\n      leafColumns: leafColumns,\n      fixedLeafColumns: fixedLeafColumns,\n      rightFixedLeafColumns: rightFixedLeafColumns,\n      updateOrderFns: updateOrderFns,\n      leafColumnsLength: leafColumnsLength,\n      fixedLeafColumnsLength: fixedLeafColumnsLength,\n      rightFixedLeafColumnsLength: rightFixedLeafColumnsLength,\n      isAllSelected: isAllSelected,\n      selection: selection,\n      reserveSelection: reserveSelection,\n      selectOnIndeterminate: selectOnIndeterminate,\n      selectable: selectable,\n      filters: filters,\n      filteredData: filteredData,\n      sortingColumn: sortingColumn,\n      sortProp: sortProp,\n      sortOrder: sortOrder,\n      hoverRow: hoverRow\n    }, expandStates), treeStates), currentData)\n  };\n}\nexport { useWatcher as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}