{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { inject, computed, getCurrentInstance, toRaw, watch } from 'vue';\nimport { castArray, get } from 'lodash-unified';\nimport { selectKey, selectGroupKey } from './token.mjs';\nimport { escapeStringRegexp } from '../../../utils/strings.mjs';\nimport { isObject } from '@vue/shared';\nfunction useOption(props, states) {\n  var select = inject(selectKey);\n  var selectGroup = inject(selectGroupKey, {\n    disabled: false\n  });\n  var itemSelected = computed(function () {\n    return contains(castArray(select.props.modelValue), props.value);\n  });\n  var limitReached = computed(function () {\n    var _a;\n    if (select.props.multiple) {\n      var modelValue = castArray((_a = select.props.modelValue) != null ? _a : []);\n      return !itemSelected.value && modelValue.length >= select.props.multipleLimit && select.props.multipleLimit > 0;\n    } else {\n      return false;\n    }\n  });\n  var currentLabel = computed(function () {\n    return props.label || (isObject(props.value) ? \"\" : props.value);\n  });\n  var currentValue = computed(function () {\n    return props.value || props.label || \"\";\n  });\n  var isDisabled = computed(function () {\n    return props.disabled || states.groupDisabled || limitReached.value;\n  });\n  var instance = getCurrentInstance();\n  var contains = function contains() {\n    var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var target = arguments.length > 1 ? arguments[1] : undefined;\n    if (!isObject(props.value)) {\n      return arr && arr.includes(target);\n    } else {\n      var valueKey = select.props.valueKey;\n      return arr && arr.some(function (item) {\n        return toRaw(get(item, valueKey)) === get(target, valueKey);\n      });\n    }\n  };\n  var hoverItem = function hoverItem() {\n    if (!props.disabled && !selectGroup.disabled) {\n      select.states.hoveringIndex = select.optionsArray.indexOf(instance.proxy);\n    }\n  };\n  var updateOption = function updateOption(query) {\n    var regexp = new RegExp(escapeStringRegexp(query), \"i\");\n    states.visible = regexp.test(currentLabel.value) || props.created;\n  };\n  watch(function () {\n    return currentLabel.value;\n  }, function () {\n    if (!props.created && !select.props.remote) select.setSelected();\n  });\n  watch(function () {\n    return props.value;\n  }, function (val, oldVal) {\n    var _select$props = select.props,\n      remote = _select$props.remote,\n      valueKey = _select$props.valueKey;\n    if (val !== oldVal) {\n      select.onOptionDestroy(oldVal, instance.proxy);\n      select.onOptionCreate(instance.proxy);\n    }\n    if (!props.created && !remote) {\n      if (valueKey && isObject(val) && isObject(oldVal) && val[valueKey] === oldVal[valueKey]) {\n        return;\n      }\n      select.setSelected();\n    }\n  });\n  watch(function () {\n    return selectGroup.disabled;\n  }, function () {\n    states.groupDisabled = selectGroup.disabled;\n  }, {\n    immediate: true\n  });\n  return {\n    select: select,\n    currentLabel: currentLabel,\n    currentValue: currentValue,\n    itemSelected: itemSelected,\n    isDisabled: isDisabled,\n    hoverItem: hoverItem,\n    updateOption: updateOption\n  };\n}\nexport { useOption };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}