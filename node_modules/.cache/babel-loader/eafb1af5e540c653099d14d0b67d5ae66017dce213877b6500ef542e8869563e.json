{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport { computed, inject, ref, useSlots, Text } from 'vue';\nimport { buttonGroupContextKey } from './constants.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { useGlobalConfig } from '../../config-provider/src/hooks/use-global-config.mjs';\nimport { useFormItem } from '../../form/src/hooks/use-form-item.mjs';\nimport { useFormSize, useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nvar useButton = function useButton(props, emit) {\n  useDeprecated({\n    from: \"type.text\",\n    replacement: \"link\",\n    version: \"3.0.0\",\n    scope: \"props\",\n    ref: \"https://element-plus.org/en-US/component/button.html#button-attributes\"\n  }, computed(function () {\n    return props.type === \"text\";\n  }));\n  var buttonGroupContext = inject(buttonGroupContextKey, void 0);\n  var globalConfig = useGlobalConfig(\"button\");\n  var _useFormItem = useFormItem(),\n    form = _useFormItem.form;\n  var _size = useFormSize(computed(function () {\n    return buttonGroupContext == null ? void 0 : buttonGroupContext.size;\n  }));\n  var _disabled = useFormDisabled();\n  var _ref = ref();\n  var slots = useSlots();\n  var _type = computed(function () {\n    return props.type || (buttonGroupContext == null ? void 0 : buttonGroupContext.type) || \"\";\n  });\n  var autoInsertSpace = computed(function () {\n    var _a, _b, _c;\n    return (_c = (_b = props.autoInsertSpace) != null ? _b : (_a = globalConfig.value) == null ? void 0 : _a.autoInsertSpace) != null ? _c : false;\n  });\n  var _props = computed(function () {\n    if (props.tag === \"button\") {\n      return {\n        ariaDisabled: _disabled.value || props.loading,\n        disabled: _disabled.value || props.loading,\n        autofocus: props.autofocus,\n        type: props.nativeType\n      };\n    }\n    return {};\n  });\n  var shouldAddSpace = computed(function () {\n    var _a;\n    var defaultSlot = (_a = slots[\"default\"]) == null ? void 0 : _a.call(slots);\n    if (autoInsertSpace.value && (defaultSlot == null ? void 0 : defaultSlot.length) === 1) {\n      var slot = defaultSlot[0];\n      if ((slot == null ? void 0 : slot.type) === Text) {\n        var text = slot.children;\n        return /^(?:[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uFA0E\\uFA0F\\uFA11\\uFA13\\uFA14\\uFA1F\\uFA21\\uFA23\\uFA24\\uFA27-\\uFA29]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883\\uD885-\\uD887][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF39\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0\\uDFF0-\\uDFFF]|\\uD87B[\\uDC00-\\uDE5D]|\\uD884[\\uDC00-\\uDF4A\\uDF50-\\uDFFF]|\\uD888[\\uDC00-\\uDFAF]){2}$/.test(text.trim());\n      }\n    }\n    return false;\n  });\n  var handleClick = function handleClick(evt) {\n    if (_disabled.value || props.loading) {\n      evt.stopPropagation();\n      return;\n    }\n    if (props.nativeType === \"reset\") {\n      form == null ? void 0 : form.resetFields();\n    }\n    emit(\"click\", evt);\n  };\n  return {\n    _disabled: _disabled,\n    _size: _size,\n    _type: _type,\n    _ref: _ref,\n    _props: _props,\n    shouldAddSpace: shouldAddSpace,\n    handleClick: handleClick\n  };\n};\nexport { useButton };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}