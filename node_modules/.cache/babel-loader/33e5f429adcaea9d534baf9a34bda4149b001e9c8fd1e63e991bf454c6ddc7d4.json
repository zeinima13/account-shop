{"ast":null,"code":"import _classCallCheck from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { isEqual } from 'lodash-unified';\nimport Node from './node.mjs';\nvar _flatNodes = function flatNodes(nodes, leafOnly) {\n  return nodes.reduce(function (res, node) {\n    if (node.isLeaf) {\n      res.push(node);\n    } else {\n      !leafOnly && res.push(node);\n      res = res.concat(_flatNodes(node.children, leafOnly));\n    }\n    return res;\n  }, []);\n};\nvar Store = /*#__PURE__*/function () {\n  function Store(data, config) {\n    var _this = this;\n    _classCallCheck(this, Store);\n    this.config = config;\n    var nodes = (data || []).map(function (nodeData) {\n      return new Node(nodeData, _this.config);\n    });\n    this.nodes = nodes;\n    this.allNodes = _flatNodes(nodes, false);\n    this.leafNodes = _flatNodes(nodes, true);\n  }\n  return _createClass(Store, [{\n    key: \"getNodes\",\n    value: function getNodes() {\n      return this.nodes;\n    }\n  }, {\n    key: \"getFlattedNodes\",\n    value: function getFlattedNodes(leafOnly) {\n      return leafOnly ? this.leafNodes : this.allNodes;\n    }\n  }, {\n    key: \"appendNode\",\n    value: function appendNode(nodeData, parentNode) {\n      var node = parentNode ? parentNode.appendChild(nodeData) : new Node(nodeData, this.config);\n      if (!parentNode) this.nodes.push(node);\n      this.allNodes.push(node);\n      node.isLeaf && this.leafNodes.push(node);\n    }\n  }, {\n    key: \"appendNodes\",\n    value: function appendNodes(nodeDataList, parentNode) {\n      var _this2 = this;\n      nodeDataList.forEach(function (nodeData) {\n        return _this2.appendNode(nodeData, parentNode);\n      });\n    }\n  }, {\n    key: \"getNodeByValue\",\n    value: function getNodeByValue(value) {\n      var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!value && value !== 0) return null;\n      var node = this.getFlattedNodes(leafOnly).find(function (node2) {\n        return isEqual(node2.value, value) || isEqual(node2.pathValues, value);\n      });\n      return node || null;\n    }\n  }, {\n    key: \"getSameNode\",\n    value: function getSameNode(node) {\n      if (!node) return null;\n      var node_ = this.getFlattedNodes(false).find(function (_ref) {\n        var value = _ref.value,\n          level = _ref.level;\n        return isEqual(node.value, value) && node.level === level;\n      });\n      return node_ || null;\n    }\n  }]);\n}();\nexport { Store as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}