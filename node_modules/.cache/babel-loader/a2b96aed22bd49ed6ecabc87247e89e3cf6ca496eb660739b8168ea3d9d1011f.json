{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport { computed, unref, isRef, ref, inject } from 'vue';\nimport { get } from 'lodash-unified';\nimport English from '../../locale/lang/en.mjs';\nvar buildTranslator = function buildTranslator(locale) {\n  return function (path, option) {\n    return translate(path, option, unref(locale));\n  };\n};\nvar translate = function translate(path, option, locale) {\n  return get(locale, path, path).replace(/\\{(\\w+)\\}/g, function (_, key) {\n    var _a;\n    return \"\".concat((_a = option == null ? void 0 : option[key]) != null ? _a : \"{\".concat(key, \"}\"));\n  });\n};\nvar buildLocaleContext = function buildLocaleContext(locale) {\n  var lang = computed(function () {\n    return unref(locale).name;\n  });\n  var localeRef = isRef(locale) ? locale : ref(locale);\n  return {\n    lang: lang,\n    locale: localeRef,\n    t: buildTranslator(locale)\n  };\n};\nvar localeContextKey = Symbol(\"localeContextKey\");\nvar useLocale = function useLocale(localeOverrides) {\n  var locale = localeOverrides || inject(localeContextKey, ref());\n  return buildLocaleContext(computed(function () {\n    return locale.value || English;\n  }));\n};\nexport { buildLocaleContext, buildTranslator, localeContextKey, translate, useLocale };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}