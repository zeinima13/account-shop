{"ast":null,"code":"import _defineProperty from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.string.link.js\";\nimport { defineComponent, computed, openBlock, createBlock, resolveDynamicComponent, mergeProps, unref, withCtx, createElementBlock, Fragment, renderSlot, normalizeClass, createCommentVNode } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { useButton } from './use-button.mjs';\nimport { buttonProps, buttonEmits } from './button.mjs';\nimport { useButtonCustomStyle } from './button-custom.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar __default__ = defineComponent({\n  name: \"ElButton\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: buttonProps,\n  emits: buttonEmits,\n  setup: function setup(__props, _ref2) {\n    var expose = _ref2.expose,\n      emit = _ref2.emit;\n    var props = __props;\n    var buttonStyle = useButtonCustomStyle(props);\n    var ns = useNamespace(\"button\");\n    var _useButton = useButton(props, emit),\n      _ref = _useButton._ref,\n      _size = _useButton._size,\n      _type = _useButton._type,\n      _disabled = _useButton._disabled,\n      _props = _useButton._props,\n      shouldAddSpace = _useButton.shouldAddSpace,\n      handleClick = _useButton.handleClick;\n    var buttonKls = computed(function () {\n      return [ns.b(), ns.m(_type.value), ns.m(_size.value), ns.is(\"disabled\", _disabled.value), ns.is(\"loading\", props.loading), ns.is(\"plain\", props.plain), ns.is(\"round\", props.round), ns.is(\"circle\", props.circle), ns.is(\"text\", props.text), ns.is(\"link\", props.link), ns.is(\"has-bg\", props.bg)];\n    });\n    expose({\n      ref: _ref,\n      size: _size,\n      type: _type,\n      disabled: _disabled,\n      shouldAddSpace: shouldAddSpace\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), mergeProps({\n        ref_key: \"_ref\",\n        ref: _ref\n      }, unref(_props), {\n        \"class\": unref(buttonKls),\n        style: unref(buttonStyle),\n        onClick: unref(handleClick)\n      }), {\n        \"default\": withCtx(function () {\n          return [_ctx.loading ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [_ctx.$slots.loading ? renderSlot(_ctx.$slots, \"loading\", {\n            key: 0\n          }) : (openBlock(), createBlock(unref(ElIcon), {\n            key: 1,\n            \"class\": normalizeClass(unref(ns).is(\"loading\"))\n          }, {\n            \"default\": withCtx(function () {\n              return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.loadingIcon)))];\n            }),\n            _: 1\n          }, 8, [\"class\"]))], 64)) : _ctx.icon || _ctx.$slots.icon ? (openBlock(), createBlock(unref(ElIcon), {\n            key: 1\n          }, {\n            \"default\": withCtx(function () {\n              return [_ctx.icon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), {\n                key: 0\n              })) : renderSlot(_ctx.$slots, \"icon\", {\n                key: 1\n              })];\n            }),\n            _: 3\n          })) : createCommentVNode(\"v-if\", true), _ctx.$slots[\"default\"] ? (openBlock(), createElementBlock(\"span\", {\n            key: 2,\n            \"class\": normalizeClass(_defineProperty({}, unref(ns).em(\"text\", \"expand\"), unref(shouldAddSpace)))\n          }, [renderSlot(_ctx.$slots, \"default\")], 2)) : createCommentVNode(\"v-if\", true)];\n        }),\n        _: 3\n      }, 16, [\"class\", \"style\", \"onClick\"]);\n    };\n  }\n}));\nvar Button = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"button.vue\"]]);\nexport { Button as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}