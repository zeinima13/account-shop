{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.parse-float.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport { defineComponent, markRaw, ref, effectScope, shallowRef, computed, watch, nextTick, onMounted, openBlock, createBlock, unref, withCtx, createVNode, Transition, createElementVNode, normalizeClass, normalizeStyle, withModifiers, createCommentVNode, createElementBlock, Fragment, resolveDynamicComponent, renderList, withDirectives, vShow, renderSlot } from 'vue';\nimport { useEventListener } from '@vueuse/core';\nimport { throttle } from 'lodash-unified';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nimport { ElTeleport } from '../../teleport/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { FullScreen, ScaleToOriginal, Close, ArrowLeft, ArrowRight, ZoomOut, ZoomIn, RefreshLeft, RefreshRight } from '@element-plus/icons-vue';\nimport { imageViewerProps, imageViewerEmits } from './image-viewer.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { keysOf } from '../../../utils/objects.mjs';\nvar __default__ = defineComponent({\n  name: \"ElImageViewer\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: imageViewerProps,\n  emits: imageViewerEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var _a;\n    var props = __props;\n    var modes = {\n      CONTAIN: {\n        name: \"contain\",\n        icon: markRaw(FullScreen)\n      },\n      ORIGINAL: {\n        name: \"original\",\n        icon: markRaw(ScaleToOriginal)\n      }\n    };\n    var _useLocale = useLocale(),\n      t = _useLocale.t;\n    var ns = useNamespace(\"image-viewer\");\n    var _useZIndex = useZIndex(),\n      nextZIndex = _useZIndex.nextZIndex;\n    var wrapper = ref();\n    var imgRefs = ref([]);\n    var scopeEventListener = effectScope();\n    var loading = ref(true);\n    var activeIndex = ref(props.initialIndex);\n    var mode = shallowRef(modes.CONTAIN);\n    var transform = ref({\n      scale: 1,\n      deg: 0,\n      offsetX: 0,\n      offsetY: 0,\n      enableTransition: false\n    });\n    var zIndex = ref((_a = props.zIndex) != null ? _a : nextZIndex());\n    var isSingle = computed(function () {\n      var urlList = props.urlList;\n      return urlList.length <= 1;\n    });\n    var isFirst = computed(function () {\n      return activeIndex.value === 0;\n    });\n    var isLast = computed(function () {\n      return activeIndex.value === props.urlList.length - 1;\n    });\n    var currentImg = computed(function () {\n      return props.urlList[activeIndex.value];\n    });\n    var arrowPrevKls = computed(function () {\n      return [ns.e(\"btn\"), ns.e(\"prev\"), ns.is(\"disabled\", !props.infinite && isFirst.value)];\n    });\n    var arrowNextKls = computed(function () {\n      return [ns.e(\"btn\"), ns.e(\"next\"), ns.is(\"disabled\", !props.infinite && isLast.value)];\n    });\n    var imgStyle = computed(function () {\n      var _transform$value = transform.value,\n        scale = _transform$value.scale,\n        deg = _transform$value.deg,\n        offsetX = _transform$value.offsetX,\n        offsetY = _transform$value.offsetY,\n        enableTransition = _transform$value.enableTransition;\n      var translateX = offsetX / scale;\n      var translateY = offsetY / scale;\n      var radian = deg * Math.PI / 180;\n      var cosRadian = Math.cos(radian);\n      var sinRadian = Math.sin(radian);\n      translateX = translateX * cosRadian + translateY * sinRadian;\n      translateY = translateY * cosRadian - offsetX / scale * sinRadian;\n      var style = {\n        transform: \"scale(\".concat(scale, \") rotate(\").concat(deg, \"deg) translate(\").concat(translateX, \"px, \").concat(translateY, \"px)\"),\n        transition: enableTransition ? \"transform .3s\" : \"\"\n      };\n      if (mode.value.name === modes.CONTAIN.name) {\n        style.maxWidth = style.maxHeight = \"100%\";\n      }\n      return style;\n    });\n    function hide() {\n      unregisterEventListener();\n      emit(\"close\");\n    }\n    function registerEventListener() {\n      var keydownHandler = throttle(function (e) {\n        switch (e.code) {\n          case EVENT_CODE.esc:\n            props.closeOnPressEscape && hide();\n            break;\n          case EVENT_CODE.space:\n            toggleMode();\n            break;\n          case EVENT_CODE.left:\n            prev();\n            break;\n          case EVENT_CODE.up:\n            handleActions(\"zoomIn\");\n            break;\n          case EVENT_CODE.right:\n            next();\n            break;\n          case EVENT_CODE.down:\n            handleActions(\"zoomOut\");\n            break;\n        }\n      });\n      var mousewheelHandler = throttle(function (e) {\n        var delta = e.deltaY || e.deltaX;\n        handleActions(delta < 0 ? \"zoomIn\" : \"zoomOut\", {\n          zoomRate: props.zoomRate,\n          enableTransition: false\n        });\n      });\n      scopeEventListener.run(function () {\n        useEventListener(document, \"keydown\", keydownHandler);\n        useEventListener(document, \"wheel\", mousewheelHandler);\n      });\n    }\n    function unregisterEventListener() {\n      scopeEventListener.stop();\n    }\n    function handleImgLoad() {\n      loading.value = false;\n    }\n    function handleImgError(e) {\n      loading.value = false;\n      e.target.alt = t(\"el.image.error\");\n    }\n    function handleMouseDown(e) {\n      if (loading.value || e.button !== 0 || !wrapper.value) return;\n      transform.value.enableTransition = false;\n      var _transform$value2 = transform.value,\n        offsetX = _transform$value2.offsetX,\n        offsetY = _transform$value2.offsetY;\n      var startX = e.pageX;\n      var startY = e.pageY;\n      var dragHandler = throttle(function (ev) {\n        transform.value = _objectSpread(_objectSpread({}, transform.value), {}, {\n          offsetX: offsetX + ev.pageX - startX,\n          offsetY: offsetY + ev.pageY - startY\n        });\n      });\n      var removeMousemove = useEventListener(document, \"mousemove\", dragHandler);\n      useEventListener(document, \"mouseup\", function () {\n        removeMousemove();\n      });\n      e.preventDefault();\n    }\n    function reset() {\n      transform.value = {\n        scale: 1,\n        deg: 0,\n        offsetX: 0,\n        offsetY: 0,\n        enableTransition: false\n      };\n    }\n    function toggleMode() {\n      if (loading.value) return;\n      var modeNames = keysOf(modes);\n      var modeValues = Object.values(modes);\n      var currentMode = mode.value.name;\n      var index = modeValues.findIndex(function (i) {\n        return i.name === currentMode;\n      });\n      var nextIndex = (index + 1) % modeNames.length;\n      mode.value = modes[modeNames[nextIndex]];\n      reset();\n    }\n    function setActiveItem(index) {\n      var len = props.urlList.length;\n      activeIndex.value = (index + len) % len;\n    }\n    function prev() {\n      if (isFirst.value && !props.infinite) return;\n      setActiveItem(activeIndex.value - 1);\n    }\n    function next() {\n      if (isLast.value && !props.infinite) return;\n      setActiveItem(activeIndex.value + 1);\n    }\n    function handleActions(action) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (loading.value) return;\n      var minScale = props.minScale,\n        maxScale = props.maxScale;\n      var _zoomRate$rotateDeg$e = _objectSpread({\n          zoomRate: props.zoomRate,\n          rotateDeg: 90,\n          enableTransition: true\n        }, options),\n        zoomRate = _zoomRate$rotateDeg$e.zoomRate,\n        rotateDeg = _zoomRate$rotateDeg$e.rotateDeg,\n        enableTransition = _zoomRate$rotateDeg$e.enableTransition;\n      switch (action) {\n        case \"zoomOut\":\n          if (transform.value.scale > minScale) {\n            transform.value.scale = Number.parseFloat((transform.value.scale / zoomRate).toFixed(3));\n          }\n          break;\n        case \"zoomIn\":\n          if (transform.value.scale < maxScale) {\n            transform.value.scale = Number.parseFloat((transform.value.scale * zoomRate).toFixed(3));\n          }\n          break;\n        case \"clockwise\":\n          transform.value.deg += rotateDeg;\n          emit(\"rotate\", transform.value.deg);\n          break;\n        case \"anticlockwise\":\n          transform.value.deg -= rotateDeg;\n          emit(\"rotate\", transform.value.deg);\n          break;\n      }\n      transform.value.enableTransition = enableTransition;\n    }\n    function onFocusoutPrevented(event) {\n      var _a2;\n      if (((_a2 = event.detail) == null ? void 0 : _a2.focusReason) === \"pointer\") {\n        event.preventDefault();\n      }\n    }\n    function onCloseRequested() {\n      if (props.closeOnPressEscape) {\n        hide();\n      }\n    }\n    watch(currentImg, function () {\n      nextTick(function () {\n        var $img = imgRefs.value[0];\n        if (!($img == null ? void 0 : $img.complete)) {\n          loading.value = true;\n        }\n      });\n    });\n    watch(activeIndex, function (val) {\n      reset();\n      emit(\"switch\", val);\n    });\n    onMounted(function () {\n      registerEventListener();\n    });\n    expose({\n      setActiveItem: setActiveItem\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(unref(ElTeleport), {\n        to: \"body\",\n        disabled: !_ctx.teleported\n      }, {\n        \"default\": withCtx(function () {\n          return [createVNode(Transition, {\n            name: \"viewer-fade\",\n            appear: \"\"\n          }, {\n            \"default\": withCtx(function () {\n              return [createElementVNode(\"div\", {\n                ref_key: \"wrapper\",\n                ref: wrapper,\n                tabindex: -1,\n                \"class\": normalizeClass(unref(ns).e(\"wrapper\")),\n                style: normalizeStyle({\n                  zIndex: zIndex.value\n                })\n              }, [createVNode(unref(ElFocusTrap), {\n                loop: \"\",\n                trapped: \"\",\n                \"focus-trap-el\": wrapper.value,\n                \"focus-start-el\": \"container\",\n                onFocusoutPrevented: onFocusoutPrevented,\n                onReleaseRequested: onCloseRequested\n              }, {\n                \"default\": withCtx(function () {\n                  return [createElementVNode(\"div\", {\n                    \"class\": normalizeClass(unref(ns).e(\"mask\")),\n                    onClick: withModifiers(function ($event) {\n                      return _ctx.hideOnClickModal && hide();\n                    }, [\"self\"])\n                  }, null, 10, [\"onClick\"]), createCommentVNode(\" CLOSE \"), createElementVNode(\"span\", {\n                    \"class\": normalizeClass([unref(ns).e(\"btn\"), unref(ns).e(\"close\")]),\n                    onClick: hide\n                  }, [createVNode(unref(ElIcon), null, {\n                    \"default\": withCtx(function () {\n                      return [createVNode(unref(Close))];\n                    }),\n                    _: 1\n                  })], 2), createCommentVNode(\" ARROW \"), !unref(isSingle) ? (openBlock(), createElementBlock(Fragment, {\n                    key: 0\n                  }, [createElementVNode(\"span\", {\n                    \"class\": normalizeClass(unref(arrowPrevKls)),\n                    onClick: prev\n                  }, [createVNode(unref(ElIcon), null, {\n                    \"default\": withCtx(function () {\n                      return [createVNode(unref(ArrowLeft))];\n                    }),\n                    _: 1\n                  })], 2), createElementVNode(\"span\", {\n                    \"class\": normalizeClass(unref(arrowNextKls)),\n                    onClick: next\n                  }, [createVNode(unref(ElIcon), null, {\n                    \"default\": withCtx(function () {\n                      return [createVNode(unref(ArrowRight))];\n                    }),\n                    _: 1\n                  })], 2)], 64)) : createCommentVNode(\"v-if\", true), createCommentVNode(\" ACTIONS \"), createElementVNode(\"div\", {\n                    \"class\": normalizeClass([unref(ns).e(\"btn\"), unref(ns).e(\"actions\")])\n                  }, [createElementVNode(\"div\", {\n                    \"class\": normalizeClass(unref(ns).e(\"actions__inner\"))\n                  }, [createVNode(unref(ElIcon), {\n                    onClick: function onClick($event) {\n                      return handleActions(\"zoomOut\");\n                    }\n                  }, {\n                    \"default\": withCtx(function () {\n                      return [createVNode(unref(ZoomOut))];\n                    }),\n                    _: 1\n                  }, 8, [\"onClick\"]), createVNode(unref(ElIcon), {\n                    onClick: function onClick($event) {\n                      return handleActions(\"zoomIn\");\n                    }\n                  }, {\n                    \"default\": withCtx(function () {\n                      return [createVNode(unref(ZoomIn))];\n                    }),\n                    _: 1\n                  }, 8, [\"onClick\"]), createElementVNode(\"i\", {\n                    \"class\": normalizeClass(unref(ns).e(\"actions__divider\"))\n                  }, null, 2), createVNode(unref(ElIcon), {\n                    onClick: toggleMode\n                  }, {\n                    \"default\": withCtx(function () {\n                      return [(openBlock(), createBlock(resolveDynamicComponent(unref(mode).icon)))];\n                    }),\n                    _: 1\n                  }), createElementVNode(\"i\", {\n                    \"class\": normalizeClass(unref(ns).e(\"actions__divider\"))\n                  }, null, 2), createVNode(unref(ElIcon), {\n                    onClick: function onClick($event) {\n                      return handleActions(\"anticlockwise\");\n                    }\n                  }, {\n                    \"default\": withCtx(function () {\n                      return [createVNode(unref(RefreshLeft))];\n                    }),\n                    _: 1\n                  }, 8, [\"onClick\"]), createVNode(unref(ElIcon), {\n                    onClick: function onClick($event) {\n                      return handleActions(\"clockwise\");\n                    }\n                  }, {\n                    \"default\": withCtx(function () {\n                      return [createVNode(unref(RefreshRight))];\n                    }),\n                    _: 1\n                  }, 8, [\"onClick\"])], 2)], 2), createCommentVNode(\" CANVAS \"), createElementVNode(\"div\", {\n                    \"class\": normalizeClass(unref(ns).e(\"canvas\"))\n                  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.urlList, function (url, i) {\n                    return withDirectives((openBlock(), createElementBlock(\"img\", {\n                      ref_for: true,\n                      ref: function ref(el) {\n                        return imgRefs.value[i] = el;\n                      },\n                      key: url,\n                      src: url,\n                      style: normalizeStyle(unref(imgStyle)),\n                      \"class\": normalizeClass(unref(ns).e(\"img\")),\n                      crossorigin: _ctx.crossorigin,\n                      onLoad: handleImgLoad,\n                      onError: handleImgError,\n                      onMousedown: handleMouseDown\n                    }, null, 46, [\"src\", \"crossorigin\"])), [[vShow, i === activeIndex.value]]);\n                  }), 128))], 2), renderSlot(_ctx.$slots, \"default\")];\n                }),\n                _: 3\n              }, 8, [\"focus-trap-el\"])], 6)];\n            }),\n            _: 3\n          })];\n        }),\n        _: 3\n      }, 8, [\"disabled\"]);\n    };\n  }\n}));\nvar ImageViewer = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"image-viewer.vue\"]]);\nexport { ImageViewer as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}