{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"height\"];\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.parse-int.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.fixed.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { defineComponent, unref, createVNode, mergeProps, inject, ref, computed, onMounted, nextTick } from 'vue';\nimport { tableV2RowProps } from '../row.mjs';\nimport { TableV2InjectionKey } from '../tokens.mjs';\nimport { placeholderSign } from '../private.mjs';\nimport { isArray, isFunction } from '@vue/shared';\nimport { isNumber } from '../../../../utils/types.mjs';\nvar useTableRow = function useTableRow(props) {\n  var _inject = inject(TableV2InjectionKey),\n    isScrolling = _inject.isScrolling;\n  var measured = ref(false);\n  var rowRef = ref();\n  var measurable = computed(function () {\n    return isNumber(props.estimatedRowHeight) && props.rowIndex >= 0;\n  });\n  var doMeasure = function doMeasure() {\n    var isInit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var $rowRef = unref(rowRef);\n    if (!$rowRef) return;\n    var columns = props.columns,\n      onRowHeightChange = props.onRowHeightChange,\n      rowKey = props.rowKey,\n      rowIndex = props.rowIndex,\n      style = props.style;\n    var _$rowRef$getBoundingC = $rowRef.getBoundingClientRect(),\n      height = _$rowRef$getBoundingC.height;\n    measured.value = true;\n    nextTick(function () {\n      if (isInit || height !== Number.parseInt(style.height)) {\n        var firstColumn = columns[0];\n        var isPlaceholder = (firstColumn == null ? void 0 : firstColumn.placeholderSign) === placeholderSign;\n        onRowHeightChange == null ? void 0 : onRowHeightChange({\n          rowKey: rowKey,\n          height: height,\n          rowIndex: rowIndex\n        }, firstColumn && !isPlaceholder && firstColumn.fixed);\n      }\n    });\n  };\n  var eventHandlers = computed(function () {\n    var rowData = props.rowData,\n      rowIndex = props.rowIndex,\n      rowKey = props.rowKey,\n      onRowHover = props.onRowHover;\n    var handlers = props.rowEventHandlers || {};\n    var eventHandlers2 = {};\n    Object.entries(handlers).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        eventName = _ref2[0],\n        handler = _ref2[1];\n      if (isFunction(handler)) {\n        eventHandlers2[eventName] = function (event) {\n          handler({\n            event: event,\n            rowData: rowData,\n            rowIndex: rowIndex,\n            rowKey: rowKey\n          });\n        };\n      }\n    });\n    if (onRowHover) {\n      [{\n        name: \"onMouseleave\",\n        hovered: false\n      }, {\n        name: \"onMouseenter\",\n        hovered: true\n      }].forEach(function (_ref3) {\n        var name = _ref3.name,\n          hovered = _ref3.hovered;\n        var existedHandler = eventHandlers2[name];\n        eventHandlers2[name] = function (event) {\n          onRowHover({\n            event: event,\n            hovered: hovered,\n            rowData: rowData,\n            rowIndex: rowIndex,\n            rowKey: rowKey\n          });\n          existedHandler == null ? void 0 : existedHandler(event);\n        };\n      });\n    }\n    return eventHandlers2;\n  });\n  var onExpand = function onExpand(expanded) {\n    var onRowExpand = props.onRowExpand,\n      rowData = props.rowData,\n      rowIndex = props.rowIndex,\n      rowKey = props.rowKey;\n    onRowExpand == null ? void 0 : onRowExpand({\n      expanded: expanded,\n      rowData: rowData,\n      rowIndex: rowIndex,\n      rowKey: rowKey\n    });\n  };\n  onMounted(function () {\n    if (unref(measurable)) {\n      doMeasure(true);\n    }\n  });\n  return {\n    isScrolling: isScrolling,\n    measurable: measurable,\n    measured: measured,\n    rowRef: rowRef,\n    eventHandlers: eventHandlers,\n    onExpand: onExpand\n  };\n};\nvar COMPONENT_NAME = \"ElTableV2TableRow\";\nvar TableV2Row = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2RowProps,\n  setup: function setup(props, _ref4) {\n    var expose = _ref4.expose,\n      slots = _ref4.slots,\n      attrs = _ref4.attrs;\n    var _useTableRow = useTableRow(props),\n      eventHandlers = _useTableRow.eventHandlers,\n      isScrolling = _useTableRow.isScrolling,\n      measurable = _useTableRow.measurable,\n      measured = _useTableRow.measured,\n      rowRef = _useTableRow.rowRef,\n      onExpand = _useTableRow.onExpand;\n    expose({\n      onExpand: onExpand\n    });\n    return function () {\n      var columns = props.columns,\n        columnsStyles = props.columnsStyles,\n        expandColumnKey = props.expandColumnKey,\n        depth = props.depth,\n        rowData = props.rowData,\n        rowIndex = props.rowIndex,\n        style = props.style;\n      var ColumnCells = columns.map(function (column, columnIndex) {\n        var expandable = isArray(rowData.children) && rowData.children.length > 0 && column.key === expandColumnKey;\n        return slots.cell({\n          column: column,\n          columns: columns,\n          columnIndex: columnIndex,\n          depth: depth,\n          style: columnsStyles[column.key],\n          rowData: rowData,\n          rowIndex: rowIndex,\n          isScrolling: unref(isScrolling),\n          expandIconProps: expandable ? {\n            rowData: rowData,\n            rowIndex: rowIndex,\n            onExpand: onExpand\n          } : void 0\n        });\n      });\n      if (slots.row) {\n        ColumnCells = slots.row({\n          cells: ColumnCells.map(function (node) {\n            if (isArray(node) && node.length === 1) {\n              return node[0];\n            }\n            return node;\n          }),\n          style: style,\n          columns: columns,\n          depth: depth,\n          rowData: rowData,\n          rowIndex: rowIndex,\n          isScrolling: unref(isScrolling)\n        });\n      }\n      if (unref(measurable)) {\n        var _ref5 = style || {},\n          height = _ref5.height,\n          exceptHeightStyle = _objectWithoutProperties(_ref5, _excluded);\n        var _measured = unref(measured);\n        return createVNode(\"div\", mergeProps({\n          \"ref\": rowRef,\n          \"class\": props[\"class\"],\n          \"style\": _measured ? style : exceptHeightStyle,\n          \"role\": \"row\"\n        }, attrs, unref(eventHandlers)), [ColumnCells]);\n      }\n      return createVNode(\"div\", mergeProps(attrs, {\n        \"ref\": rowRef,\n        \"class\": props[\"class\"],\n        \"style\": style,\n        \"role\": \"row\"\n      }, unref(eventHandlers)), [ColumnCells]);\n    };\n  }\n});\nvar Row = TableV2Row;\nexport { Row as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}