{"ast":null,"code":"import _slicedToArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { getCurrentInstance, inject, ref, unref, watch } from 'vue';\nimport { isValidRange, getDefaultValue } from '../utils.mjs';\nimport { ROOT_PICKER_INJECTION_KEY } from '../constants.mjs';\nimport { useShortcut } from './use-shortcut.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { isArray } from '@vue/shared';\nvar useRangePicker = function useRangePicker(props, _ref) {\n  var defaultValue = _ref.defaultValue,\n    leftDate = _ref.leftDate,\n    rightDate = _ref.rightDate,\n    unit = _ref.unit,\n    onParsedValueChanged = _ref.onParsedValueChanged;\n  var _getCurrentInstance = getCurrentInstance(),\n    emit = _getCurrentInstance.emit;\n  var _inject = inject(ROOT_PICKER_INJECTION_KEY),\n    pickerNs = _inject.pickerNs;\n  var drpNs = useNamespace(\"date-range-picker\");\n  var _useLocale = useLocale(),\n    t = _useLocale.t,\n    lang = _useLocale.lang;\n  var handleShortcutClick = useShortcut(lang);\n  var minDate = ref();\n  var maxDate = ref();\n  var rangeState = ref({\n    endDate: null,\n    selecting: false\n  });\n  var handleChangeRange = function handleChangeRange(val) {\n    rangeState.value = val;\n  };\n  var handleRangeConfirm = function handleRangeConfirm() {\n    var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var _minDate = unref(minDate);\n    var _maxDate = unref(maxDate);\n    if (isValidRange([_minDate, _maxDate])) {\n      emit(\"pick\", [_minDate, _maxDate], visible);\n    }\n  };\n  var onSelect = function onSelect(selecting) {\n    rangeState.value.selecting = selecting;\n    if (!selecting) {\n      rangeState.value.endDate = null;\n    }\n  };\n  var onReset = function onReset(parsedValue) {\n    if (isArray(parsedValue) && parsedValue.length === 2) {\n      var _parsedValue = _slicedToArray(parsedValue, 2),\n        start = _parsedValue[0],\n        end = _parsedValue[1];\n      minDate.value = start;\n      leftDate.value = start;\n      maxDate.value = end;\n      onParsedValueChanged(unref(minDate), unref(maxDate));\n    } else {\n      restoreDefault();\n    }\n  };\n  var restoreDefault = function restoreDefault() {\n    var _getDefaultValue = getDefaultValue(unref(defaultValue), {\n        lang: unref(lang),\n        unit: unit,\n        unlinkPanels: props.unlinkPanels\n      }),\n      _getDefaultValue2 = _slicedToArray(_getDefaultValue, 2),\n      start = _getDefaultValue2[0],\n      end = _getDefaultValue2[1];\n    minDate.value = void 0;\n    maxDate.value = void 0;\n    leftDate.value = start;\n    rightDate.value = end;\n  };\n  watch(defaultValue, function (val) {\n    if (val) {\n      restoreDefault();\n    }\n  }, {\n    immediate: true\n  });\n  watch(function () {\n    return props.parsedValue;\n  }, onReset, {\n    immediate: true\n  });\n  return {\n    minDate: minDate,\n    maxDate: maxDate,\n    rangeState: rangeState,\n    lang: lang,\n    ppNs: pickerNs,\n    drpNs: drpNs,\n    handleChangeRange: handleChangeRange,\n    handleRangeConfirm: handleRangeConfirm,\n    handleShortcutClick: handleShortcutClick,\n    onSelect: onSelect,\n    onReset: onReset,\n    t: t\n  };\n};\nexport { useRangePicker };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}