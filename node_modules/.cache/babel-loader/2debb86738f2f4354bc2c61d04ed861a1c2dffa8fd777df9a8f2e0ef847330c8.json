{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport { onMounted, watchEffect, onBeforeUnmount } from 'vue';\nimport { addUnit } from '../../utils/dom/style.mjs';\nvar useDraggable = function useDraggable(targetRef, dragRef, draggable, overflow) {\n  var transform = {\n    offsetX: 0,\n    offsetY: 0\n  };\n  var onMousedown = function onMousedown(e) {\n    var downX = e.clientX;\n    var downY = e.clientY;\n    var _transform = transform,\n      offsetX = _transform.offsetX,\n      offsetY = _transform.offsetY;\n    var targetRect = targetRef.value.getBoundingClientRect();\n    var targetLeft = targetRect.left;\n    var targetTop = targetRect.top;\n    var targetWidth = targetRect.width;\n    var targetHeight = targetRect.height;\n    var clientWidth = document.documentElement.clientWidth;\n    var clientHeight = document.documentElement.clientHeight;\n    var minLeft = -targetLeft + offsetX;\n    var minTop = -targetTop + offsetY;\n    var maxLeft = clientWidth - targetLeft - targetWidth + offsetX;\n    var maxTop = clientHeight - targetTop - targetHeight + offsetY;\n    var onMousemove = function onMousemove(e2) {\n      var moveX = offsetX + e2.clientX - downX;\n      var moveY = offsetY + e2.clientY - downY;\n      if (!(overflow == null ? void 0 : overflow.value)) {\n        moveX = Math.min(Math.max(moveX, minLeft), maxLeft);\n        moveY = Math.min(Math.max(moveY, minTop), maxTop);\n      }\n      transform = {\n        offsetX: moveX,\n        offsetY: moveY\n      };\n      if (targetRef.value) {\n        targetRef.value.style.transform = \"translate(\".concat(addUnit(moveX), \", \").concat(addUnit(moveY), \")\");\n      }\n    };\n    var _onMouseup = function onMouseup() {\n      document.removeEventListener(\"mousemove\", onMousemove);\n      document.removeEventListener(\"mouseup\", _onMouseup);\n    };\n    document.addEventListener(\"mousemove\", onMousemove);\n    document.addEventListener(\"mouseup\", _onMouseup);\n  };\n  var onDraggable = function onDraggable() {\n    if (dragRef.value && targetRef.value) {\n      dragRef.value.addEventListener(\"mousedown\", onMousedown);\n    }\n  };\n  var offDraggable = function offDraggable() {\n    if (dragRef.value && targetRef.value) {\n      dragRef.value.removeEventListener(\"mousedown\", onMousedown);\n    }\n  };\n  var resetPosition = function resetPosition() {\n    transform = {\n      offsetX: 0,\n      offsetY: 0\n    };\n    if (targetRef.value) {\n      targetRef.value.style.transform = \"none\";\n    }\n  };\n  onMounted(function () {\n    watchEffect(function () {\n      if (draggable.value) {\n        onDraggable();\n      } else {\n        offDraggable();\n      }\n    });\n  });\n  onBeforeUnmount(function () {\n    offDraggable();\n  });\n  return {\n    resetPosition: resetPosition\n  };\n};\nexport { useDraggable };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}