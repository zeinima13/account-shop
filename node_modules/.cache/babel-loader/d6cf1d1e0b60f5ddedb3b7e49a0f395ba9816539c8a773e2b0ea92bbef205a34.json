{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { ref, computed } from 'vue';\nimport { isFunction } from '@vue/shared';\nfunction useFilter(props, tree) {\n  var hiddenNodeKeySet = ref(/* @__PURE__ */new Set([]));\n  var hiddenExpandIconKeySet = ref(/* @__PURE__ */new Set([]));\n  var filterable = computed(function () {\n    return isFunction(props.filterMethod);\n  });\n  function doFilter(query) {\n    var _a;\n    if (!filterable.value) {\n      return;\n    }\n    var expandKeySet = /* @__PURE__ */new Set();\n    var hiddenExpandIconKeys = hiddenExpandIconKeySet.value;\n    var hiddenKeys = hiddenNodeKeySet.value;\n    var family = [];\n    var nodes = ((_a = tree.value) == null ? void 0 : _a.treeNodes) || [];\n    var filter = props.filterMethod;\n    hiddenKeys.clear();\n    function traverse(nodes2) {\n      nodes2.forEach(function (node) {\n        family.push(node);\n        if (filter == null ? void 0 : filter(query, node.data, node)) {\n          family.forEach(function (member) {\n            expandKeySet.add(member.key);\n          });\n        } else if (node.isLeaf) {\n          hiddenKeys.add(node.key);\n        }\n        var children = node.children;\n        if (children) {\n          traverse(children);\n        }\n        if (!node.isLeaf) {\n          if (!expandKeySet.has(node.key)) {\n            hiddenKeys.add(node.key);\n          } else if (children) {\n            var allHidden = true;\n            var _iterator = _createForOfIteratorHelper(children),\n              _step;\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var childNode = _step.value;\n                if (!hiddenKeys.has(childNode.key)) {\n                  allHidden = false;\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n            if (allHidden) {\n              hiddenExpandIconKeys.add(node.key);\n            } else {\n              hiddenExpandIconKeys[\"delete\"](node.key);\n            }\n          }\n        }\n        family.pop();\n      });\n    }\n    traverse(nodes);\n    return expandKeySet;\n  }\n  function isForceHiddenExpandIcon(node) {\n    return hiddenExpandIconKeySet.value.has(node.key);\n  }\n  return {\n    hiddenExpandIconKeySet: hiddenExpandIconKeySet,\n    hiddenNodeKeySet: hiddenNodeKeySet,\n    doFilter: doFilter,\n    isForceHiddenExpandIcon: isForceHiddenExpandIcon\n  };\n}\nexport { useFilter };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}