{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { dropdownProps } from '../../dropdown/src/dropdown.mjs';\nimport { buildProps } from '../../../utils/vue/props/runtime.mjs';\nimport { useTooltipTriggerProps } from '../../tooltip/src/trigger.mjs';\nimport { useTooltipContentProps } from '../../tooltip/src/content.mjs';\nimport { isBoolean } from '../../../utils/types.mjs';\nvar popoverProps = buildProps({\n  trigger: useTooltipTriggerProps.trigger,\n  placement: dropdownProps.placement,\n  disabled: useTooltipTriggerProps.disabled,\n  visible: useTooltipContentProps.visible,\n  transition: useTooltipContentProps.transition,\n  popperOptions: dropdownProps.popperOptions,\n  tabindex: dropdownProps.tabindex,\n  content: useTooltipContentProps.content,\n  popperStyle: useTooltipContentProps.popperStyle,\n  popperClass: useTooltipContentProps.popperClass,\n  enterable: _objectSpread(_objectSpread({}, useTooltipContentProps.enterable), {}, {\n    \"default\": true\n  }),\n  effect: _objectSpread(_objectSpread({}, useTooltipContentProps.effect), {}, {\n    \"default\": \"light\"\n  }),\n  teleported: useTooltipContentProps.teleported,\n  title: String,\n  width: {\n    type: [String, Number],\n    \"default\": 150\n  },\n  offset: {\n    type: Number,\n    \"default\": void 0\n  },\n  showAfter: {\n    type: Number,\n    \"default\": 0\n  },\n  hideAfter: {\n    type: Number,\n    \"default\": 200\n  },\n  autoClose: {\n    type: Number,\n    \"default\": 0\n  },\n  showArrow: {\n    type: Boolean,\n    \"default\": true\n  },\n  persistent: {\n    type: Boolean,\n    \"default\": true\n  },\n  \"onUpdate:visible\": {\n    type: Function\n  }\n});\nvar popoverEmits = {\n  \"update:visible\": function updateVisible(value) {\n    return isBoolean(value);\n  },\n  \"before-enter\": function beforeEnter() {\n    return true;\n  },\n  \"before-leave\": function beforeLeave() {\n    return true;\n  },\n  \"after-enter\": function afterEnter() {\n    return true;\n  },\n  \"after-leave\": function afterLeave() {\n    return true;\n  }\n};\nexport { popoverEmits, popoverProps };","map":{"version":3,"names":["popoverProps","buildProps","trigger","useTooltipTriggerProps","placement","dropdownProps","disabled","visible","useTooltipContentProps","transition","popperOptions","tabindex","content","popperStyle","popperClass","enterable","_objectSpread","effect","teleported","title","String","width","type","Number","offset","showAfter","hideAfter","autoClose","showArrow","Boolean","persistent","Function","popoverEmits","updateVisible","value","isBoolean","beforeEnter","beforeLeave","afterEnter","afterLeave"],"sources":["../../../../../../packages/components/popover/src/popover.ts"],"sourcesContent":["import { buildProps, isBoolean } from '@element-plus/utils'\nimport {\n  useTooltipContentProps,\n  useTooltipTriggerProps,\n} from '@element-plus/components/tooltip'\nimport { dropdownProps } from '@element-plus/components/dropdown'\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type Popover from './popover.vue'\n\nexport const popoverProps = buildProps({\n  /**\n   * @description how the popover is triggered\n   */\n  trigger: useTooltipTriggerProps.trigger,\n  /**\n   * @description popover placement\n   */\n  placement: dropdownProps.placement,\n  /**\n   * @description whether Popover is disabled\n   */\n  disabled: useTooltipTriggerProps.disabled,\n  /**\n   * @description whether popover is visible\n   */\n  visible: useTooltipContentProps.visible,\n  /**\n   * @description popover transition animation\n   */\n  transition: useTooltipContentProps.transition,\n  /**\n   * @description parameters for [popper.js](https://popper.js.org/docs/v2/)\n   */\n  popperOptions: dropdownProps.popperOptions,\n  /**\n   * @description [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of Popover\n   */\n  tabindex: dropdownProps.tabindex,\n  /**\n   * @description popover content, can be replaced with a default `slot`\n   */\n  content: useTooltipContentProps.content,\n  /**\n   * @description custom style for popover\n   */\n  popperStyle: useTooltipContentProps.popperStyle,\n  /**\n   * @description custom class name for popover\n   */\n  popperClass: useTooltipContentProps.popperClass,\n  enterable: {\n    ...useTooltipContentProps.enterable,\n    default: true,\n  },\n  /**\n   * @description Tooltip theme, built-in theme: `dark` / `light`\n   */\n  effect: {\n    ...useTooltipContentProps.effect,\n    default: 'light',\n  },\n  /**\n   * @description whether popover dropdown is teleported to the body\n   */\n  teleported: useTooltipContentProps.teleported,\n  /**\n   * @description popover title\n   */\n  title: String,\n  /**\n   * @description popover width\n   */\n  width: {\n    type: [String, Number],\n    default: 150,\n  },\n  /**\n   * @description popover offset\n   */\n  offset: {\n    type: Number,\n    default: undefined,\n  },\n  /**\n   * @description delay of appearance, in millisecond\n   */\n  showAfter: {\n    type: Number,\n    default: 0,\n  },\n  /**\n   * @description delay of disappear, in millisecond\n   */\n  hideAfter: {\n    type: Number,\n    default: 200,\n  },\n  /**\n   * @description timeout in milliseconds to hide tooltip\n   */\n  autoClose: {\n    type: Number,\n    default: 0,\n  },\n  /**\n   * @description whether a tooltip arrow is displayed or not. For more info, please refer to [ElPopper](https://github.com/element-plus/element-plus/tree/dev/packages/components/popper)\n   */\n  showArrow: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description when popover inactive and `persistent` is `false` , popover will be destroyed\n   */\n  persistent: {\n    type: Boolean,\n    default: true,\n  },\n  'onUpdate:visible': {\n    type: Function as PropType<(visible: boolean) => void>,\n  },\n} as const)\nexport type PopoverProps = ExtractPropTypes<typeof popoverProps>\n\nexport const popoverEmits = {\n  'update:visible': (value: boolean) => isBoolean(value),\n  'before-enter': () => true,\n  'before-leave': () => true,\n  'after-enter': () => true,\n  'after-leave': () => true,\n}\nexport type PopoverEmits = typeof popoverEmits\n\nexport type PopoverInstance = InstanceType<typeof Popover>\n"],"mappings":";;;;;;;AAMY,IAACA,YAAY,GAAGC,UAAU,CAAC;EACrCC,OAAO,EAAEC,sBAAsB,CAACD,OAAO;EACvCE,SAAS,EAAEC,aAAa,CAACD,SAAS;EAClCE,QAAQ,EAAEH,sBAAsB,CAACG,QAAQ;EACzCC,OAAO,EAAEC,sBAAsB,CAACD,OAAO;EACvCE,UAAU,EAAED,sBAAsB,CAACC,UAAU;EAC7CC,aAAa,EAAEL,aAAa,CAACK,aAAa;EAC1CC,QAAQ,EAAEN,aAAa,CAACM,QAAQ;EAChCC,OAAO,EAAEJ,sBAAsB,CAACI,OAAO;EACvCC,WAAW,EAAEL,sBAAsB,CAACK,WAAW;EAC/CC,WAAW,EAAEN,sBAAsB,CAACM,WAAW;EAC/CC,SAAS,EAAAC,aAAA,CAAAA,aAAA,KACJR,sBAAsB,CAACO,SAAS;IACnC,WAAS;EAAI,EACd;EACDE,MAAM,EAAAD,aAAA,CAAAA,aAAA,KACDR,sBAAsB,CAACS,MAAM;IAChC,WAAS;EAAO,EACjB;EACDC,UAAU,EAAEV,sBAAsB,CAACU,UAAU;EAC7CC,KAAK,EAAEC,MAAM;EACbC,KAAK,EAAE;IACLC,IAAI,EAAE,CAACF,MAAM,EAAEG,MAAM,CAAC;IACtB,WAAS;EACb,CAAG;EACDC,MAAM,EAAE;IACNF,IAAI,EAAEC,MAAM;IACZ,WAAS,KAAK;EAClB,CAAG;EACDE,SAAS,EAAE;IACTH,IAAI,EAAEC,MAAM;IACZ,WAAS;EACb,CAAG;EACDG,SAAS,EAAE;IACTJ,IAAI,EAAEC,MAAM;IACZ,WAAS;EACb,CAAG;EACDI,SAAS,EAAE;IACTL,IAAI,EAAEC,MAAM;IACZ,WAAS;EACb,CAAG;EACDK,SAAS,EAAE;IACTN,IAAI,EAAEO,OAAO;IACb,WAAS;EACb,CAAG;EACDC,UAAU,EAAE;IACVR,IAAI,EAAEO,OAAO;IACb,WAAS;EACb,CAAG;EACD,kBAAkB,EAAE;IAClBP,IAAI,EAAES;EACV;AACA,CAAC;AACW,IAACC,YAAY,GAAG;EAC1B,gBAAgB,EAAE,SAAlBC,aAAgBA,CAAGC,KAAK;IAAA,OAAKC,SAAS,CAACD,KAAK,CAAC;EAAA;EAC7C,cAAc,EAAE,SAAhBE,WAAcA,CAAA;IAAA,OAAQ,IAAI;EAAA;EAC1B,cAAc,EAAE,SAAhBC,WAAcA,CAAA;IAAA,OAAQ,IAAI;EAAA;EAC1B,aAAa,EAAE,SAAfC,UAAaA,CAAA;IAAA,OAAQ,IAAI;EAAA;EACzB,aAAa,EAAE,SAAfC,UAAaA,CAAA;IAAA,OAAQ,IAAI;EAAA;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}