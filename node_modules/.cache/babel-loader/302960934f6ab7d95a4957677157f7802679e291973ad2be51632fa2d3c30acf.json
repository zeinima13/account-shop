{"ast":null,"code":"import \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport { ref, toRef, getCurrentInstance, shallowRef, computed, unref, watch } from 'vue';\nimport { useColumns } from './composables/use-columns.mjs';\nimport { useScrollbar } from './composables/use-scrollbar.mjs';\nimport { useRow } from './composables/use-row.mjs';\nimport { useData } from './composables/use-data.mjs';\nimport { useStyles } from './composables/use-styles.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isNumber } from '../../../utils/types.mjs';\nimport { isArray } from '@vue/shared';\nfunction useTable(props) {\n  var mainTableRef = ref();\n  var leftTableRef = ref();\n  var rightTableRef = ref();\n  var _useColumns = useColumns(props, toRef(props, \"columns\"), toRef(props, \"fixed\")),\n    columns = _useColumns.columns,\n    columnsStyles = _useColumns.columnsStyles,\n    columnsTotalWidth = _useColumns.columnsTotalWidth,\n    fixedColumnsOnLeft = _useColumns.fixedColumnsOnLeft,\n    fixedColumnsOnRight = _useColumns.fixedColumnsOnRight,\n    hasFixedColumns = _useColumns.hasFixedColumns,\n    mainColumns = _useColumns.mainColumns,\n    onColumnSorted = _useColumns.onColumnSorted;\n  var _useScrollbar = useScrollbar(props, {\n      mainTableRef: mainTableRef,\n      leftTableRef: leftTableRef,\n      rightTableRef: rightTableRef,\n      onMaybeEndReached: onMaybeEndReached\n    }),\n    scrollTo = _useScrollbar.scrollTo,\n    scrollToLeft = _useScrollbar.scrollToLeft,\n    scrollToTop = _useScrollbar.scrollToTop,\n    scrollToRow = _useScrollbar.scrollToRow,\n    onScroll = _useScrollbar.onScroll,\n    onVerticalScroll = _useScrollbar.onVerticalScroll,\n    scrollPos = _useScrollbar.scrollPos;\n  var ns = useNamespace(\"table-v2\");\n  var instance = getCurrentInstance();\n  var isScrolling = shallowRef(false);\n  var _useRow = useRow(props, {\n      mainTableRef: mainTableRef,\n      leftTableRef: leftTableRef,\n      rightTableRef: rightTableRef,\n      tableInstance: instance,\n      ns: ns,\n      isScrolling: isScrolling\n    }),\n    expandedRowKeys = _useRow.expandedRowKeys,\n    lastRenderedRowIndex = _useRow.lastRenderedRowIndex,\n    isDynamic = _useRow.isDynamic,\n    isResetting = _useRow.isResetting,\n    rowHeights = _useRow.rowHeights,\n    resetAfterIndex = _useRow.resetAfterIndex,\n    onRowExpanded = _useRow.onRowExpanded,\n    onRowHeightChange = _useRow.onRowHeightChange,\n    onRowHovered = _useRow.onRowHovered,\n    onRowsRendered = _useRow.onRowsRendered;\n  var _useData = useData(props, {\n      expandedRowKeys: expandedRowKeys,\n      lastRenderedRowIndex: lastRenderedRowIndex,\n      resetAfterIndex: resetAfterIndex\n    }),\n    data = _useData.data,\n    depthMap = _useData.depthMap;\n  var rowsHeight = computed(function () {\n    var estimatedRowHeight = props.estimatedRowHeight,\n      rowHeight = props.rowHeight;\n    var _data = unref(data);\n    if (isNumber(estimatedRowHeight)) {\n      return Object.values(unref(rowHeights)).reduce(function (acc, curr) {\n        return acc + curr;\n      }, 0);\n    }\n    return _data.length * rowHeight;\n  });\n  var _useStyles = useStyles(props, {\n      columnsTotalWidth: columnsTotalWidth,\n      fixedColumnsOnLeft: fixedColumnsOnLeft,\n      fixedColumnsOnRight: fixedColumnsOnRight,\n      rowsHeight: rowsHeight\n    }),\n    bodyWidth = _useStyles.bodyWidth,\n    fixedTableHeight = _useStyles.fixedTableHeight,\n    mainTableHeight = _useStyles.mainTableHeight,\n    leftTableWidth = _useStyles.leftTableWidth,\n    rightTableWidth = _useStyles.rightTableWidth,\n    headerWidth = _useStyles.headerWidth,\n    windowHeight = _useStyles.windowHeight,\n    footerHeight = _useStyles.footerHeight,\n    emptyStyle = _useStyles.emptyStyle,\n    rootStyle = _useStyles.rootStyle,\n    headerHeight = _useStyles.headerHeight;\n  var containerRef = ref();\n  var showEmpty = computed(function () {\n    var noData = unref(data).length === 0;\n    return isArray(props.fixedData) ? props.fixedData.length === 0 && noData : noData;\n  });\n  function getRowHeight(rowIndex) {\n    var estimatedRowHeight = props.estimatedRowHeight,\n      rowHeight = props.rowHeight,\n      rowKey = props.rowKey;\n    if (!estimatedRowHeight) return rowHeight;\n    return unref(rowHeights)[unref(data)[rowIndex][rowKey]] || estimatedRowHeight;\n  }\n  function onMaybeEndReached() {\n    var onEndReached = props.onEndReached;\n    if (!onEndReached) return;\n    var _unref = unref(scrollPos),\n      scrollTop = _unref.scrollTop;\n    var _totalHeight = unref(rowsHeight);\n    var clientHeight = unref(windowHeight);\n    var heightUntilEnd = _totalHeight - (scrollTop + clientHeight) + props.hScrollbarSize;\n    if (unref(lastRenderedRowIndex) >= 0 && _totalHeight === scrollTop + unref(mainTableHeight) - unref(headerHeight)) {\n      onEndReached(heightUntilEnd);\n    }\n  }\n  watch(function () {\n    return props.expandedRowKeys;\n  }, function (val) {\n    return expandedRowKeys.value = val;\n  }, {\n    deep: true\n  });\n  return {\n    columns: columns,\n    containerRef: containerRef,\n    mainTableRef: mainTableRef,\n    leftTableRef: leftTableRef,\n    rightTableRef: rightTableRef,\n    isDynamic: isDynamic,\n    isResetting: isResetting,\n    isScrolling: isScrolling,\n    hasFixedColumns: hasFixedColumns,\n    columnsStyles: columnsStyles,\n    columnsTotalWidth: columnsTotalWidth,\n    data: data,\n    expandedRowKeys: expandedRowKeys,\n    depthMap: depthMap,\n    fixedColumnsOnLeft: fixedColumnsOnLeft,\n    fixedColumnsOnRight: fixedColumnsOnRight,\n    mainColumns: mainColumns,\n    bodyWidth: bodyWidth,\n    emptyStyle: emptyStyle,\n    rootStyle: rootStyle,\n    headerWidth: headerWidth,\n    footerHeight: footerHeight,\n    mainTableHeight: mainTableHeight,\n    fixedTableHeight: fixedTableHeight,\n    leftTableWidth: leftTableWidth,\n    rightTableWidth: rightTableWidth,\n    showEmpty: showEmpty,\n    getRowHeight: getRowHeight,\n    onColumnSorted: onColumnSorted,\n    onRowHovered: onRowHovered,\n    onRowExpanded: onRowExpanded,\n    onRowsRendered: onRowsRendered,\n    onRowHeightChange: onRowHeightChange,\n    scrollTo: scrollTo,\n    scrollToLeft: scrollToLeft,\n    scrollToTop: scrollToTop,\n    scrollToRow: scrollToRow,\n    onScroll: onScroll,\n    onVerticalScroll: onVerticalScroll\n  };\n}\nexport { useTable };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}