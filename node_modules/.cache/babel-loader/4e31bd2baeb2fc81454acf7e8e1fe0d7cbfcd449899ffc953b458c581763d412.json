{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { defineComponent, ref, computed, provide, reactive, watch, onBeforeUpdate, onMounted, nextTick, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, withCtx, renderSlot } from 'vue';\nimport { isEqual, flattenDeep, cloneDeep } from 'lodash-unified';\nimport ElCascaderMenu from './menu.mjs';\nimport Store from './store.mjs';\nimport Node from './node.mjs';\nimport { CommonProps, useCascaderConfig } from './config.mjs';\nimport { sortByOriginalOrder, checkNode, getMenuIndex } from './utils.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { unique, castArray } from '../../../utils/arrays.mjs';\nimport { scrollIntoView } from '../../../utils/dom/scroll.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isEmpty } from '../../../utils/types.mjs';\nimport { isClient } from '@vueuse/core';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nvar _sfc_main = defineComponent({\n  name: \"ElCascaderPanel\",\n  components: {\n    ElCascaderMenu: ElCascaderMenu\n  },\n  props: _objectSpread(_objectSpread({}, CommonProps), {}, {\n    border: {\n      type: Boolean,\n      \"default\": true\n    },\n    renderLabel: Function\n  }),\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, \"close\", \"expand-change\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n      slots = _ref.slots;\n    var manualChecked = false;\n    var ns = useNamespace(\"cascader\");\n    var config = useCascaderConfig(props);\n    var store = null;\n    var initialLoaded = ref(true);\n    var menuList = ref([]);\n    var checkedValue = ref(null);\n    var menus = ref([]);\n    var expandingNode = ref(null);\n    var checkedNodes = ref([]);\n    var isHoverMenu = computed(function () {\n      return config.value.expandTrigger === \"hover\";\n    });\n    var renderLabelFn = computed(function () {\n      return props.renderLabel || slots[\"default\"];\n    });\n    var initStore = function initStore() {\n      var options = props.options;\n      var cfg = config.value;\n      manualChecked = false;\n      store = new Store(options, cfg);\n      menus.value = [store.getNodes()];\n      if (cfg.lazy && isEmpty(props.options)) {\n        initialLoaded.value = false;\n        lazyLoad(void 0, function (list) {\n          if (list) {\n            store = new Store(list, cfg);\n            menus.value = [store.getNodes()];\n          }\n          initialLoaded.value = true;\n          _syncCheckedValue(false, true);\n        });\n      } else {\n        _syncCheckedValue(false, true);\n      }\n    };\n    var lazyLoad = function lazyLoad(node, cb) {\n      var cfg = config.value;\n      node = node || new Node({}, cfg, void 0, true);\n      node.loading = true;\n      var resolve = function resolve(dataList) {\n        var _node = node;\n        var parent = _node.root ? null : _node;\n        dataList && (store == null ? void 0 : store.appendNodes(dataList, parent));\n        _node.loading = false;\n        _node.loaded = true;\n        _node.childrenData = _node.childrenData || [];\n        cb && cb(dataList);\n      };\n      cfg.lazyLoad(node, resolve);\n    };\n    var expandNode = function expandNode(node, silent) {\n      var _a;\n      var level = node.level;\n      var newMenus = menus.value.slice(0, level);\n      var newExpandingNode;\n      if (node.isLeaf) {\n        newExpandingNode = node.pathNodes[level - 2];\n      } else {\n        newExpandingNode = node;\n        newMenus.push(node.children);\n      }\n      if (((_a = expandingNode.value) == null ? void 0 : _a.uid) !== (newExpandingNode == null ? void 0 : newExpandingNode.uid)) {\n        expandingNode.value = node;\n        menus.value = newMenus;\n        !silent && emit(\"expand-change\", (node == null ? void 0 : node.pathValues) || []);\n      }\n    };\n    var handleCheckChange = function handleCheckChange(node, checked) {\n      var emitClose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var _config$value = config.value,\n        checkStrictly = _config$value.checkStrictly,\n        multiple = _config$value.multiple;\n      var oldNode = checkedNodes.value[0];\n      manualChecked = true;\n      !multiple && (oldNode == null ? void 0 : oldNode.doCheck(false));\n      node.doCheck(checked);\n      calculateCheckedValue();\n      emitClose && !multiple && !checkStrictly && emit(\"close\");\n      !emitClose && !multiple && !checkStrictly && _expandParentNode(node);\n    };\n    var _expandParentNode = function expandParentNode(node) {\n      if (!node) return;\n      node = node.parent;\n      _expandParentNode(node);\n      node && expandNode(node);\n    };\n    var getFlattedNodes = function getFlattedNodes(leafOnly) {\n      return store == null ? void 0 : store.getFlattedNodes(leafOnly);\n    };\n    var getCheckedNodes = function getCheckedNodes(leafOnly) {\n      var _a;\n      return (_a = getFlattedNodes(leafOnly)) == null ? void 0 : _a.filter(function (node) {\n        return node.checked !== false;\n      });\n    };\n    var clearCheckedNodes = function clearCheckedNodes() {\n      checkedNodes.value.forEach(function (node) {\n        return node.doCheck(false);\n      });\n      calculateCheckedValue();\n      menus.value = menus.value.slice(0, 1);\n      expandingNode.value = null;\n      emit(\"expand-change\", []);\n    };\n    var calculateCheckedValue = function calculateCheckedValue() {\n      var _a;\n      var _config$value2 = config.value,\n        checkStrictly = _config$value2.checkStrictly,\n        multiple = _config$value2.multiple;\n      var oldNodes = checkedNodes.value;\n      var newNodes = getCheckedNodes(!checkStrictly);\n      var nodes = sortByOriginalOrder(oldNodes, newNodes);\n      var values = nodes.map(function (node) {\n        return node.valueByOption;\n      });\n      checkedNodes.value = nodes;\n      checkedValue.value = multiple ? values : (_a = values[0]) != null ? _a : null;\n    };\n    var _syncCheckedValue = function syncCheckedValue() {\n      var loaded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var forced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var modelValue = props.modelValue;\n      var _config$value3 = config.value,\n        lazy = _config$value3.lazy,\n        multiple = _config$value3.multiple,\n        checkStrictly = _config$value3.checkStrictly;\n      var leafOnly = !checkStrictly;\n      if (!initialLoaded.value || manualChecked || !forced && isEqual(modelValue, checkedValue.value)) return;\n      if (lazy && !loaded) {\n        var values = unique(flattenDeep(castArray(modelValue)));\n        var nodes = values.map(function (val) {\n          return store == null ? void 0 : store.getNodeByValue(val);\n        }).filter(function (node) {\n          return !!node && !node.loaded && !node.loading;\n        });\n        if (nodes.length) {\n          nodes.forEach(function (node) {\n            lazyLoad(node, function () {\n              return _syncCheckedValue(false, forced);\n            });\n          });\n        } else {\n          _syncCheckedValue(true, forced);\n        }\n      } else {\n        var _values = multiple ? castArray(modelValue) : [modelValue];\n        var _nodes = unique(_values.map(function (val) {\n          return store == null ? void 0 : store.getNodeByValue(val, leafOnly);\n        }));\n        syncMenuState(_nodes, forced);\n        checkedValue.value = cloneDeep(modelValue);\n      }\n    };\n    var syncMenuState = function syncMenuState(newCheckedNodes) {\n      var reserveExpandingState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var checkStrictly = config.value.checkStrictly;\n      var oldNodes = checkedNodes.value;\n      var newNodes = newCheckedNodes.filter(function (node) {\n        return !!node && (checkStrictly || node.isLeaf);\n      });\n      var oldExpandingNode = store == null ? void 0 : store.getSameNode(expandingNode.value);\n      var newExpandingNode = reserveExpandingState && oldExpandingNode || newNodes[0];\n      if (newExpandingNode) {\n        newExpandingNode.pathNodes.forEach(function (node) {\n          return expandNode(node, true);\n        });\n      } else {\n        expandingNode.value = null;\n      }\n      oldNodes.forEach(function (node) {\n        return node.doCheck(false);\n      });\n      reactive(newNodes).forEach(function (node) {\n        return node.doCheck(true);\n      });\n      checkedNodes.value = newNodes;\n      nextTick(scrollToExpandingNode);\n    };\n    var scrollToExpandingNode = function scrollToExpandingNode() {\n      if (!isClient) return;\n      menuList.value.forEach(function (menu) {\n        var menuElement = menu == null ? void 0 : menu.$el;\n        if (menuElement) {\n          var container = menuElement.querySelector(\".\".concat(ns.namespace.value, \"-scrollbar__wrap\"));\n          var activeNode = menuElement.querySelector(\".\".concat(ns.b(\"node\"), \".\").concat(ns.is(\"active\"))) || menuElement.querySelector(\".\".concat(ns.b(\"node\"), \".in-active-path\"));\n          scrollIntoView(container, activeNode);\n        }\n      });\n    };\n    var handleKeyDown = function handleKeyDown(e) {\n      var target = e.target;\n      var code = e.code;\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            e.preventDefault();\n            var distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, \".\".concat(ns.b(\"node\"), \"[tabindex=\\\"-1\\\"]\")));\n            break;\n          }\n        case EVENT_CODE.left:\n          {\n            e.preventDefault();\n            var preMenu = menuList.value[getMenuIndex(target) - 1];\n            var expandedNode = preMenu == null ? void 0 : preMenu.$el.querySelector(\".\".concat(ns.b(\"node\"), \"[aria-expanded=\\\"true\\\"]\"));\n            focusNode(expandedNode);\n            break;\n          }\n        case EVENT_CODE.right:\n          {\n            e.preventDefault();\n            var nextMenu = menuList.value[getMenuIndex(target) + 1];\n            var firstNode = nextMenu == null ? void 0 : nextMenu.$el.querySelector(\".\".concat(ns.b(\"node\"), \"[tabindex=\\\"-1\\\"]\"));\n            focusNode(firstNode);\n            break;\n          }\n        case EVENT_CODE.enter:\n        case EVENT_CODE.numpadEnter:\n          checkNode(target);\n          break;\n      }\n    };\n    provide(CASCADER_PANEL_INJECTION_KEY, reactive({\n      config: config,\n      expandingNode: expandingNode,\n      checkedNodes: checkedNodes,\n      isHoverMenu: isHoverMenu,\n      initialLoaded: initialLoaded,\n      renderLabelFn: renderLabelFn,\n      lazyLoad: lazyLoad,\n      expandNode: expandNode,\n      handleCheckChange: handleCheckChange\n    }));\n    watch([config, function () {\n      return props.options;\n    }], initStore, {\n      deep: true,\n      immediate: true\n    });\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      manualChecked = false;\n      _syncCheckedValue();\n    }, {\n      deep: true\n    });\n    watch(function () {\n      return checkedValue.value;\n    }, function (val) {\n      if (!isEqual(val, props.modelValue)) {\n        emit(UPDATE_MODEL_EVENT, val);\n        emit(CHANGE_EVENT, val);\n      }\n    });\n    onBeforeUpdate(function () {\n      return menuList.value = [];\n    });\n    onMounted(function () {\n      return !isEmpty(props.modelValue) && _syncCheckedValue();\n    });\n    return {\n      ns: ns,\n      menuList: menuList,\n      menus: menus,\n      checkedNodes: checkedNodes,\n      handleKeyDown: handleKeyDown,\n      handleCheckChange: handleCheckChange,\n      getFlattedNodes: getFlattedNodes,\n      getCheckedNodes: getCheckedNodes,\n      clearCheckedNodes: clearCheckedNodes,\n      calculateCheckedValue: calculateCheckedValue,\n      scrollToExpandingNode: scrollToExpandingNode\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_cascader_menu = resolveComponent(\"el-cascader-menu\");\n  return openBlock(), createElementBlock(\"div\", {\n    \"class\": normalizeClass([_ctx.ns.b(\"panel\"), _ctx.ns.is(\"bordered\", _ctx.border)]),\n    onKeydown: _ctx.handleKeyDown\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.menus, function (menu, index) {\n    return openBlock(), createBlock(_component_el_cascader_menu, {\n      key: index,\n      ref_for: true,\n      ref: function ref(item) {\n        return _ctx.menuList[index] = item;\n      },\n      index: index,\n      nodes: _toConsumableArray(menu)\n    }, {\n      empty: withCtx(function () {\n        return [renderSlot(_ctx.$slots, \"empty\")];\n      }),\n      _: 2\n    }, 1032, [\"index\", \"nodes\"]);\n  }), 128))], 42, [\"onKeydown\"]);\n}\nvar CascaderPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"index.vue\"]]);\nexport { CascaderPanel as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}