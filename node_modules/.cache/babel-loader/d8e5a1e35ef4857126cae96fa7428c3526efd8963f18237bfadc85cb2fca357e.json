{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.parse-float.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { defineComponent, useAttrs, ref, computed, watch, nextTick, onMounted, openBlock, createBlock, unref, withCtx, withDirectives, createElementBlock, normalizeClass, normalizeStyle, createVNode, withModifiers, Fragment, renderList, toDisplayString, createElementVNode, withKeys, vModelText, createCommentVNode, isRef, renderSlot, vShow } from 'vue';\nimport { cloneDeep, debounce } from 'lodash-unified';\nimport { useCssVar, useResizeObserver, isClient } from '@vueuse/core';\nimport { ElCascaderPanel } from '../../cascader-panel/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { CircleClose, ArrowDown, Check } from '@element-plus/icons-vue';\nimport { cascaderProps, cascaderEmits } from './cascader.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useFormItem } from '../../form/src/hooks/use-form-item.mjs';\nimport { useEmptyValues } from '../../../hooks/use-empty-values/index.mjs';\nimport { useComposition } from '../../../hooks/use-composition/index.mjs';\nimport { useFormSize } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isPromise } from '@vue/shared';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\nvar COMPONENT_NAME = \"ElCascader\";\nvar __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: cascaderProps,\n  emits: cascaderEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var popperOptions = {\n      modifiers: [{\n        name: \"arrowPosition\",\n        enabled: true,\n        phase: \"main\",\n        fn: function fn(_ref2) {\n          var state = _ref2.state;\n          var modifiersData = state.modifiersData,\n            placement = state.placement;\n          if ([\"right\", \"left\", \"bottom\", \"top\"].includes(placement)) return;\n          modifiersData.arrow.x = 35;\n        },\n        requires: [\"arrow\"]\n      }]\n    };\n    var attrs = useAttrs();\n    var inputInitialHeight = 0;\n    var pressDeleteCount = 0;\n    var nsCascader = useNamespace(\"cascader\");\n    var nsInput = useNamespace(\"input\");\n    var _useLocale = useLocale(),\n      t = _useLocale.t;\n    var _useFormItem = useFormItem(),\n      form = _useFormItem.form,\n      formItem = _useFormItem.formItem;\n    var _useEmptyValues = useEmptyValues(props),\n      valueOnClear = _useEmptyValues.valueOnClear;\n    var _useComposition = useComposition({\n        afterComposition: function afterComposition(event) {\n          var _a;\n          var text = (_a = event.target) == null ? void 0 : _a.value;\n          handleInput(text);\n        }\n      }),\n      isComposing = _useComposition.isComposing,\n      handleComposition = _useComposition.handleComposition;\n    var tooltipRef = ref(null);\n    var input = ref(null);\n    var tagWrapper = ref(null);\n    var cascaderPanelRef = ref(null);\n    var suggestionPanel = ref(null);\n    var popperVisible = ref(false);\n    var inputHover = ref(false);\n    var filtering = ref(false);\n    var filterFocus = ref(false);\n    var inputValue = ref(\"\");\n    var searchInputValue = ref(\"\");\n    var presentTags = ref([]);\n    var allPresentTags = ref([]);\n    var suggestions = ref([]);\n    var cascaderStyle = computed(function () {\n      return attrs.style;\n    });\n    var isDisabled = computed(function () {\n      return props.disabled || (form == null ? void 0 : form.disabled);\n    });\n    var inputPlaceholder = computed(function () {\n      return props.placeholder || t(\"el.cascader.placeholder\");\n    });\n    var currentPlaceholder = computed(function () {\n      return searchInputValue.value || presentTags.value.length > 0 || isComposing.value ? \"\" : inputPlaceholder.value;\n    });\n    var realSize = useFormSize();\n    var tagSize = computed(function () {\n      return realSize.value === \"small\" ? \"small\" : \"default\";\n    });\n    var multiple = computed(function () {\n      return !!props.props.multiple;\n    });\n    var readonly = computed(function () {\n      return !props.filterable || multiple.value;\n    });\n    var searchKeyword = computed(function () {\n      return multiple.value ? searchInputValue.value : inputValue.value;\n    });\n    var checkedNodes = computed(function () {\n      var _a;\n      return ((_a = cascaderPanelRef.value) == null ? void 0 : _a.checkedNodes) || [];\n    });\n    var clearBtnVisible = computed(function () {\n      if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value) return false;\n      return !!checkedNodes.value.length;\n    });\n    var presentText = computed(function () {\n      var showAllLevels = props.showAllLevels,\n        separator = props.separator;\n      var nodes = checkedNodes.value;\n      return nodes.length ? multiple.value ? \"\" : nodes[0].calcText(showAllLevels, separator) : \"\";\n    });\n    var validateState = computed(function () {\n      return (formItem == null ? void 0 : formItem.validateState) || \"\";\n    });\n    var checkedValue = computed({\n      get: function get() {\n        return cloneDeep(props.modelValue);\n      },\n      set: function set(val) {\n        var value = val != null ? val : valueOnClear.value;\n        emit(UPDATE_MODEL_EVENT, value);\n        emit(CHANGE_EVENT, value);\n        if (props.validateEvent) {\n          formItem == null ? void 0 : formItem.validate(\"change\")[\"catch\"](function (err) {\n            return debugWarn(err);\n          });\n        }\n      }\n    });\n    var cascaderKls = computed(function () {\n      return [nsCascader.b(), nsCascader.m(realSize.value), nsCascader.is(\"disabled\", isDisabled.value), attrs[\"class\"]];\n    });\n    var cascaderIconKls = computed(function () {\n      return [nsInput.e(\"icon\"), \"icon-arrow-down\", nsCascader.is(\"reverse\", popperVisible.value)];\n    });\n    var inputClass = computed(function () {\n      return nsCascader.is(\"focus\", popperVisible.value || filterFocus.value);\n    });\n    var contentRef = computed(function () {\n      var _a, _b;\n      return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    var togglePopperVisible = function togglePopperVisible(visible) {\n      var _a, _b, _c;\n      if (isDisabled.value) return;\n      visible = visible != null ? visible : !popperVisible.value;\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible;\n        (_b = (_a = input.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute(\"aria-expanded\", \"\".concat(visible));\n        if (visible) {\n          updatePopperPosition();\n          nextTick((_c = cascaderPanelRef.value) == null ? void 0 : _c.scrollToExpandingNode);\n        } else if (props.filterable) {\n          syncPresentTextValue();\n        }\n        emit(\"visibleChange\", visible);\n      }\n    };\n    var updatePopperPosition = function updatePopperPosition() {\n      nextTick(function () {\n        var _a;\n        (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper();\n      });\n    };\n    var hideSuggestionPanel = function hideSuggestionPanel() {\n      filtering.value = false;\n    };\n    var genTag = function genTag(node) {\n      var showAllLevels = props.showAllLevels,\n        separator = props.separator;\n      return {\n        node: node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled,\n        isCollapseTag: false\n      };\n    };\n    var deleteTag = function deleteTag(tag) {\n      var _a;\n      var node = tag.node;\n      node.doCheck(false);\n      (_a = cascaderPanelRef.value) == null ? void 0 : _a.calculateCheckedValue();\n      emit(\"removeTag\", node.valueByOption);\n    };\n    var calculatePresentTags = function calculatePresentTags() {\n      if (!multiple.value) return;\n      var nodes = checkedNodes.value;\n      var tags = [];\n      var allTags = [];\n      nodes.forEach(function (node) {\n        return allTags.push(genTag(node));\n      });\n      allPresentTags.value = allTags;\n      if (nodes.length) {\n        nodes.slice(0, props.maxCollapseTags).forEach(function (node) {\n          return tags.push(genTag(node));\n        });\n        var rest = nodes.slice(props.maxCollapseTags);\n        var restCount = rest.length;\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: \"+ \".concat(restCount),\n              closable: false,\n              isCollapseTag: true\n            });\n          } else {\n            rest.forEach(function (node) {\n              return tags.push(genTag(node));\n            });\n          }\n        }\n      }\n      presentTags.value = tags;\n    };\n    var calculateSuggestions = function calculateSuggestions() {\n      var _a, _b;\n      var filterMethod = props.filterMethod,\n        showAllLevels = props.showAllLevels,\n        separator = props.separator;\n      var res = (_b = (_a = cascaderPanelRef.value) == null ? void 0 : _a.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter(function (node) {\n        if (node.isDisabled) return false;\n        node.calcText(showAllLevels, separator);\n        return filterMethod(node, searchKeyword.value);\n      });\n      if (multiple.value) {\n        presentTags.value.forEach(function (tag) {\n          tag.hitState = false;\n        });\n        allPresentTags.value.forEach(function (tag) {\n          tag.hitState = false;\n        });\n      }\n      filtering.value = true;\n      suggestions.value = res;\n      updatePopperPosition();\n    };\n    var focusFirstNode = function focusFirstNode() {\n      var _a;\n      var firstNode;\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(\".\".concat(nsCascader.e(\"suggestion-item\")));\n      } else {\n        firstNode = (_a = cascaderPanelRef.value) == null ? void 0 : _a.$el.querySelector(\".\".concat(nsCascader.b(\"node\"), \"[tabindex=\\\"-1\\\"]\"));\n      }\n      if (firstNode) {\n        firstNode.focus();\n        !filtering.value && firstNode.click();\n      }\n    };\n    var updateStyle = function updateStyle() {\n      var _a, _b;\n      var inputInner = (_a = input.value) == null ? void 0 : _a.input;\n      var tagWrapperEl = tagWrapper.value;\n      var suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;\n      if (!isClient || !inputInner) return;\n      if (suggestionPanelEl) {\n        var suggestionList = suggestionPanelEl.querySelector(\".\".concat(nsCascader.e(\"suggestion-list\")));\n        suggestionList.style.minWidth = \"\".concat(inputInner.offsetWidth, \"px\");\n      }\n      if (tagWrapperEl) {\n        var offsetHeight = tagWrapperEl.offsetHeight;\n        var height = presentTags.value.length > 0 ? \"\".concat(Math.max(offsetHeight, inputInitialHeight) - 2, \"px\") : \"\".concat(inputInitialHeight, \"px\");\n        inputInner.style.height = height;\n        updatePopperPosition();\n      }\n    };\n    var getCheckedNodes = function getCheckedNodes(leafOnly) {\n      var _a;\n      return (_a = cascaderPanelRef.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);\n    };\n    var handleExpandChange = function handleExpandChange(value) {\n      updatePopperPosition();\n      emit(\"expandChange\", value);\n    };\n    var handleKeyDown = function handleKeyDown(e) {\n      if (isComposing.value) return;\n      switch (e.code) {\n        case EVENT_CODE.enter:\n        case EVENT_CODE.numpadEnter:\n          togglePopperVisible();\n          break;\n        case EVENT_CODE.down:\n          togglePopperVisible(true);\n          nextTick(focusFirstNode);\n          e.preventDefault();\n          break;\n        case EVENT_CODE.esc:\n          if (popperVisible.value === true) {\n            e.preventDefault();\n            e.stopPropagation();\n            togglePopperVisible(false);\n          }\n          break;\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n    var handleClear = function handleClear() {\n      var _a;\n      (_a = cascaderPanelRef.value) == null ? void 0 : _a.clearCheckedNodes();\n      if (!popperVisible.value && props.filterable) {\n        syncPresentTextValue();\n      }\n      togglePopperVisible(false);\n      emit(\"clear\");\n    };\n    var syncPresentTextValue = function syncPresentTextValue() {\n      var value = presentText.value;\n      inputValue.value = value;\n      searchInputValue.value = value;\n    };\n    var handleSuggestionClick = function handleSuggestionClick(node) {\n      var _a, _b;\n      var checked = node.checked;\n      if (multiple.value) {\n        (_a = cascaderPanelRef.value) == null ? void 0 : _a.handleCheckChange(node, !checked, false);\n      } else {\n        !checked && ((_b = cascaderPanelRef.value) == null ? void 0 : _b.handleCheckChange(node, true, false));\n        togglePopperVisible(false);\n      }\n    };\n    var handleSuggestionKeyDown = function handleSuggestionKeyDown(e) {\n      var target = e.target;\n      var code = e.code;\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            var distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, \".\".concat(nsCascader.e(\"suggestion-item\"), \"[tabindex=\\\"-1\\\"]\")));\n            break;\n          }\n        case EVENT_CODE.enter:\n        case EVENT_CODE.numpadEnter:\n          target.click();\n          break;\n      }\n    };\n    var handleDelete = function handleDelete() {\n      var tags = presentTags.value;\n      var lastTag = tags[tags.length - 1];\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;\n      if (!lastTag || !pressDeleteCount || props.collapseTags && tags.length > 1) return;\n      if (lastTag.hitState) {\n        deleteTag(lastTag);\n      } else {\n        lastTag.hitState = true;\n      }\n    };\n    var handleFocus = function handleFocus(e) {\n      var el = e.target;\n      var name = nsCascader.e(\"search-input\");\n      if (el.className === name) {\n        filterFocus.value = true;\n      }\n      emit(\"focus\", e);\n    };\n    var handleBlur = function handleBlur(e) {\n      filterFocus.value = false;\n      emit(\"blur\", e);\n    };\n    var handleFilter = debounce(function () {\n      var value = searchKeyword.value;\n      if (!value) return;\n      var passed = props.beforeFilter(value);\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions)[\"catch\"](function () {});\n      } else if (passed !== false) {\n        calculateSuggestions();\n      } else {\n        hideSuggestionPanel();\n      }\n    }, props.debounce);\n    var handleInput = function handleInput(val, e) {\n      !popperVisible.value && togglePopperVisible(true);\n      if (e == null ? void 0 : e.isComposing) return;\n      val ? handleFilter() : hideSuggestionPanel();\n    };\n    var getInputInnerHeight = function getInputInnerHeight(inputInner) {\n      return Number.parseFloat(useCssVar(nsInput.cssVarName(\"input-height\"), inputInner).value) - 2;\n    };\n    watch(filtering, updatePopperPosition);\n    watch([checkedNodes, isDisabled, function () {\n      return props.collapseTags;\n    }], calculatePresentTags);\n    watch(presentTags, function () {\n      nextTick(function () {\n        return updateStyle();\n      });\n    });\n    watch(realSize, /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var inputInner;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return nextTick();\n          case 2:\n            inputInner = input.value.input;\n            inputInitialHeight = getInputInnerHeight(inputInner) || inputInitialHeight;\n            updateStyle();\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    })));\n    watch(presentText, syncPresentTextValue, {\n      immediate: true\n    });\n    onMounted(function () {\n      var inputInner = input.value.input;\n      var inputInnerHeight = getInputInnerHeight(inputInner);\n      inputInitialHeight = inputInner.offsetHeight || inputInnerHeight;\n      useResizeObserver(inputInner, updateStyle);\n    });\n    expose({\n      getCheckedNodes: getCheckedNodes,\n      cascaderPanelRef: cascaderPanelRef,\n      togglePopperVisible: togglePopperVisible,\n      contentRef: contentRef,\n      presentText: presentText\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"tooltipRef\",\n        ref: tooltipRef,\n        visible: popperVisible.value,\n        teleported: _ctx.teleported,\n        \"popper-class\": [unref(nsCascader).e(\"dropdown\"), _ctx.popperClass],\n        \"popper-options\": popperOptions,\n        \"fallback-placements\": _ctx.fallbackPlacements,\n        \"stop-popper-mouse-event\": false,\n        \"gpu-acceleration\": false,\n        placement: _ctx.placement,\n        transition: \"\".concat(unref(nsCascader).namespace.value, \"-zoom-in-top\"),\n        effect: \"light\",\n        pure: \"\",\n        persistent: _ctx.persistent,\n        onHide: hideSuggestionPanel\n      }, {\n        \"default\": withCtx(function () {\n          return [withDirectives((openBlock(), createElementBlock(\"div\", {\n            \"class\": normalizeClass(unref(cascaderKls)),\n            style: normalizeStyle(unref(cascaderStyle)),\n            onClick: function onClick() {\n              return togglePopperVisible(unref(readonly) ? void 0 : true);\n            },\n            onKeydown: handleKeyDown,\n            onMouseenter: function onMouseenter($event) {\n              return inputHover.value = true;\n            },\n            onMouseleave: function onMouseleave($event) {\n              return inputHover.value = false;\n            }\n          }, [createVNode(unref(ElInput), {\n            ref_key: \"input\",\n            ref: input,\n            modelValue: inputValue.value,\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return inputValue.value = $event;\n            },\n            placeholder: unref(currentPlaceholder),\n            readonly: unref(readonly),\n            disabled: unref(isDisabled),\n            \"validate-event\": false,\n            size: unref(realSize),\n            \"class\": normalizeClass(unref(inputClass)),\n            tabindex: unref(multiple) && _ctx.filterable && !unref(isDisabled) ? -1 : void 0,\n            onCompositionstart: unref(handleComposition),\n            onCompositionupdate: unref(handleComposition),\n            onCompositionend: unref(handleComposition),\n            onFocus: handleFocus,\n            onBlur: handleBlur,\n            onInput: handleInput\n          }, {\n            suffix: withCtx(function () {\n              return [unref(clearBtnVisible) ? (openBlock(), createBlock(unref(ElIcon), {\n                key: \"clear\",\n                \"class\": normalizeClass([unref(nsInput).e(\"icon\"), \"icon-circle-close\"]),\n                onClick: withModifiers(handleClear, [\"stop\"])\n              }, {\n                \"default\": withCtx(function () {\n                  return [createVNode(unref(CircleClose))];\n                }),\n                _: 1\n              }, 8, [\"class\", \"onClick\"])) : (openBlock(), createBlock(unref(ElIcon), {\n                key: \"arrow-down\",\n                \"class\": normalizeClass(unref(cascaderIconKls)),\n                onClick: withModifiers(function ($event) {\n                  return togglePopperVisible();\n                }, [\"stop\"])\n              }, {\n                \"default\": withCtx(function () {\n                  return [createVNode(unref(ArrowDown))];\n                }),\n                _: 1\n              }, 8, [\"class\", \"onClick\"]))];\n            }),\n            _: 1\n          }, 8, [\"modelValue\", \"onUpdate:modelValue\", \"placeholder\", \"readonly\", \"disabled\", \"size\", \"class\", \"tabindex\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\"]), unref(multiple) ? (openBlock(), createElementBlock(\"div\", {\n            key: 0,\n            ref_key: \"tagWrapper\",\n            ref: tagWrapper,\n            \"class\": normalizeClass([unref(nsCascader).e(\"tags\"), unref(nsCascader).is(\"validate\", Boolean(unref(validateState)))])\n          }, [(openBlock(true), createElementBlock(Fragment, null, renderList(presentTags.value, function (tag) {\n            return openBlock(), createBlock(unref(ElTag), {\n              key: tag.key,\n              type: _ctx.tagType,\n              size: unref(tagSize),\n              effect: _ctx.tagEffect,\n              hit: tag.hitState,\n              closable: tag.closable,\n              \"disable-transitions\": \"\",\n              onClose: function onClose($event) {\n                return deleteTag(tag);\n              }\n            }, {\n              \"default\": withCtx(function () {\n                return [tag.isCollapseTag === false ? (openBlock(), createElementBlock(\"span\", {\n                  key: 0\n                }, toDisplayString(tag.text), 1)) : (openBlock(), createBlock(unref(ElTooltip), {\n                  key: 1,\n                  disabled: popperVisible.value || !_ctx.collapseTagsTooltip,\n                  \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n                  placement: \"bottom\",\n                  effect: \"light\"\n                }, {\n                  \"default\": withCtx(function () {\n                    return [createElementVNode(\"span\", null, toDisplayString(tag.text), 1)];\n                  }),\n                  content: withCtx(function () {\n                    return [createElementVNode(\"div\", {\n                      \"class\": normalizeClass(unref(nsCascader).e(\"collapse-tags\"))\n                    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(allPresentTags.value.slice(_ctx.maxCollapseTags), function (tag2, idx) {\n                      return openBlock(), createElementBlock(\"div\", {\n                        key: idx,\n                        \"class\": normalizeClass(unref(nsCascader).e(\"collapse-tag\"))\n                      }, [(openBlock(), createBlock(unref(ElTag), {\n                        key: tag2.key,\n                        \"class\": \"in-tooltip\",\n                        type: _ctx.tagType,\n                        size: unref(tagSize),\n                        effect: _ctx.tagEffect,\n                        hit: tag2.hitState,\n                        closable: tag2.closable,\n                        \"disable-transitions\": \"\",\n                        onClose: function onClose($event) {\n                          return deleteTag(tag2);\n                        }\n                      }, {\n                        \"default\": withCtx(function () {\n                          return [createElementVNode(\"span\", null, toDisplayString(tag2.text), 1)];\n                        }),\n                        _: 2\n                      }, 1032, [\"type\", \"size\", \"effect\", \"hit\", \"closable\", \"onClose\"]))], 2);\n                    }), 128))], 2)];\n                  }),\n                  _: 2\n                }, 1032, [\"disabled\"]))];\n              }),\n              _: 2\n            }, 1032, [\"type\", \"size\", \"effect\", \"hit\", \"closable\", \"onClose\"]);\n          }), 128)), _ctx.filterable && !unref(isDisabled) ? withDirectives((openBlock(), createElementBlock(\"input\", {\n            key: 0,\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return searchInputValue.value = $event;\n            },\n            type: \"text\",\n            \"class\": normalizeClass(unref(nsCascader).e(\"search-input\")),\n            placeholder: unref(presentText) ? \"\" : unref(inputPlaceholder),\n            onInput: function onInput(e) {\n              return handleInput(searchInputValue.value, e);\n            },\n            onClick: withModifiers(function ($event) {\n              return togglePopperVisible(true);\n            }, [\"stop\"]),\n            onKeydown: withKeys(handleDelete, [\"delete\"]),\n            onCompositionstart: unref(handleComposition),\n            onCompositionupdate: unref(handleComposition),\n            onCompositionend: unref(handleComposition),\n            onFocus: handleFocus,\n            onBlur: handleBlur\n          }, null, 42, [\"onUpdate:modelValue\", \"placeholder\", \"onInput\", \"onClick\", \"onKeydown\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\"])), [[vModelText, searchInputValue.value]]) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true)], 46, [\"onClick\", \"onMouseenter\", \"onMouseleave\"])), [[unref(ClickOutside), function () {\n            return togglePopperVisible(false);\n          }, unref(contentRef)]])];\n        }),\n        content: withCtx(function () {\n          return [withDirectives(createVNode(unref(ElCascaderPanel), {\n            ref_key: \"cascaderPanelRef\",\n            ref: cascaderPanelRef,\n            modelValue: unref(checkedValue),\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return isRef(checkedValue) ? checkedValue.value = $event : null;\n            },\n            options: _ctx.options,\n            props: props.props,\n            border: false,\n            \"render-label\": _ctx.$slots[\"default\"],\n            onExpandChange: handleExpandChange,\n            onClose: function onClose($event) {\n              return _ctx.$nextTick(function () {\n                return togglePopperVisible(false);\n              });\n            }\n          }, {\n            empty: withCtx(function () {\n              return [renderSlot(_ctx.$slots, \"empty\")];\n            }),\n            _: 3\n          }, 8, [\"modelValue\", \"onUpdate:modelValue\", \"options\", \"props\", \"render-label\", \"onClose\"]), [[vShow, !filtering.value]]), _ctx.filterable ? withDirectives((openBlock(), createBlock(unref(ElScrollbar), {\n            key: 0,\n            ref_key: \"suggestionPanel\",\n            ref: suggestionPanel,\n            tag: \"ul\",\n            \"class\": normalizeClass(unref(nsCascader).e(\"suggestion-panel\")),\n            \"view-class\": unref(nsCascader).e(\"suggestion-list\"),\n            onKeydown: handleSuggestionKeyDown\n          }, {\n            \"default\": withCtx(function () {\n              return [suggestions.value.length ? (openBlock(true), createElementBlock(Fragment, {\n                key: 0\n              }, renderList(suggestions.value, function (item) {\n                return openBlock(), createElementBlock(\"li\", {\n                  key: item.uid,\n                  \"class\": normalizeClass([unref(nsCascader).e(\"suggestion-item\"), unref(nsCascader).is(\"checked\", item.checked)]),\n                  tabindex: -1,\n                  onClick: function onClick($event) {\n                    return handleSuggestionClick(item);\n                  }\n                }, [createElementVNode(\"span\", null, toDisplayString(item.text), 1), item.checked ? (openBlock(), createBlock(unref(ElIcon), {\n                  key: 0\n                }, {\n                  \"default\": withCtx(function () {\n                    return [createVNode(unref(Check))];\n                  }),\n                  _: 1\n                })) : createCommentVNode(\"v-if\", true)], 10, [\"onClick\"]);\n              }), 128)) : renderSlot(_ctx.$slots, \"empty\", {\n                key: 1\n              }, function () {\n                return [createElementVNode(\"li\", {\n                  \"class\": normalizeClass(unref(nsCascader).e(\"empty-text\"))\n                }, toDisplayString(unref(t)(\"el.cascader.noMatch\")), 3)];\n              })];\n            }),\n            _: 3\n          }, 8, [\"class\", \"view-class\"])), [[vShow, filtering.value]]) : createCommentVNode(\"v-if\", true)];\n        }),\n        _: 3\n      }, 8, [\"visible\", \"teleported\", \"popper-class\", \"fallback-placements\", \"placement\", \"transition\", \"persistent\"]);\n    };\n  }\n}));\nvar Cascader = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"cascader.vue\"]]);\nexport { Cascader as default };","map":{"version":3,"names":["name","COMPONENT_NAME","popperOptions","modifiers","enabled","phase","fn","_ref2","state","modifiersData","placement","includes","arrow","x","requires","attrs","useAttrs","inputInitialHeight","pressDeleteCount","nsCascader","useNamespace","nsInput","_useLocale","useLocale","t","_useFormItem","useFormItem","form","formItem","_useEmptyValues","useEmptyValues","props","valueOnClear","_useComposition","useComposition","afterComposition","event","_a","text","target","value","handleInput","isComposing","handleComposition","tooltipRef","ref","input","tagWrapper","cascaderPanelRef","suggestionPanel","popperVisible","inputHover","filtering","filterFocus","inputValue","searchInputValue","presentTags","allPresentTags","suggestions","cascaderStyle","computed","style","isDisabled","disabled","inputPlaceholder","placeholder","currentPlaceholder","length","realSize","useFormSize","tagSize","multiple","readonly","filterable","searchKeyword","checkedNodes","clearBtnVisible","clearable","presentText","showAllLevels","separator","nodes","calcText","validateState","checkedValue","get","cloneDeep","modelValue","set","val","emit","UPDATE_MODEL_EVENT","CHANGE_EVENT","validateEvent","validate","err","debugWarn","cascaderKls","b","m","is","cascaderIconKls","e","inputClass","contentRef","_b","popperRef","togglePopperVisible","visible","_c","setAttribute","concat","updatePopperPosition","nextTick","scrollToExpandingNode","syncPresentTextValue","updatePopper","hideSuggestionPanel","genTag","node","key","uid","hitState","closable","isCollapseTag","deleteTag","tag","doCheck","calculateCheckedValue","valueByOption","calculatePresentTags","tags","allTags","forEach","push","slice","maxCollapseTags","rest","restCount","collapseTags","calculateSuggestions","filterMethod","res","getFlattedNodes","checkStrictly","filter","focusFirstNode","firstNode","$el","querySelector","focus","click","updateStyle","inputInner","tagWrapperEl","suggestionPanelEl","isClient","suggestionList","minWidth","offsetWidth","offsetHeight","height","Math","max","getCheckedNodes","leafOnly","handleExpandChange","handleKeyDown","code","EVENT_CODE","enter","numpadEnter","down","preventDefault","esc","stopPropagation","tab","handleClear","clearCheckedNodes","handleSuggestionClick","checked","handleCheckChange","handleSuggestionKeyDown","up","distance","focusNode","getSibling","handleDelete","lastTag","handleFocus","el","className","handleBlur","handleFilter","debounce","passed","beforeFilter","isPromise","then","getInputInnerHeight","Number","parseFloat","useCssVar","cssVarName","watch","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","stop","immediate","onMounted","inputInnerHeight","useResizeObserver","expose","_ctx","_cache","openBlock","createBlock","unref","ElTooltip","ref_key","teleported","popperClass","fallbackPlacements","transition","namespace","effect","pure","persistent","onHide","withCtx","withDirectives","createElementBlock"],"sources":["../../../../../../packages/components/cascader/src/cascader.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"tooltipRef\"\n    :visible=\"popperVisible\"\n    :teleported=\"teleported\"\n    :popper-class=\"[nsCascader.e('dropdown'), popperClass]\"\n    :popper-options=\"popperOptions\"\n    :fallback-placements=\"fallbackPlacements\"\n    :stop-popper-mouse-event=\"false\"\n    :gpu-acceleration=\"false\"\n    :placement=\"placement\"\n    :transition=\"`${nsCascader.namespace.value}-zoom-in-top`\"\n    effect=\"light\"\n    pure\n    :persistent=\"persistent\"\n    @hide=\"hideSuggestionPanel\"\n  >\n    <template #default>\n      <div\n        v-clickoutside:[contentRef]=\"() => togglePopperVisible(false)\"\n        :class=\"cascaderKls\"\n        :style=\"cascaderStyle\"\n        @click=\"() => togglePopperVisible(readonly ? undefined : true)\"\n        @keydown=\"handleKeyDown\"\n        @mouseenter=\"inputHover = true\"\n        @mouseleave=\"inputHover = false\"\n      >\n        <el-input\n          ref=\"input\"\n          v-model=\"inputValue\"\n          :placeholder=\"currentPlaceholder\"\n          :readonly=\"readonly\"\n          :disabled=\"isDisabled\"\n          :validate-event=\"false\"\n          :size=\"realSize\"\n          :class=\"inputClass\"\n          :tabindex=\"multiple && filterable && !isDisabled ? -1 : undefined\"\n          @compositionstart=\"handleComposition\"\n          @compositionupdate=\"handleComposition\"\n          @compositionend=\"handleComposition\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @input=\"handleInput\"\n        >\n          <template #suffix>\n            <el-icon\n              v-if=\"clearBtnVisible\"\n              key=\"clear\"\n              :class=\"[nsInput.e('icon'), 'icon-circle-close']\"\n              @click.stop=\"handleClear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-else\n              key=\"arrow-down\"\n              :class=\"cascaderIconKls\"\n              @click.stop=\"togglePopperVisible()\"\n            >\n              <arrow-down />\n            </el-icon>\n          </template>\n        </el-input>\n\n        <div\n          v-if=\"multiple\"\n          ref=\"tagWrapper\"\n          :class=\"[\n            nsCascader.e('tags'),\n            nsCascader.is('validate', Boolean(validateState)),\n          ]\"\n        >\n          <el-tag\n            v-for=\"tag in presentTags\"\n            :key=\"tag.key\"\n            :type=\"tagType\"\n            :size=\"tagSize\"\n            :effect=\"tagEffect\"\n            :hit=\"tag.hitState\"\n            :closable=\"tag.closable\"\n            disable-transitions\n            @close=\"deleteTag(tag)\"\n          >\n            <template v-if=\"tag.isCollapseTag === false\">\n              <span>{{ tag.text }}</span>\n            </template>\n            <template v-else>\n              <el-tooltip\n                :disabled=\"popperVisible || !collapseTagsTooltip\"\n                :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n                placement=\"bottom\"\n                effect=\"light\"\n              >\n                <template #default>\n                  <span>{{ tag.text }}</span>\n                </template>\n                <template #content>\n                  <div :class=\"nsCascader.e('collapse-tags')\">\n                    <div\n                      v-for=\"(tag2, idx) in allPresentTags.slice(\n                        maxCollapseTags\n                      )\"\n                      :key=\"idx\"\n                      :class=\"nsCascader.e('collapse-tag')\"\n                    >\n                      <el-tag\n                        :key=\"tag2.key\"\n                        class=\"in-tooltip\"\n                        :type=\"tagType\"\n                        :size=\"tagSize\"\n                        :effect=\"tagEffect\"\n                        :hit=\"tag2.hitState\"\n                        :closable=\"tag2.closable\"\n                        disable-transitions\n                        @close=\"deleteTag(tag2)\"\n                      >\n                        <span>{{ tag2.text }}</span>\n                      </el-tag>\n                    </div>\n                  </div>\n                </template>\n              </el-tooltip>\n            </template>\n          </el-tag>\n          <input\n            v-if=\"filterable && !isDisabled\"\n            v-model=\"searchInputValue\"\n            type=\"text\"\n            :class=\"nsCascader.e('search-input')\"\n            :placeholder=\"presentText ? '' : inputPlaceholder\"\n            @input=\"(e) => handleInput(searchInputValue, e as KeyboardEvent)\"\n            @click.stop=\"togglePopperVisible(true)\"\n            @keydown.delete=\"handleDelete\"\n            @compositionstart=\"handleComposition\"\n            @compositionupdate=\"handleComposition\"\n            @compositionend=\"handleComposition\"\n            @focus=\"handleFocus\"\n            @blur=\"handleBlur\"\n          />\n        </div>\n      </div>\n    </template>\n\n    <template #content>\n      <el-cascader-panel\n        v-show=\"!filtering\"\n        ref=\"cascaderPanelRef\"\n        v-model=\"checkedValue\"\n        :options=\"options\"\n        :props=\"props.props\"\n        :border=\"false\"\n        :render-label=\"$slots.default\"\n        @expand-change=\"handleExpandChange\"\n        @close=\"$nextTick(() => togglePopperVisible(false))\"\n      >\n        <template #empty>\n          <slot name=\"empty\" />\n        </template>\n      </el-cascader-panel>\n      <el-scrollbar\n        v-if=\"filterable\"\n        v-show=\"filtering\"\n        ref=\"suggestionPanel\"\n        tag=\"ul\"\n        :class=\"nsCascader.e('suggestion-panel')\"\n        :view-class=\"nsCascader.e('suggestion-list')\"\n        @keydown=\"handleSuggestionKeyDown\"\n      >\n        <template v-if=\"suggestions.length\">\n          <li\n            v-for=\"item in suggestions\"\n            :key=\"item.uid\"\n            :class=\"[\n              nsCascader.e('suggestion-item'),\n              nsCascader.is('checked', item.checked),\n            ]\"\n            :tabindex=\"-1\"\n            @click=\"handleSuggestionClick(item)\"\n          >\n            <span>{{ item.text }}</span>\n            <el-icon v-if=\"item.checked\">\n              <check />\n            </el-icon>\n          </li>\n        </template>\n        <slot v-else name=\"empty\">\n          <li :class=\"nsCascader.e('empty-text')\">\n            {{ t('el.cascader.noMatch') }}\n          </li>\n        </slot>\n      </el-scrollbar>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, onMounted, ref, useAttrs, watch } from 'vue'\nimport { cloneDeep, debounce } from 'lodash-unified'\nimport { useCssVar, useResizeObserver } from '@vueuse/core'\nimport {\n  debugWarn,\n  focusNode,\n  getSibling,\n  isClient,\n  isPromise,\n} from '@element-plus/utils'\nimport ElCascaderPanel from '@element-plus/components/cascader-panel'\nimport ElInput from '@element-plus/components/input'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTag from '@element-plus/components/tag'\nimport ElIcon from '@element-plus/components/icon'\nimport { useFormItem, useFormSize } from '@element-plus/components/form'\nimport { ClickOutside as vClickoutside } from '@element-plus/directives'\nimport {\n  useComposition,\n  useEmptyValues,\n  useLocale,\n  useNamespace,\n} from '@element-plus/hooks'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { ArrowDown, Check, CircleClose } from '@element-plus/icons-vue'\nimport { cascaderEmits, cascaderProps } from './cascader'\n\nimport type { Options } from '@element-plus/components/popper'\nimport type { ComputedRef, Ref, StyleValue } from 'vue'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\nimport type { InputInstance } from '@element-plus/components/input'\nimport type { ScrollbarInstance } from '@element-plus/components/scrollbar'\nimport type {\n  CascaderNode,\n  CascaderPanelInstance,\n  CascaderValue,\n  Tag,\n} from '@element-plus/components/cascader-panel'\n\nconst popperOptions: Partial<Options> = {\n  modifiers: [\n    {\n      name: 'arrowPosition',\n      enabled: true,\n      phase: 'main',\n      fn: ({ state }) => {\n        const { modifiersData, placement } = state as any\n        if (['right', 'left', 'bottom', 'top'].includes(placement)) return\n        modifiersData.arrow.x = 35\n      },\n      requires: ['arrow'],\n    },\n  ],\n}\nconst COMPONENT_NAME = 'ElCascader'\n\ndefineOptions({\n  name: COMPONENT_NAME,\n})\n\nconst props = defineProps(cascaderProps)\nconst emit = defineEmits(cascaderEmits)\nconst attrs = useAttrs()\n\nlet inputInitialHeight = 0\nlet pressDeleteCount = 0\n\nconst nsCascader = useNamespace('cascader')\nconst nsInput = useNamespace('input')\n\nconst { t } = useLocale()\nconst { form, formItem } = useFormItem()\nconst { valueOnClear } = useEmptyValues(props)\nconst { isComposing, handleComposition } = useComposition({\n  afterComposition(event) {\n    const text = (event.target as HTMLInputElement)?.value\n    handleInput(text)\n  },\n})\n\nconst tooltipRef: Ref<TooltipInstance | null> = ref(null)\nconst input: Ref<InputInstance | null> = ref(null)\nconst tagWrapper = ref(null)\nconst cascaderPanelRef: Ref<CascaderPanelInstance | null> = ref(null)\nconst suggestionPanel: Ref<ScrollbarInstance | null> = ref(null)\nconst popperVisible = ref(false)\nconst inputHover = ref(false)\nconst filtering = ref(false)\nconst filterFocus = ref(false)\nconst inputValue = ref('')\nconst searchInputValue = ref('')\nconst presentTags: Ref<Tag[]> = ref([])\nconst allPresentTags: Ref<Tag[]> = ref([])\nconst suggestions: Ref<CascaderNode[]> = ref([])\n\nconst cascaderStyle = computed<StyleValue>(() => {\n  return attrs.style as StyleValue\n})\n\nconst isDisabled = computed(() => props.disabled || form?.disabled)\nconst inputPlaceholder = computed(\n  () => props.placeholder || t('el.cascader.placeholder')\n)\nconst currentPlaceholder = computed(() =>\n  searchInputValue.value || presentTags.value.length > 0 || isComposing.value\n    ? ''\n    : inputPlaceholder.value\n)\nconst realSize = useFormSize()\nconst tagSize = computed(() =>\n  realSize.value === 'small' ? 'small' : 'default'\n)\nconst multiple = computed(() => !!props.props.multiple)\nconst readonly = computed(() => !props.filterable || multiple.value)\nconst searchKeyword = computed(() =>\n  multiple.value ? searchInputValue.value : inputValue.value\n)\nconst checkedNodes: ComputedRef<CascaderNode[]> = computed(\n  () => cascaderPanelRef.value?.checkedNodes || []\n)\nconst clearBtnVisible = computed(() => {\n  if (\n    !props.clearable ||\n    isDisabled.value ||\n    filtering.value ||\n    !inputHover.value\n  )\n    return false\n\n  return !!checkedNodes.value.length\n})\nconst presentText = computed(() => {\n  const { showAllLevels, separator } = props\n  const nodes = checkedNodes.value\n  return nodes.length\n    ? multiple.value\n      ? ''\n      : nodes[0].calcText(showAllLevels, separator)\n    : ''\n})\n\nconst validateState = computed(() => formItem?.validateState || '')\n\nconst checkedValue = computed<CascaderValue>({\n  get() {\n    return cloneDeep(props.modelValue) as CascaderValue\n  },\n  set(val) {\n    // https://github.com/element-plus/element-plus/issues/17647\n    const value = val ?? valueOnClear.value\n    emit(UPDATE_MODEL_EVENT, value)\n    emit(CHANGE_EVENT, value)\n    if (props.validateEvent) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  },\n})\n\nconst cascaderKls = computed(() => {\n  return [\n    nsCascader.b(),\n    nsCascader.m(realSize.value),\n    nsCascader.is('disabled', isDisabled.value),\n    attrs.class,\n  ]\n})\n\nconst cascaderIconKls = computed(() => {\n  return [\n    nsInput.e('icon'),\n    'icon-arrow-down',\n    nsCascader.is('reverse', popperVisible.value),\n  ]\n})\n\nconst inputClass = computed(() => {\n  return nsCascader.is('focus', popperVisible.value || filterFocus.value)\n})\n\nconst contentRef = computed(() => {\n  return tooltipRef.value?.popperRef?.contentRef\n})\n\nconst togglePopperVisible = (visible?: boolean) => {\n  if (isDisabled.value) return\n\n  visible = visible ?? !popperVisible.value\n\n  if (visible !== popperVisible.value) {\n    popperVisible.value = visible\n    input.value?.input?.setAttribute('aria-expanded', `${visible}`)\n\n    if (visible) {\n      updatePopperPosition()\n      nextTick(cascaderPanelRef.value?.scrollToExpandingNode)\n    } else if (props.filterable) {\n      syncPresentTextValue()\n    }\n\n    emit('visibleChange', visible)\n  }\n}\n\nconst updatePopperPosition = () => {\n  nextTick(() => {\n    tooltipRef.value?.updatePopper()\n  })\n}\nconst hideSuggestionPanel = () => {\n  filtering.value = false\n}\n\nconst genTag = (node: CascaderNode): Tag => {\n  const { showAllLevels, separator } = props\n  return {\n    node,\n    key: node.uid,\n    text: node.calcText(showAllLevels, separator),\n    hitState: false,\n    closable: !isDisabled.value && !node.isDisabled,\n    isCollapseTag: false,\n  }\n}\n\nconst deleteTag = (tag: Tag) => {\n  const node = tag.node as CascaderNode\n  node.doCheck(false)\n  cascaderPanelRef.value?.calculateCheckedValue()\n  emit('removeTag', node.valueByOption)\n}\n\nconst calculatePresentTags = () => {\n  if (!multiple.value) return\n\n  const nodes = checkedNodes.value\n  const tags: Tag[] = []\n\n  const allTags: Tag[] = []\n  nodes.forEach((node) => allTags.push(genTag(node)))\n  allPresentTags.value = allTags\n\n  if (nodes.length) {\n    nodes\n      .slice(0, props.maxCollapseTags)\n      .forEach((node) => tags.push(genTag(node)))\n    const rest = nodes.slice(props.maxCollapseTags)\n    const restCount = rest.length\n\n    if (restCount) {\n      if (props.collapseTags) {\n        tags.push({\n          key: -1,\n          text: `+ ${restCount}`,\n          closable: false,\n          isCollapseTag: true,\n        })\n      } else {\n        rest.forEach((node) => tags.push(genTag(node)))\n      }\n    }\n  }\n\n  presentTags.value = tags\n}\n\nconst calculateSuggestions = () => {\n  const { filterMethod, showAllLevels, separator } = props\n  const res = cascaderPanelRef.value\n    ?.getFlattedNodes(!props.props.checkStrictly)\n    ?.filter((node) => {\n      if (node.isDisabled) return false\n      node.calcText(showAllLevels, separator)\n      return filterMethod(node, searchKeyword.value)\n    })\n\n  if (multiple.value) {\n    presentTags.value.forEach((tag) => {\n      tag.hitState = false\n    })\n    allPresentTags.value.forEach((tag) => {\n      tag.hitState = false\n    })\n  }\n\n  filtering.value = true\n  suggestions.value = res!\n  updatePopperPosition()\n}\n\nconst focusFirstNode = () => {\n  let firstNode!: HTMLElement\n\n  if (filtering.value && suggestionPanel.value) {\n    firstNode = suggestionPanel.value.$el.querySelector(\n      `.${nsCascader.e('suggestion-item')}`\n    )\n  } else {\n    firstNode = cascaderPanelRef.value?.$el.querySelector(\n      `.${nsCascader.b('node')}[tabindex=\"-1\"]`\n    )\n  }\n\n  if (firstNode) {\n    firstNode.focus()\n    !filtering.value && firstNode.click()\n  }\n}\n\nconst updateStyle = () => {\n  const inputInner = input.value?.input\n  const tagWrapperEl = tagWrapper.value\n  const suggestionPanelEl = suggestionPanel.value?.$el\n\n  if (!isClient || !inputInner) return\n\n  if (suggestionPanelEl) {\n    const suggestionList = suggestionPanelEl.querySelector(\n      `.${nsCascader.e('suggestion-list')}`\n    )\n    suggestionList.style.minWidth = `${inputInner.offsetWidth}px`\n  }\n\n  if (tagWrapperEl) {\n    const { offsetHeight } = tagWrapperEl\n    // 2 is el-input__wrapper padding\n    const height =\n      presentTags.value.length > 0\n        ? `${Math.max(offsetHeight, inputInitialHeight) - 2}px`\n        : `${inputInitialHeight}px`\n    inputInner.style.height = height\n    updatePopperPosition()\n  }\n}\n\nconst getCheckedNodes = (leafOnly: boolean) => {\n  return cascaderPanelRef.value?.getCheckedNodes(leafOnly)\n}\n\nconst handleExpandChange = (value: CascaderValue) => {\n  updatePopperPosition()\n  emit('expandChange', value)\n}\n\nconst handleKeyDown = (e: KeyboardEvent) => {\n  if (isComposing.value) return\n\n  switch (e.code) {\n    case EVENT_CODE.enter:\n    case EVENT_CODE.numpadEnter:\n      togglePopperVisible()\n      break\n    case EVENT_CODE.down:\n      togglePopperVisible(true)\n      nextTick(focusFirstNode)\n      e.preventDefault()\n      break\n    case EVENT_CODE.esc:\n      if (popperVisible.value === true) {\n        e.preventDefault()\n        e.stopPropagation()\n        togglePopperVisible(false)\n      }\n      break\n    case EVENT_CODE.tab:\n      togglePopperVisible(false)\n      break\n  }\n}\n\nconst handleClear = () => {\n  cascaderPanelRef.value?.clearCheckedNodes()\n  if (!popperVisible.value && props.filterable) {\n    syncPresentTextValue()\n  }\n  togglePopperVisible(false)\n  emit('clear')\n}\n\nconst syncPresentTextValue = () => {\n  const { value } = presentText\n  inputValue.value = value\n  searchInputValue.value = value\n}\n\nconst handleSuggestionClick = (node: CascaderNode) => {\n  const { checked } = node\n\n  if (multiple.value) {\n    cascaderPanelRef.value?.handleCheckChange(node, !checked, false)\n  } else {\n    !checked && cascaderPanelRef.value?.handleCheckChange(node, true, false)\n    togglePopperVisible(false)\n  }\n}\n\nconst handleSuggestionKeyDown = (e: KeyboardEvent) => {\n  const target = e.target as HTMLElement\n  const { code } = e\n\n  switch (code) {\n    case EVENT_CODE.up:\n    case EVENT_CODE.down: {\n      const distance = code === EVENT_CODE.up ? -1 : 1\n      focusNode(\n        getSibling(\n          target,\n          distance,\n          `.${nsCascader.e('suggestion-item')}[tabindex=\"-1\"]`\n        ) as HTMLElement\n      )\n      break\n    }\n    case EVENT_CODE.enter:\n    case EVENT_CODE.numpadEnter:\n      target.click()\n      break\n  }\n}\n\nconst handleDelete = () => {\n  const tags = presentTags.value\n  const lastTag = tags[tags.length - 1]\n  pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1\n\n  if (!lastTag || !pressDeleteCount || (props.collapseTags && tags.length > 1))\n    return\n\n  if (lastTag.hitState) {\n    deleteTag(lastTag)\n  } else {\n    lastTag.hitState = true\n  }\n}\n\nconst handleFocus = (e: FocusEvent) => {\n  const el = e.target as HTMLInputElement\n  const name = nsCascader.e('search-input')\n  if (el.className === name) {\n    filterFocus.value = true\n  }\n  emit('focus', e)\n}\n\nconst handleBlur = (e: FocusEvent) => {\n  filterFocus.value = false\n  emit('blur', e)\n}\n\nconst handleFilter = debounce(() => {\n  const { value } = searchKeyword\n\n  if (!value) return\n\n  const passed = props.beforeFilter(value)\n\n  if (isPromise(passed)) {\n    passed.then(calculateSuggestions).catch(() => {\n      /* prevent log error */\n    })\n  } else if (passed !== false) {\n    calculateSuggestions()\n  } else {\n    hideSuggestionPanel()\n  }\n}, props.debounce)\n\nconst handleInput = (val: string, e?: KeyboardEvent) => {\n  !popperVisible.value && togglePopperVisible(true)\n\n  if (e?.isComposing) return\n\n  val ? handleFilter() : hideSuggestionPanel()\n}\n\nconst getInputInnerHeight = (inputInner: HTMLElement): number =>\n  Number.parseFloat(\n    useCssVar(nsInput.cssVarName('input-height'), inputInner).value\n  ) - 2\n\nwatch(filtering, updatePopperPosition)\n\nwatch(\n  [checkedNodes, isDisabled, () => props.collapseTags],\n  calculatePresentTags\n)\n\nwatch(presentTags, () => {\n  nextTick(() => updateStyle())\n})\n\nwatch(realSize, async () => {\n  await nextTick()\n  const inputInner = input.value!.input!\n  inputInitialHeight = getInputInnerHeight(inputInner) || inputInitialHeight\n  updateStyle()\n})\n\nwatch(presentText, syncPresentTextValue, { immediate: true })\n\nonMounted(() => {\n  const inputInner = input.value!.input!\n\n  const inputInnerHeight = getInputInnerHeight(inputInner)\n\n  inputInitialHeight = inputInner.offsetHeight || inputInnerHeight\n  useResizeObserver(inputInner, updateStyle)\n})\n\ndefineExpose({\n  /**\n   * @description get an array of currently selected node,(leafOnly) whether only return the leaf checked nodes, default is `false`\n   */\n  getCheckedNodes,\n  /**\n   * @description cascader panel ref\n   */\n  cascaderPanelRef,\n  /**\n   * @description toggle the visible of popper\n   */\n  togglePopperVisible,\n  /**\n   * @description cascader content ref\n   */\n  contentRef,\n  /**\n   * @description selected content text\n   */\n  presentText,\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}