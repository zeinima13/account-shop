{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { defineComponent, getCurrentInstance, inject, toRef, computed, reactive, onMounted, onBeforeUnmount, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, withCtx, renderSlot, createElementVNode, Fragment } from 'vue';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport useMenu from './use-menu.mjs';\nimport { menuItemProps, menuItemEmits } from './menu-item.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nvar COMPONENT_NAME = \"ElMenuItem\";\nvar _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElTooltip: ElTooltip\n  },\n  props: menuItemProps,\n  emits: menuItemEmits,\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var instance = getCurrentInstance();\n    var rootMenu = inject(\"rootMenu\");\n    var nsMenu = useNamespace(\"menu\");\n    var nsMenuItem = useNamespace(\"menu-item\");\n    if (!rootMenu) throwError(COMPONENT_NAME, \"can not inject root menu\");\n    var _useMenu = useMenu(instance, toRef(props, \"index\")),\n      parentMenu = _useMenu.parentMenu,\n      indexPath = _useMenu.indexPath;\n    var subMenu = inject(\"subMenu:\".concat(parentMenu.value.uid));\n    if (!subMenu) throwError(COMPONENT_NAME, \"can not inject sub menu\");\n    var active = computed(function () {\n      return props.index === rootMenu.activeIndex;\n    });\n    var item = reactive({\n      index: props.index,\n      indexPath: indexPath,\n      active: active\n    });\n    var handleClick = function handleClick() {\n      if (!props.disabled) {\n        rootMenu.handleMenuItemClick({\n          index: props.index,\n          indexPath: indexPath.value,\n          route: props.route\n        });\n        emit(\"click\", item);\n      }\n    };\n    onMounted(function () {\n      subMenu.addSubMenu(item);\n      rootMenu.addMenuItem(item);\n    });\n    onBeforeUnmount(function () {\n      subMenu.removeSubMenu(item);\n      rootMenu.removeMenuItem(item);\n    });\n    return {\n      parentMenu: parentMenu,\n      rootMenu: rootMenu,\n      active: active,\n      nsMenu: nsMenu,\n      nsMenuItem: nsMenuItem,\n      handleClick: handleClick\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_tooltip = resolveComponent(\"el-tooltip\");\n  return openBlock(), createElementBlock(\"li\", {\n    \"class\": normalizeClass([_ctx.nsMenuItem.b(), _ctx.nsMenuItem.is(\"active\", _ctx.active), _ctx.nsMenuItem.is(\"disabled\", _ctx.disabled)]),\n    role: \"menuitem\",\n    tabindex: \"-1\",\n    onClick: _ctx.handleClick\n  }, [_ctx.parentMenu.type.name === \"ElMenu\" && _ctx.rootMenu.props.collapse && _ctx.$slots.title ? (openBlock(), createBlock(_component_el_tooltip, {\n    key: 0,\n    effect: _ctx.rootMenu.props.popperEffect,\n    placement: \"right\",\n    \"fallback-placements\": [\"left\"],\n    persistent: \"\"\n  }, {\n    content: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"title\")];\n    }),\n    \"default\": withCtx(function () {\n      return [createElementVNode(\"div\", {\n        \"class\": normalizeClass(_ctx.nsMenu.be(\"tooltip\", \"trigger\"))\n      }, [renderSlot(_ctx.$slots, \"default\")], 2)];\n    }),\n    _: 3\n  }, 8, [\"effect\"])) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [renderSlot(_ctx.$slots, \"default\"), renderSlot(_ctx.$slots, \"title\")], 64))], 10, [\"onClick\"]);\n}\nvar MenuItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"menu-item.vue\"]]);\nexport { MenuItem as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}