{"ast":null,"code":"import \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { computed, watch } from 'vue';\nimport { CHECKED_CHANGE_EVENT } from '../transfer-panel.mjs';\nimport { usePropsAlias } from './use-props-alias.mjs';\nimport { isFunction } from '@vue/shared';\nvar useCheck = function useCheck(props, panelState, emit) {\n  var propsAlias = usePropsAlias(props);\n  var filteredData = computed(function () {\n    return props.data.filter(function (item) {\n      if (isFunction(props.filterMethod)) {\n        return props.filterMethod(panelState.query, item);\n      } else {\n        var label = String(item[propsAlias.value.label] || item[propsAlias.value.key]);\n        return label.toLowerCase().includes(panelState.query.toLowerCase());\n      }\n    });\n  });\n  var checkableData = computed(function () {\n    return filteredData.value.filter(function (item) {\n      return !item[propsAlias.value.disabled];\n    });\n  });\n  var checkedSummary = computed(function () {\n    var checkedLength = panelState.checked.length;\n    var dataLength = props.data.length;\n    var _props$format = props.format,\n      noChecked = _props$format.noChecked,\n      hasChecked = _props$format.hasChecked;\n    if (noChecked && hasChecked) {\n      return checkedLength > 0 ? hasChecked.replace(/\\${checked}/g, checkedLength.toString()).replace(/\\${total}/g, dataLength.toString()) : noChecked.replace(/\\${total}/g, dataLength.toString());\n    } else {\n      return \"\".concat(checkedLength, \"/\").concat(dataLength);\n    }\n  });\n  var isIndeterminate = computed(function () {\n    var checkedLength = panelState.checked.length;\n    return checkedLength > 0 && checkedLength < checkableData.value.length;\n  });\n  var updateAllChecked = function updateAllChecked() {\n    var checkableDataKeys = checkableData.value.map(function (item) {\n      return item[propsAlias.value.key];\n    });\n    panelState.allChecked = checkableDataKeys.length > 0 && checkableDataKeys.every(function (item) {\n      return panelState.checked.includes(item);\n    });\n  };\n  var handleAllCheckedChange = function handleAllCheckedChange(value) {\n    panelState.checked = value ? checkableData.value.map(function (item) {\n      return item[propsAlias.value.key];\n    }) : [];\n  };\n  watch(function () {\n    return panelState.checked;\n  }, function (val, oldVal) {\n    updateAllChecked();\n    if (panelState.checkChangeByUser) {\n      var movedKeys = val.concat(oldVal).filter(function (v) {\n        return !val.includes(v) || !oldVal.includes(v);\n      });\n      emit(CHECKED_CHANGE_EVENT, val, movedKeys);\n    } else {\n      emit(CHECKED_CHANGE_EVENT, val);\n      panelState.checkChangeByUser = true;\n    }\n  });\n  watch(checkableData, function () {\n    updateAllChecked();\n  });\n  watch(function () {\n    return props.data;\n  }, function () {\n    var checked = [];\n    var filteredDataKeys = filteredData.value.map(function (item) {\n      return item[propsAlias.value.key];\n    });\n    panelState.checked.forEach(function (item) {\n      if (filteredDataKeys.includes(item)) {\n        checked.push(item);\n      }\n    });\n    panelState.checkChangeByUser = false;\n    panelState.checked = checked;\n  });\n  watch(function () {\n    return props.defaultChecked;\n  }, function (val, oldVal) {\n    if (oldVal && val.length === oldVal.length && val.every(function (item) {\n      return oldVal.includes(item);\n    })) return;\n    var checked = [];\n    var checkableDataKeys = checkableData.value.map(function (item) {\n      return item[propsAlias.value.key];\n    });\n    val.forEach(function (item) {\n      if (checkableDataKeys.includes(item)) {\n        checked.push(item);\n      }\n    });\n    panelState.checkChangeByUser = false;\n    panelState.checked = checked;\n  }, {\n    immediate: true\n  });\n  return {\n    filteredData: filteredData,\n    checkableData: checkableData,\n    checkedSummary: checkedSummary,\n    isIndeterminate: isIndeterminate,\n    updateAllChecked: updateAllChecked,\n    handleAllCheckedChange: handleAllCheckedChange\n  };\n};\nexport { useCheck };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}