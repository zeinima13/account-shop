{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { defineComponent, ref, computed, watch, nextTick, openBlock, createElementBlock, unref, normalizeClass, createElementVNode, Fragment, renderList, withKeys, withModifiers, createVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport { basicYearTableProps } from '../props/basic-year-table.mjs';\nimport { getValidDateOfYear } from '../utils.mjs';\nimport ElDatePickerCell from './basic-cell-render.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { castArray } from '../../../../utils/arrays.mjs';\nimport { rangeArr } from '../../../time-picker/src/utils.mjs';\nimport { hasClass } from '../../../../utils/dom/style.mjs';\nvar _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"basic-year-table\",\n  props: basicYearTableProps,\n  emits: [\"changerange\", \"pick\", \"select\"],\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var datesInYear = function datesInYear(year, lang2) {\n      var firstDay = dayjs(String(year)).locale(lang2).startOf(\"year\");\n      var lastDay = firstDay.endOf(\"year\");\n      var numOfDays = lastDay.dayOfYear();\n      return rangeArr(numOfDays).map(function (n) {\n        return firstDay.add(n, \"day\").toDate();\n      });\n    };\n    var ns = useNamespace(\"year-table\");\n    var _useLocale = useLocale(),\n      t = _useLocale.t,\n      lang = _useLocale.lang;\n    var tbodyRef = ref();\n    var currentCellRef = ref();\n    var startYear = computed(function () {\n      return Math.floor(props.date.year() / 10) * 10;\n    });\n    var tableRows = ref([[], [], []]);\n    var lastRow = ref();\n    var lastColumn = ref();\n    var rows = computed(function () {\n      var _a;\n      var rows2 = tableRows.value;\n      var now = dayjs().locale(lang.value).startOf(\"year\");\n      for (var i = 0; i < 3; i++) {\n        var row = rows2[i];\n        for (var j = 0; j < 4; j++) {\n          if (i * 4 + j >= 10) {\n            break;\n          }\n          var cell = row[j];\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: \"normal\",\n              inRange: false,\n              start: false,\n              end: false,\n              text: -1,\n              disabled: false\n            };\n          }\n          cell.type = \"normal\";\n          var index = i * 4 + j + startYear.value;\n          var calTime = dayjs().year(index);\n          var calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate || null;\n          cell.inRange = !!(props.minDate && calTime.isSameOrAfter(props.minDate, \"year\") && calEndDate && calTime.isSameOrBefore(calEndDate, \"year\")) || !!(props.minDate && calTime.isSameOrBefore(props.minDate, \"year\") && calEndDate && calTime.isSameOrAfter(calEndDate, \"year\"));\n          if ((_a = props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {\n            cell.start = !!(calEndDate && calTime.isSame(calEndDate, \"year\"));\n            cell.end = !!(props.minDate && calTime.isSame(props.minDate, \"year\"));\n          } else {\n            cell.start = !!(props.minDate && calTime.isSame(props.minDate, \"year\"));\n            cell.end = !!(calEndDate && calTime.isSame(calEndDate, \"year\"));\n          }\n          var isToday = now.isSame(calTime);\n          if (isToday) {\n            cell.type = \"today\";\n          }\n          cell.text = index;\n          var cellDate = calTime.toDate();\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate) || false;\n          row[j] = cell;\n        }\n      }\n      return rows2;\n    });\n    var focus = function focus() {\n      var _a;\n      (_a = currentCellRef.value) == null ? void 0 : _a.focus();\n    };\n    var getCellKls = function getCellKls(cell) {\n      var kls = {};\n      var today = dayjs().locale(lang.value);\n      var year = cell.text;\n      kls.disabled = props.disabledDate ? datesInYear(year, lang.value).every(props.disabledDate) : false;\n      kls.today = today.year() === year;\n      kls.current = castArray(props.parsedValue).findIndex(function (d) {\n        return d.year() === year;\n      }) >= 0;\n      if (cell.inRange) {\n        kls[\"in-range\"] = true;\n        if (cell.start) {\n          kls[\"start-date\"] = true;\n        }\n        if (cell.end) {\n          kls[\"end-date\"] = true;\n        }\n      }\n      return kls;\n    };\n    var isSelectedCell = function isSelectedCell(cell) {\n      var year = cell.text;\n      return castArray(props.date).findIndex(function (date) {\n        return date.year() === year;\n      }) >= 0;\n    };\n    var handleYearTableClick = function handleYearTableClick(event) {\n      var _a;\n      var target = (_a = event.target) == null ? void 0 : _a.closest(\"td\");\n      if (!target || !target.textContent || hasClass(target, \"disabled\")) return;\n      var column = target.cellIndex;\n      var row = target.parentNode.rowIndex;\n      var selectedYear = row * 4 + column + startYear.value;\n      var newDate = dayjs().year(selectedYear);\n      if (props.selectionMode === \"range\") {\n        if (!props.rangeState.selecting) {\n          emit(\"pick\", {\n            minDate: newDate,\n            maxDate: null\n          });\n          emit(\"select\", true);\n        } else {\n          if (props.minDate && newDate >= props.minDate) {\n            emit(\"pick\", {\n              minDate: props.minDate,\n              maxDate: newDate\n            });\n          } else {\n            emit(\"pick\", {\n              minDate: newDate,\n              maxDate: props.minDate\n            });\n          }\n          emit(\"select\", false);\n        }\n      } else if (props.selectionMode === \"years\") {\n        if (event.type === \"keydown\") {\n          emit(\"pick\", castArray(props.parsedValue), false);\n          return;\n        }\n        var vaildYear = getValidDateOfYear(newDate.startOf(\"year\"), lang.value, props.disabledDate);\n        var newValue = hasClass(target, \"current\") ? castArray(props.parsedValue).filter(function (d) {\n          return (d == null ? void 0 : d.year()) !== selectedYear;\n        }) : castArray(props.parsedValue).concat([vaildYear]);\n        emit(\"pick\", newValue);\n      } else {\n        emit(\"pick\", selectedYear);\n      }\n    };\n    var handleMouseMove = function handleMouseMove(event) {\n      var _a;\n      if (!props.rangeState.selecting) return;\n      var target = (_a = event.target) == null ? void 0 : _a.closest(\"td\");\n      if (!target) return;\n      var row = target.parentNode.rowIndex;\n      var column = target.cellIndex;\n      if (rows.value[row][column].disabled) return;\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row;\n        lastColumn.value = column;\n        emit(\"changerange\", {\n          selecting: true,\n          endDate: dayjs().year(startYear.value).add(row * 4 + column, \"year\")\n        });\n      }\n    };\n    watch(function () {\n      return props.date;\n    }, /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _a, _b;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!((_a = tbodyRef.value) == null ? void 0 : _a.contains(document.activeElement))) {\n              _context.next = 4;\n              break;\n            }\n            _context.next = 3;\n            return nextTick();\n          case 3:\n            (_b = currentCellRef.value) == null ? void 0 : _b.focus();\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    })));\n    expose({\n      focus: focus\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"table\", {\n        role: \"grid\",\n        \"aria-label\": unref(t)(\"el.datepicker.yearTablePrompt\"),\n        \"class\": normalizeClass(unref(ns).b()),\n        onClick: handleYearTableClick,\n        onMousemove: handleMouseMove\n      }, [createElementVNode(\"tbody\", {\n        ref_key: \"tbodyRef\",\n        ref: tbodyRef\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(rows), function (row, rowKey) {\n        return openBlock(), createElementBlock(\"tr\", {\n          key: rowKey\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, function (cell, cellKey) {\n          return openBlock(), createElementBlock(\"td\", {\n            key: \"\".concat(rowKey, \"_\").concat(cellKey),\n            ref_for: true,\n            ref: function ref(el) {\n              return isSelectedCell(cell) && (currentCellRef.value = el);\n            },\n            \"class\": normalizeClass([\"available\", getCellKls(cell)]),\n            \"aria-selected\": isSelectedCell(cell),\n            \"aria-label\": String(cell.text),\n            tabindex: isSelectedCell(cell) ? 0 : -1,\n            onKeydown: [withKeys(withModifiers(handleYearTableClick, [\"prevent\", \"stop\"]), [\"space\"]), withKeys(withModifiers(handleYearTableClick, [\"prevent\", \"stop\"]), [\"enter\"])]\n          }, [createVNode(unref(ElDatePickerCell), {\n            cell: cell\n          }, null, 8, [\"cell\"])], 42, [\"aria-selected\", \"aria-label\", \"tabindex\", \"onKeydown\"]);\n        }), 128))]);\n      }), 128))], 512)], 42, [\"aria-label\"]);\n    };\n  }\n});\nvar YearTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"basic-year-table.vue\"]]);\nexport { YearTable as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}