{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport { defineComponent, getCurrentInstance, inject, ref, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, renderSlot, createBlock, withCtx, resolveDynamicComponent, toDisplayString } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { breadcrumbKey } from './constants.mjs';\nimport { breadcrumbItemProps } from './breadcrumb-item2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar __default__ = defineComponent({\n  name: \"ElBreadcrumbItem\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: breadcrumbItemProps,\n  setup: function setup(__props) {\n    var props = __props;\n    var instance = getCurrentInstance();\n    var breadcrumbContext = inject(breadcrumbKey, void 0);\n    var ns = useNamespace(\"breadcrumb\");\n    var router = instance.appContext.config.globalProperties.$router;\n    var link = ref();\n    var onClick = function onClick() {\n      if (!props.to || !router) return;\n      props.replace ? router.replace(props.to) : router.push(props.to);\n    };\n    return function (_ctx, _cache) {\n      var _a, _b;\n      return openBlock(), createElementBlock(\"span\", {\n        \"class\": normalizeClass(unref(ns).e(\"item\"))\n      }, [createElementVNode(\"span\", {\n        ref_key: \"link\",\n        ref: link,\n        \"class\": normalizeClass([unref(ns).e(\"inner\"), unref(ns).is(\"link\", !!_ctx.to)]),\n        role: \"link\",\n        onClick: onClick\n      }, [renderSlot(_ctx.$slots, \"default\")], 2), ((_a = unref(breadcrumbContext)) == null ? void 0 : _a.separatorIcon) ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 0,\n        \"class\": normalizeClass(unref(ns).e(\"separator\"))\n      }, {\n        \"default\": withCtx(function () {\n          return [(openBlock(), createBlock(resolveDynamicComponent(unref(breadcrumbContext).separatorIcon)))];\n        }),\n        _: 1\n      }, 8, [\"class\"])) : (openBlock(), createElementBlock(\"span\", {\n        key: 1,\n        \"class\": normalizeClass(unref(ns).e(\"separator\")),\n        role: \"presentation\"\n      }, toDisplayString((_b = unref(breadcrumbContext)) == null ? void 0 : _b.separator), 3))], 2);\n    };\n  }\n}));\nvar BreadcrumbItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"breadcrumb-item.vue\"]]);\nexport { BreadcrumbItem as default };","map":{"version":3,"names":["name","instance","getCurrentInstance","breadcrumbContext","inject","breadcrumbKey","ns","useNamespace","router","appContext","config","globalProperties","$router","link","ref","onClick","props","to","replace","push"],"sources":["../../../../../../packages/components/breadcrumb/src/breadcrumb-item.vue"],"sourcesContent":["<template>\n  <span :class=\"ns.e('item')\">\n    <span\n      ref=\"link\"\n      :class=\"[ns.e('inner'), ns.is('link', !!to)]\"\n      role=\"link\"\n      @click=\"onClick\"\n    >\n      <slot />\n    </span>\n    <el-icon v-if=\"breadcrumbContext?.separatorIcon\" :class=\"ns.e('separator')\">\n      <component :is=\"breadcrumbContext.separatorIcon\" />\n    </el-icon>\n    <span v-else :class=\"ns.e('separator')\" role=\"presentation\">\n      {{ breadcrumbContext?.separator }}\n    </span>\n  </span>\n</template>\n\n<script lang=\"ts\" setup>\nimport { getCurrentInstance, inject, ref } from 'vue'\nimport ElIcon from '@element-plus/components/icon'\nimport { useNamespace } from '@element-plus/hooks'\nimport { breadcrumbKey } from './constants'\nimport { breadcrumbItemProps } from './breadcrumb-item'\n\nimport type { Router } from 'vue-router'\n\ndefineOptions({\n  name: 'ElBreadcrumbItem',\n})\n\nconst props = defineProps(breadcrumbItemProps)\n\nconst instance = getCurrentInstance()!\nconst breadcrumbContext = inject(breadcrumbKey, undefined)\nconst ns = useNamespace('breadcrumb')\n\nconst router = instance.appContext.config.globalProperties.$router as Router\n\nconst link = ref<HTMLSpanElement>()\n\nconst onClick = () => {\n  if (!props.to || !router) return\n  props.replace ? router.replace(props.to) : router.push(props.to)\n}\n</script>\n"],"mappings":";;;;;;;;;;iCA4Bc;EACZA,IAAM;AACR;;;;;IAIA,IAAMC,QAAA,GAAWC,kBAAmB;IAC9B,IAAAC,iBAAA,GAAoBC,MAAO,CAAAC,aAAA,EAAe,KAAS;IACnD,IAAAC,EAAA,GAAKC,YAAA,CAAa,YAAY;IAEpC,IAAMC,MAAS,GAAAP,QAAA,CAASQ,UAAW,CAAAC,MAAA,CAAOC,gBAAiB,CAAAC,OAAA;IAE3D,IAAMC,IAAA,GAAOC,GAAqB;IAElC,IAAMC,OAAA,GAAU,SAAVA,QAAA,EAAgB;MACpB,IAAI,CAACC,KAAA,CAAMC,EAAM,KAACT,MAAQ,EACpB;MACRQ,KAAA,CAAAE,OAAA,GAAAV,MAAA,CAAAU,OAAA,CAAAF,KAAA,CAAAC,EAAA,IAAAT,MAAA,CAAAW,IAAA,CAAAH,KAAA,CAAAC,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}