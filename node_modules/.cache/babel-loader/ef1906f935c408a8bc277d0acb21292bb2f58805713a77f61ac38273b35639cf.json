{"ast":null,"code":"import _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { defineComponent, ref, watch, computed, openBlock, createElementBlock, normalizeClass, unref, createVNode, withCtx, Fragment, renderList, createBlock } from 'vue';\nimport { isEqual } from 'lodash-unified';\nimport { ElSelect, ElOption } from '../../../select/index.mjs';\nimport { usePagination } from '../usePagination.mjs';\nimport { paginationSizesProps } from './sizes.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { isArray } from '@vue/shared';\nvar __default__ = defineComponent({\n  name: \"ElPaginationSizes\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: paginationSizesProps,\n  emits: [\"page-size-change\"],\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var _useLocale = useLocale(),\n      t = _useLocale.t;\n    var ns = useNamespace(\"pagination\");\n    var pagination = usePagination();\n    var innerPageSize = ref(props.pageSize);\n    watch(function () {\n      return props.pageSizes;\n    }, function (newVal, oldVal) {\n      if (isEqual(newVal, oldVal)) return;\n      if (isArray(newVal)) {\n        var pageSize = newVal.includes(props.pageSize) ? props.pageSize : props.pageSizes[0];\n        emit(\"page-size-change\", pageSize);\n      }\n    });\n    watch(function () {\n      return props.pageSize;\n    }, function (newVal) {\n      innerPageSize.value = newVal;\n    });\n    var innerPageSizes = computed(function () {\n      return props.pageSizes;\n    });\n    function handleChange(val) {\n      var _a;\n      if (val !== innerPageSize.value) {\n        innerPageSize.value = val;\n        (_a = pagination.handleSizeChange) == null ? void 0 : _a.call(pagination, Number(val));\n      }\n    }\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"span\", {\n        \"class\": normalizeClass(unref(ns).e(\"sizes\"))\n      }, [createVNode(unref(ElSelect), {\n        \"model-value\": innerPageSize.value,\n        disabled: _ctx.disabled,\n        \"popper-class\": _ctx.popperClass,\n        size: _ctx.size,\n        teleported: _ctx.teleported,\n        \"validate-event\": false,\n        \"append-to\": _ctx.appendSizeTo,\n        onChange: handleChange\n      }, {\n        \"default\": withCtx(function () {\n          return [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(innerPageSizes), function (item) {\n            return openBlock(), createBlock(unref(ElOption), {\n              key: item,\n              value: item,\n              label: item + unref(t)(\"el.pagination.pagesize\")\n            }, null, 8, [\"value\", \"label\"]);\n          }), 128))];\n        }),\n        _: 1\n      }, 8, [\"model-value\", \"disabled\", \"popper-class\", \"size\", \"teleported\", \"append-to\"])], 2);\n    };\n  }\n}));\nvar Sizes = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"sizes.vue\"]]);\nexport { Sizes as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}