{"ast":null,"code":"import _defineProperty from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, shallowRef, ref, computed, watch, onMounted, watchEffect, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, createElementVNode, renderSlot } from 'vue';\nimport { useWindowSize, useElementBounding, useEventListener } from '@vueuse/core';\nimport { affixProps, affixEmits } from './affix2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { getScrollContainer } from '../../../utils/dom/scroll.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nvar COMPONENT_NAME = \"ElAffix\";\nvar __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: affixProps,\n  emits: affixEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var ns = useNamespace(\"affix\");\n    var target = shallowRef();\n    var root = shallowRef();\n    var scrollContainer = shallowRef();\n    var _useWindowSize = useWindowSize(),\n      windowHeight = _useWindowSize.height;\n    var _useElementBounding = useElementBounding(root, {\n        windowScroll: false\n      }),\n      rootHeight = _useElementBounding.height,\n      rootWidth = _useElementBounding.width,\n      rootTop = _useElementBounding.top,\n      rootBottom = _useElementBounding.bottom,\n      updateRoot = _useElementBounding.update;\n    var targetRect = useElementBounding(target);\n    var fixed = ref(false);\n    var scrollTop = ref(0);\n    var transform = ref(0);\n    var rootStyle = computed(function () {\n      return {\n        height: fixed.value ? \"\".concat(rootHeight.value, \"px\") : \"\",\n        width: fixed.value ? \"\".concat(rootWidth.value, \"px\") : \"\"\n      };\n    });\n    var affixStyle = computed(function () {\n      if (!fixed.value) return {};\n      var offset = props.offset ? addUnit(props.offset) : 0;\n      return {\n        height: \"\".concat(rootHeight.value, \"px\"),\n        width: \"\".concat(rootWidth.value, \"px\"),\n        top: props.position === \"top\" ? offset : \"\",\n        bottom: props.position === \"bottom\" ? offset : \"\",\n        transform: transform.value ? \"translateY(\".concat(transform.value, \"px)\") : \"\",\n        zIndex: props.zIndex\n      };\n    });\n    var update = function update() {\n      if (!scrollContainer.value) return;\n      scrollTop.value = scrollContainer.value instanceof Window ? document.documentElement.scrollTop : scrollContainer.value.scrollTop || 0;\n      var position = props.position,\n        target2 = props.target,\n        offset = props.offset;\n      var rootHeightOffset = offset + rootHeight.value;\n      if (position === \"top\") {\n        if (target2) {\n          var difference = targetRect.bottom.value - rootHeightOffset;\n          fixed.value = offset > rootTop.value && targetRect.bottom.value > 0;\n          transform.value = difference < 0 ? difference : 0;\n        } else {\n          fixed.value = offset > rootTop.value;\n        }\n      } else if (target2) {\n        var _difference = windowHeight.value - targetRect.top.value - rootHeightOffset;\n        fixed.value = windowHeight.value - offset < rootBottom.value && windowHeight.value > targetRect.top.value;\n        transform.value = _difference < 0 ? -_difference : 0;\n      } else {\n        fixed.value = windowHeight.value - offset < rootBottom.value;\n      }\n    };\n    var handleScroll = function handleScroll() {\n      updateRoot();\n      emit(\"scroll\", {\n        scrollTop: scrollTop.value,\n        fixed: fixed.value\n      });\n    };\n    watch(fixed, function (val) {\n      return emit(\"change\", val);\n    });\n    onMounted(function () {\n      var _a;\n      if (props.target) {\n        target.value = (_a = document.querySelector(props.target)) != null ? _a : void 0;\n        if (!target.value) throwError(COMPONENT_NAME, \"Target does not exist: \".concat(props.target));\n      } else {\n        target.value = document.documentElement;\n      }\n      scrollContainer.value = getScrollContainer(root.value, true);\n      updateRoot();\n    });\n    useEventListener(scrollContainer, \"scroll\", handleScroll);\n    watchEffect(update);\n    expose({\n      update: update,\n      updateRoot: updateRoot\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"root\",\n        ref: root,\n        \"class\": normalizeClass(unref(ns).b()),\n        style: normalizeStyle(unref(rootStyle))\n      }, [createElementVNode(\"div\", {\n        \"class\": normalizeClass(_defineProperty({}, unref(ns).m(\"fixed\"), fixed.value)),\n        style: normalizeStyle(unref(affixStyle))\n      }, [renderSlot(_ctx.$slots, \"default\")], 6)], 6);\n    };\n  }\n}));\nvar Affix = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"affix.vue\"]]);\nexport { Affix as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}