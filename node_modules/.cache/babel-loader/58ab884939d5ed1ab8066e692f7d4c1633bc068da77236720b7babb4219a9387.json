{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { defineComponent, inject, ref, computed, watch, unref, createVNode, mergeProps, toRaw } from 'vue';\nimport { get } from 'lodash-unified';\nimport GroupItem from './group-item.mjs';\nimport OptionItem from './option-item.mjs';\nimport { useProps } from './useProps.mjs';\nimport { selectV2InjectionKey } from './token.mjs';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport DynamicSizeList from '../../virtual-list/src/components/dynamic-size-list.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { isObject } from '@vue/shared';\nvar props = {\n  loading: Boolean,\n  data: {\n    type: Array,\n    required: true\n  },\n  hoveringIndex: Number,\n  width: Number\n};\nvar ElSelectMenu = defineComponent({\n  name: \"ElSelectDropdown\",\n  props: props,\n  setup: function setup(props2, _ref) {\n    var slots = _ref.slots,\n      expose = _ref.expose;\n    var select = inject(selectV2InjectionKey);\n    var ns = useNamespace(\"select\");\n    var _useProps = useProps(select.props),\n      getLabel = _useProps.getLabel,\n      getValue = _useProps.getValue,\n      getDisabled = _useProps.getDisabled;\n    var cachedHeights = ref([]);\n    var listRef = ref();\n    var size = computed(function () {\n      return props2.data.length;\n    });\n    watch(function () {\n      return size.value;\n    }, function () {\n      var _a, _b;\n      (_b = (_a = select.tooltipRef.value).updatePopper) == null ? void 0 : _b.call(_a);\n    });\n    var isSized = computed(function () {\n      return isUndefined(select.props.estimatedOptionHeight);\n    });\n    var listProps = computed(function () {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight\n        };\n      }\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: function itemSize(idx) {\n          return cachedHeights.value[idx];\n        }\n      };\n    });\n    var contains = function contains() {\n      var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var target = arguments.length > 1 ? arguments[1] : undefined;\n      var valueKey = select.props.valueKey;\n      if (!isObject(target)) {\n        return arr.includes(target);\n      }\n      return arr && arr.some(function (item) {\n        return toRaw(get(item, valueKey)) === get(target, valueKey);\n      });\n    };\n    var isEqual = function isEqual(selected, target) {\n      if (!isObject(target)) {\n        return selected === target;\n      } else {\n        var valueKey = select.props.valueKey;\n        return get(selected, valueKey) === get(target, valueKey);\n      }\n    };\n    var isItemSelected = function isItemSelected(modelValue, target) {\n      if (select.props.multiple) {\n        return contains(modelValue, getValue(target));\n      }\n      return isEqual(modelValue, getValue(target));\n    };\n    var isItemDisabled = function isItemDisabled(modelValue, selected) {\n      var _select$props = select.props,\n        disabled = _select$props.disabled,\n        multiple = _select$props.multiple,\n        multipleLimit = _select$props.multipleLimit;\n      return disabled || !selected && (multiple ? multipleLimit > 0 && modelValue.length >= multipleLimit : false);\n    };\n    var isItemHovering = function isItemHovering(target) {\n      return props2.hoveringIndex === target;\n    };\n    var scrollToItem = function scrollToItem(index) {\n      var list = listRef.value;\n      if (list) {\n        list.scrollToItem(index);\n      }\n    };\n    var resetScrollTop = function resetScrollTop() {\n      var list = listRef.value;\n      if (list) {\n        list.resetScrollTop();\n      }\n    };\n    var exposed = {\n      listRef: listRef,\n      isSized: isSized,\n      isItemDisabled: isItemDisabled,\n      isItemHovering: isItemHovering,\n      isItemSelected: isItemSelected,\n      scrollToItem: scrollToItem,\n      resetScrollTop: resetScrollTop\n    };\n    expose(exposed);\n    var Item = function Item(itemProps) {\n      var index = itemProps.index,\n        data = itemProps.data,\n        style = itemProps.style;\n      var sized = unref(isSized);\n      var _unref = unref(listProps),\n        itemSize = _unref.itemSize,\n        estimatedSize = _unref.estimatedSize;\n      var modelValue = select.props.modelValue;\n      var onSelect = select.onSelect,\n        onHover = select.onHover;\n      var item = data[index];\n      if (item.type === \"Group\") {\n        return createVNode(GroupItem, {\n          \"item\": item,\n          \"style\": style,\n          \"height\": sized ? itemSize : estimatedSize\n        }, null);\n      }\n      var isSelected = isItemSelected(modelValue, item);\n      var isDisabled = isItemDisabled(modelValue, isSelected);\n      var isHovering = isItemHovering(index);\n      return createVNode(OptionItem, mergeProps(itemProps, {\n        \"selected\": isSelected,\n        \"disabled\": getDisabled(item) || isDisabled,\n        \"created\": !!item.created,\n        \"hovering\": isHovering,\n        \"item\": item,\n        \"onSelect\": onSelect,\n        \"onHover\": onHover\n      }), {\n        \"default\": function _default(props3) {\n          var _a;\n          return ((_a = slots[\"default\"]) == null ? void 0 : _a.call(slots, props3)) || createVNode(\"span\", null, [getLabel(item)]);\n        }\n      });\n    };\n    var onKeyboardNavigate = select.onKeyboardNavigate,\n      onKeyboardSelect = select.onKeyboardSelect;\n    var onForward = function onForward() {\n      onKeyboardNavigate(\"forward\");\n    };\n    var onBackward = function onBackward() {\n      onKeyboardNavigate(\"backward\");\n    };\n    var onKeydown = function onKeydown(e) {\n      var code = e.code;\n      var tab = EVENT_CODE.tab,\n        esc = EVENT_CODE.esc,\n        down = EVENT_CODE.down,\n        up = EVENT_CODE.up,\n        enter = EVENT_CODE.enter,\n        numpadEnter = EVENT_CODE.numpadEnter;\n      if (code !== tab) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      switch (code) {\n        case tab:\n        case esc:\n          break;\n        case down:\n          onForward();\n          break;\n        case up:\n          onBackward();\n          break;\n        case enter:\n        case numpadEnter:\n          onKeyboardSelect();\n          break;\n      }\n    };\n    return function () {\n      var _a, _b, _c, _d;\n      var data = props2.data,\n        width = props2.width;\n      var _select$props2 = select.props,\n        height = _select$props2.height,\n        multiple = _select$props2.multiple,\n        scrollbarAlwaysOn = _select$props2.scrollbarAlwaysOn;\n      var List = unref(isSized) ? FixedSizeList : DynamicSizeList;\n      return createVNode(\"div\", {\n        \"class\": [ns.b(\"dropdown\"), ns.is(\"multiple\", multiple)],\n        \"style\": {\n          width: \"\".concat(width, \"px\")\n        }\n      }, [(_a = slots.header) == null ? void 0 : _a.call(slots), ((_b = slots.loading) == null ? void 0 : _b.call(slots)) || ((_c = slots.empty) == null ? void 0 : _c.call(slots)) || createVNode(List, mergeProps({\n        \"ref\": listRef\n      }, unref(listProps), {\n        \"className\": ns.be(\"dropdown\", \"list\"),\n        \"scrollbarAlwaysOn\": scrollbarAlwaysOn,\n        \"data\": data,\n        \"height\": height,\n        \"width\": width,\n        \"total\": data.length,\n        \"onKeydown\": onKeydown\n      }), {\n        \"default\": function _default(props3) {\n          return createVNode(Item, props3, null);\n        }\n      }), (_d = slots.footer) == null ? void 0 : _d.call(slots)]);\n    };\n  }\n});\nexport { ElSelectMenu as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}