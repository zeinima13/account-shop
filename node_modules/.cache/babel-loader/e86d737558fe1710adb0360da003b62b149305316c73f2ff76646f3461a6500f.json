{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.number.parse-int.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\nvar parseTime = function parseTime(time) {\n  var values = (time || \"\").split(\":\");\n  if (values.length >= 2) {\n    var hours = Number.parseInt(values[0], 10);\n    var minutes = Number.parseInt(values[1], 10);\n    var timeUpper = time.toUpperCase();\n    if (timeUpper.includes(\"AM\") && hours === 12) {\n      hours = 0;\n    } else if (timeUpper.includes(\"PM\") && hours !== 12) {\n      hours += 12;\n    }\n    return {\n      hours: hours,\n      minutes: minutes\n    };\n  }\n  return null;\n};\nvar compareTime = function compareTime(time1, time2) {\n  var value1 = parseTime(time1);\n  if (!value1) return -1;\n  var value2 = parseTime(time2);\n  if (!value2) return -1;\n  var minutes1 = value1.minutes + value1.hours * 60;\n  var minutes2 = value2.minutes + value2.hours * 60;\n  if (minutes1 === minutes2) {\n    return 0;\n  }\n  return minutes1 > minutes2 ? 1 : -1;\n};\nvar padTime = function padTime(time) {\n  return \"\".concat(time).padStart(2, \"0\");\n};\nvar formatTime = function formatTime(time) {\n  return \"\".concat(padTime(time.hours), \":\").concat(padTime(time.minutes));\n};\nvar nextTime = function nextTime(time, step) {\n  var timeValue = parseTime(time);\n  if (!timeValue) return \"\";\n  var stepValue = parseTime(step);\n  if (!stepValue) return \"\";\n  var next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes\n  };\n  next.minutes += stepValue.minutes;\n  next.hours += stepValue.hours;\n  next.hours += Math.floor(next.minutes / 60);\n  next.minutes = next.minutes % 60;\n  return formatTime(next);\n};\nexport { compareTime, formatTime, nextTime, padTime, parseTime };","map":{"version":3,"names":["parseTime","time","values","split","length","hours","Number","parseInt","minutes","timeUpper","toUpperCase","includes","compareTime","time1","time2","value1","value2","minutes1","minutes2","padTime","concat","padStart","formatTime","nextTime","step","timeValue","stepValue","next","Math","floor"],"sources":["../../../../../../packages/components/time-select/src/utils.ts"],"sourcesContent":["interface Time {\n  hours: number\n  minutes: number\n}\n\nexport const parseTime = (time: string): null | Time => {\n  const values = (time || '').split(':')\n  if (values.length >= 2) {\n    let hours = Number.parseInt(values[0], 10)\n    const minutes = Number.parseInt(values[1], 10)\n    const timeUpper = time.toUpperCase()\n    if (timeUpper.includes('AM') && hours === 12) {\n      hours = 0\n    } else if (timeUpper.includes('PM') && hours !== 12) {\n      hours += 12\n    }\n    return {\n      hours,\n      minutes,\n    }\n  }\n\n  return null\n}\n\nexport const compareTime = (time1: string, time2: string): number => {\n  const value1 = parseTime(time1)\n  if (!value1) return -1\n  const value2 = parseTime(time2)\n  if (!value2) return -1\n  const minutes1 = value1.minutes + value1.hours * 60\n  const minutes2 = value2.minutes + value2.hours * 60\n  if (minutes1 === minutes2) {\n    return 0\n  }\n  return minutes1 > minutes2 ? 1 : -1\n}\n\nexport const padTime = (time: number | string) => {\n  return `${time}`.padStart(2, '0')\n}\nexport const formatTime = (time: Time): string => {\n  return `${padTime(time.hours)}:${padTime(time.minutes)}`\n}\n\nexport const nextTime = (time: string, step: string): string => {\n  const timeValue = parseTime(time)\n  if (!timeValue) return ''\n\n  const stepValue = parseTime(step)\n  if (!stepValue) return ''\n\n  const next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes,\n  }\n  next.minutes += stepValue.minutes\n  next.hours += stepValue.hours\n  next.hours += Math.floor(next.minutes / 60)\n  next.minutes = next.minutes % 60\n  return formatTime(next)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}