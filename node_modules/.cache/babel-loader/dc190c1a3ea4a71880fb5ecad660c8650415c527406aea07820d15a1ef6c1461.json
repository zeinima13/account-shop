{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.parse-float.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { defineComponent, useAttrs, ref, computed, watch, nextTick, onMounted, openBlock, createBlock, unref, withCtx, withDirectives, createElementBlock, normalizeClass, normalizeStyle, createVNode, withModifiers, Fragment, renderList, toDisplayString, createElementVNode, withKeys, vModelText, createCommentVNode, isRef, renderSlot, vShow } from 'vue';\nimport { cloneDeep, debounce } from 'lodash-unified';\nimport { useCssVar, useResizeObserver, isClient } from '@vueuse/core';\nimport { ElCascaderPanel } from '../../cascader-panel/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { CircleClose, ArrowDown, Check } from '@element-plus/icons-vue';\nimport { cascaderProps, cascaderEmits } from './cascader.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useFormItem } from '../../form/src/hooks/use-form-item.mjs';\nimport { useEmptyValues } from '../../../hooks/use-empty-values/index.mjs';\nimport { useComposition } from '../../../hooks/use-composition/index.mjs';\nimport { useFormSize } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isPromise } from '@vue/shared';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\nvar COMPONENT_NAME = \"ElCascader\";\nvar __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: cascaderProps,\n  emits: cascaderEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var popperOptions = {\n      modifiers: [{\n        name: \"arrowPosition\",\n        enabled: true,\n        phase: \"main\",\n        fn: function fn(_ref2) {\n          var state = _ref2.state;\n          var modifiersData = state.modifiersData,\n            placement = state.placement;\n          if ([\"right\", \"left\", \"bottom\", \"top\"].includes(placement)) return;\n          modifiersData.arrow.x = 35;\n        },\n        requires: [\"arrow\"]\n      }]\n    };\n    var attrs = useAttrs();\n    var inputInitialHeight = 0;\n    var pressDeleteCount = 0;\n    var nsCascader = useNamespace(\"cascader\");\n    var nsInput = useNamespace(\"input\");\n    var _useLocale = useLocale(),\n      t = _useLocale.t;\n    var _useFormItem = useFormItem(),\n      form = _useFormItem.form,\n      formItem = _useFormItem.formItem;\n    var _useEmptyValues = useEmptyValues(props),\n      valueOnClear = _useEmptyValues.valueOnClear;\n    var _useComposition = useComposition({\n        afterComposition: function afterComposition(event) {\n          var _a;\n          var text = (_a = event.target) == null ? void 0 : _a.value;\n          handleInput(text);\n        }\n      }),\n      isComposing = _useComposition.isComposing,\n      handleComposition = _useComposition.handleComposition;\n    var tooltipRef = ref(null);\n    var input = ref(null);\n    var tagWrapper = ref(null);\n    var cascaderPanelRef = ref(null);\n    var suggestionPanel = ref(null);\n    var popperVisible = ref(false);\n    var inputHover = ref(false);\n    var filtering = ref(false);\n    var filterFocus = ref(false);\n    var inputValue = ref(\"\");\n    var searchInputValue = ref(\"\");\n    var presentTags = ref([]);\n    var allPresentTags = ref([]);\n    var suggestions = ref([]);\n    var cascaderStyle = computed(function () {\n      return attrs.style;\n    });\n    var isDisabled = computed(function () {\n      return props.disabled || (form == null ? void 0 : form.disabled);\n    });\n    var inputPlaceholder = computed(function () {\n      return props.placeholder || t(\"el.cascader.placeholder\");\n    });\n    var currentPlaceholder = computed(function () {\n      return searchInputValue.value || presentTags.value.length > 0 || isComposing.value ? \"\" : inputPlaceholder.value;\n    });\n    var realSize = useFormSize();\n    var tagSize = computed(function () {\n      return realSize.value === \"small\" ? \"small\" : \"default\";\n    });\n    var multiple = computed(function () {\n      return !!props.props.multiple;\n    });\n    var readonly = computed(function () {\n      return !props.filterable || multiple.value;\n    });\n    var searchKeyword = computed(function () {\n      return multiple.value ? searchInputValue.value : inputValue.value;\n    });\n    var checkedNodes = computed(function () {\n      var _a;\n      return ((_a = cascaderPanelRef.value) == null ? void 0 : _a.checkedNodes) || [];\n    });\n    var clearBtnVisible = computed(function () {\n      if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value) return false;\n      return !!checkedNodes.value.length;\n    });\n    var presentText = computed(function () {\n      var showAllLevels = props.showAllLevels,\n        separator = props.separator;\n      var nodes = checkedNodes.value;\n      return nodes.length ? multiple.value ? \"\" : nodes[0].calcText(showAllLevels, separator) : \"\";\n    });\n    var validateState = computed(function () {\n      return (formItem == null ? void 0 : formItem.validateState) || \"\";\n    });\n    var checkedValue = computed({\n      get: function get() {\n        return cloneDeep(props.modelValue);\n      },\n      set: function set(val) {\n        var value = val != null ? val : valueOnClear.value;\n        emit(UPDATE_MODEL_EVENT, value);\n        emit(CHANGE_EVENT, value);\n        if (props.validateEvent) {\n          formItem == null ? void 0 : formItem.validate(\"change\")[\"catch\"](function (err) {\n            return debugWarn(err);\n          });\n        }\n      }\n    });\n    var cascaderKls = computed(function () {\n      return [nsCascader.b(), nsCascader.m(realSize.value), nsCascader.is(\"disabled\", isDisabled.value), attrs[\"class\"]];\n    });\n    var cascaderIconKls = computed(function () {\n      return [nsInput.e(\"icon\"), \"icon-arrow-down\", nsCascader.is(\"reverse\", popperVisible.value)];\n    });\n    var inputClass = computed(function () {\n      return nsCascader.is(\"focus\", popperVisible.value || filterFocus.value);\n    });\n    var contentRef = computed(function () {\n      var _a, _b;\n      return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    var togglePopperVisible = function togglePopperVisible(visible) {\n      var _a, _b, _c;\n      if (isDisabled.value) return;\n      visible = visible != null ? visible : !popperVisible.value;\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible;\n        (_b = (_a = input.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute(\"aria-expanded\", \"\".concat(visible));\n        if (visible) {\n          updatePopperPosition();\n          nextTick((_c = cascaderPanelRef.value) == null ? void 0 : _c.scrollToExpandingNode);\n        } else if (props.filterable) {\n          syncPresentTextValue();\n        }\n        emit(\"visibleChange\", visible);\n      }\n    };\n    var updatePopperPosition = function updatePopperPosition() {\n      nextTick(function () {\n        var _a;\n        (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper();\n      });\n    };\n    var hideSuggestionPanel = function hideSuggestionPanel() {\n      filtering.value = false;\n    };\n    var genTag = function genTag(node) {\n      var showAllLevels = props.showAllLevels,\n        separator = props.separator;\n      return {\n        node: node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled,\n        isCollapseTag: false\n      };\n    };\n    var deleteTag = function deleteTag(tag) {\n      var _a;\n      var node = tag.node;\n      node.doCheck(false);\n      (_a = cascaderPanelRef.value) == null ? void 0 : _a.calculateCheckedValue();\n      emit(\"removeTag\", node.valueByOption);\n    };\n    var calculatePresentTags = function calculatePresentTags() {\n      if (!multiple.value) return;\n      var nodes = checkedNodes.value;\n      var tags = [];\n      var allTags = [];\n      nodes.forEach(function (node) {\n        return allTags.push(genTag(node));\n      });\n      allPresentTags.value = allTags;\n      if (nodes.length) {\n        nodes.slice(0, props.maxCollapseTags).forEach(function (node) {\n          return tags.push(genTag(node));\n        });\n        var rest = nodes.slice(props.maxCollapseTags);\n        var restCount = rest.length;\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: \"+ \".concat(restCount),\n              closable: false,\n              isCollapseTag: true\n            });\n          } else {\n            rest.forEach(function (node) {\n              return tags.push(genTag(node));\n            });\n          }\n        }\n      }\n      presentTags.value = tags;\n    };\n    var calculateSuggestions = function calculateSuggestions() {\n      var _a, _b;\n      var filterMethod = props.filterMethod,\n        showAllLevels = props.showAllLevels,\n        separator = props.separator;\n      var res = (_b = (_a = cascaderPanelRef.value) == null ? void 0 : _a.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter(function (node) {\n        if (node.isDisabled) return false;\n        node.calcText(showAllLevels, separator);\n        return filterMethod(node, searchKeyword.value);\n      });\n      if (multiple.value) {\n        presentTags.value.forEach(function (tag) {\n          tag.hitState = false;\n        });\n        allPresentTags.value.forEach(function (tag) {\n          tag.hitState = false;\n        });\n      }\n      filtering.value = true;\n      suggestions.value = res;\n      updatePopperPosition();\n    };\n    var focusFirstNode = function focusFirstNode() {\n      var _a;\n      var firstNode;\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(\".\".concat(nsCascader.e(\"suggestion-item\")));\n      } else {\n        firstNode = (_a = cascaderPanelRef.value) == null ? void 0 : _a.$el.querySelector(\".\".concat(nsCascader.b(\"node\"), \"[tabindex=\\\"-1\\\"]\"));\n      }\n      if (firstNode) {\n        firstNode.focus();\n        !filtering.value && firstNode.click();\n      }\n    };\n    var updateStyle = function updateStyle() {\n      var _a, _b;\n      var inputInner = (_a = input.value) == null ? void 0 : _a.input;\n      var tagWrapperEl = tagWrapper.value;\n      var suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;\n      if (!isClient || !inputInner) return;\n      if (suggestionPanelEl) {\n        var suggestionList = suggestionPanelEl.querySelector(\".\".concat(nsCascader.e(\"suggestion-list\")));\n        suggestionList.style.minWidth = \"\".concat(inputInner.offsetWidth, \"px\");\n      }\n      if (tagWrapperEl) {\n        var offsetHeight = tagWrapperEl.offsetHeight;\n        var height = presentTags.value.length > 0 ? \"\".concat(Math.max(offsetHeight, inputInitialHeight) - 2, \"px\") : \"\".concat(inputInitialHeight, \"px\");\n        inputInner.style.height = height;\n        updatePopperPosition();\n      }\n    };\n    var getCheckedNodes = function getCheckedNodes(leafOnly) {\n      var _a;\n      return (_a = cascaderPanelRef.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);\n    };\n    var handleExpandChange = function handleExpandChange(value) {\n      updatePopperPosition();\n      emit(\"expandChange\", value);\n    };\n    var handleKeyDown = function handleKeyDown(e) {\n      if (isComposing.value) return;\n      switch (e.code) {\n        case EVENT_CODE.enter:\n        case EVENT_CODE.numpadEnter:\n          togglePopperVisible();\n          break;\n        case EVENT_CODE.down:\n          togglePopperVisible(true);\n          nextTick(focusFirstNode);\n          e.preventDefault();\n          break;\n        case EVENT_CODE.esc:\n          if (popperVisible.value === true) {\n            e.preventDefault();\n            e.stopPropagation();\n            togglePopperVisible(false);\n          }\n          break;\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n    var handleClear = function handleClear() {\n      var _a;\n      (_a = cascaderPanelRef.value) == null ? void 0 : _a.clearCheckedNodes();\n      if (!popperVisible.value && props.filterable) {\n        syncPresentTextValue();\n      }\n      togglePopperVisible(false);\n      emit(\"clear\");\n    };\n    var syncPresentTextValue = function syncPresentTextValue() {\n      var value = presentText.value;\n      inputValue.value = value;\n      searchInputValue.value = value;\n    };\n    var handleSuggestionClick = function handleSuggestionClick(node) {\n      var _a, _b;\n      var checked = node.checked;\n      if (multiple.value) {\n        (_a = cascaderPanelRef.value) == null ? void 0 : _a.handleCheckChange(node, !checked, false);\n      } else {\n        !checked && ((_b = cascaderPanelRef.value) == null ? void 0 : _b.handleCheckChange(node, true, false));\n        togglePopperVisible(false);\n      }\n    };\n    var handleSuggestionKeyDown = function handleSuggestionKeyDown(e) {\n      var target = e.target;\n      var code = e.code;\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            var distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, \".\".concat(nsCascader.e(\"suggestion-item\"), \"[tabindex=\\\"-1\\\"]\")));\n            break;\n          }\n        case EVENT_CODE.enter:\n        case EVENT_CODE.numpadEnter:\n          target.click();\n          break;\n      }\n    };\n    var handleDelete = function handleDelete() {\n      var tags = presentTags.value;\n      var lastTag = tags[tags.length - 1];\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;\n      if (!lastTag || !pressDeleteCount || props.collapseTags && tags.length > 1) return;\n      if (lastTag.hitState) {\n        deleteTag(lastTag);\n      } else {\n        lastTag.hitState = true;\n      }\n    };\n    var handleFocus = function handleFocus(e) {\n      var el = e.target;\n      var name = nsCascader.e(\"search-input\");\n      if (el.className === name) {\n        filterFocus.value = true;\n      }\n      emit(\"focus\", e);\n    };\n    var handleBlur = function handleBlur(e) {\n      filterFocus.value = false;\n      emit(\"blur\", e);\n    };\n    var handleFilter = debounce(function () {\n      var value = searchKeyword.value;\n      if (!value) return;\n      var passed = props.beforeFilter(value);\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions)[\"catch\"](function () {});\n      } else if (passed !== false) {\n        calculateSuggestions();\n      } else {\n        hideSuggestionPanel();\n      }\n    }, props.debounce);\n    var handleInput = function handleInput(val, e) {\n      !popperVisible.value && togglePopperVisible(true);\n      if (e == null ? void 0 : e.isComposing) return;\n      val ? handleFilter() : hideSuggestionPanel();\n    };\n    var getInputInnerHeight = function getInputInnerHeight(inputInner) {\n      return Number.parseFloat(useCssVar(nsInput.cssVarName(\"input-height\"), inputInner).value) - 2;\n    };\n    watch(filtering, updatePopperPosition);\n    watch([checkedNodes, isDisabled, function () {\n      return props.collapseTags;\n    }], calculatePresentTags);\n    watch(presentTags, function () {\n      nextTick(function () {\n        return updateStyle();\n      });\n    });\n    watch(realSize, /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var inputInner;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return nextTick();\n          case 2:\n            inputInner = input.value.input;\n            inputInitialHeight = getInputInnerHeight(inputInner) || inputInitialHeight;\n            updateStyle();\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    })));\n    watch(presentText, syncPresentTextValue, {\n      immediate: true\n    });\n    onMounted(function () {\n      var inputInner = input.value.input;\n      var inputInnerHeight = getInputInnerHeight(inputInner);\n      inputInitialHeight = inputInner.offsetHeight || inputInnerHeight;\n      useResizeObserver(inputInner, updateStyle);\n    });\n    expose({\n      getCheckedNodes: getCheckedNodes,\n      cascaderPanelRef: cascaderPanelRef,\n      togglePopperVisible: togglePopperVisible,\n      contentRef: contentRef,\n      presentText: presentText\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"tooltipRef\",\n        ref: tooltipRef,\n        visible: popperVisible.value,\n        teleported: _ctx.teleported,\n        \"popper-class\": [unref(nsCascader).e(\"dropdown\"), _ctx.popperClass],\n        \"popper-options\": popperOptions,\n        \"fallback-placements\": _ctx.fallbackPlacements,\n        \"stop-popper-mouse-event\": false,\n        \"gpu-acceleration\": false,\n        placement: _ctx.placement,\n        transition: \"\".concat(unref(nsCascader).namespace.value, \"-zoom-in-top\"),\n        effect: \"light\",\n        pure: \"\",\n        persistent: _ctx.persistent,\n        onHide: hideSuggestionPanel\n      }, {\n        \"default\": withCtx(function () {\n          return [withDirectives((openBlock(), createElementBlock(\"div\", {\n            \"class\": normalizeClass(unref(cascaderKls)),\n            style: normalizeStyle(unref(cascaderStyle)),\n            onClick: function onClick() {\n              return togglePopperVisible(unref(readonly) ? void 0 : true);\n            },\n            onKeydown: handleKeyDown,\n            onMouseenter: function onMouseenter($event) {\n              return inputHover.value = true;\n            },\n            onMouseleave: function onMouseleave($event) {\n              return inputHover.value = false;\n            }\n          }, [createVNode(unref(ElInput), {\n            ref_key: \"input\",\n            ref: input,\n            modelValue: inputValue.value,\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return inputValue.value = $event;\n            },\n            placeholder: unref(currentPlaceholder),\n            readonly: unref(readonly),\n            disabled: unref(isDisabled),\n            \"validate-event\": false,\n            size: unref(realSize),\n            \"class\": normalizeClass(unref(inputClass)),\n            tabindex: unref(multiple) && _ctx.filterable && !unref(isDisabled) ? -1 : void 0,\n            onCompositionstart: unref(handleComposition),\n            onCompositionupdate: unref(handleComposition),\n            onCompositionend: unref(handleComposition),\n            onFocus: handleFocus,\n            onBlur: handleBlur,\n            onInput: handleInput\n          }, {\n            suffix: withCtx(function () {\n              return [unref(clearBtnVisible) ? (openBlock(), createBlock(unref(ElIcon), {\n                key: \"clear\",\n                \"class\": normalizeClass([unref(nsInput).e(\"icon\"), \"icon-circle-close\"]),\n                onClick: withModifiers(handleClear, [\"stop\"])\n              }, {\n                \"default\": withCtx(function () {\n                  return [createVNode(unref(CircleClose))];\n                }),\n                _: 1\n              }, 8, [\"class\", \"onClick\"])) : (openBlock(), createBlock(unref(ElIcon), {\n                key: \"arrow-down\",\n                \"class\": normalizeClass(unref(cascaderIconKls)),\n                onClick: withModifiers(function ($event) {\n                  return togglePopperVisible();\n                }, [\"stop\"])\n              }, {\n                \"default\": withCtx(function () {\n                  return [createVNode(unref(ArrowDown))];\n                }),\n                _: 1\n              }, 8, [\"class\", \"onClick\"]))];\n            }),\n            _: 1\n          }, 8, [\"modelValue\", \"onUpdate:modelValue\", \"placeholder\", \"readonly\", \"disabled\", \"size\", \"class\", \"tabindex\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\"]), unref(multiple) ? (openBlock(), createElementBlock(\"div\", {\n            key: 0,\n            ref_key: \"tagWrapper\",\n            ref: tagWrapper,\n            \"class\": normalizeClass([unref(nsCascader).e(\"tags\"), unref(nsCascader).is(\"validate\", Boolean(unref(validateState)))])\n          }, [(openBlock(true), createElementBlock(Fragment, null, renderList(presentTags.value, function (tag) {\n            return openBlock(), createBlock(unref(ElTag), {\n              key: tag.key,\n              type: _ctx.tagType,\n              size: unref(tagSize),\n              effect: _ctx.tagEffect,\n              hit: tag.hitState,\n              closable: tag.closable,\n              \"disable-transitions\": \"\",\n              onClose: function onClose($event) {\n                return deleteTag(tag);\n              }\n            }, {\n              \"default\": withCtx(function () {\n                return [tag.isCollapseTag === false ? (openBlock(), createElementBlock(\"span\", {\n                  key: 0\n                }, toDisplayString(tag.text), 1)) : (openBlock(), createBlock(unref(ElTooltip), {\n                  key: 1,\n                  disabled: popperVisible.value || !_ctx.collapseTagsTooltip,\n                  \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n                  placement: \"bottom\",\n                  effect: \"light\"\n                }, {\n                  \"default\": withCtx(function () {\n                    return [createElementVNode(\"span\", null, toDisplayString(tag.text), 1)];\n                  }),\n                  content: withCtx(function () {\n                    return [createElementVNode(\"div\", {\n                      \"class\": normalizeClass(unref(nsCascader).e(\"collapse-tags\"))\n                    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(allPresentTags.value.slice(_ctx.maxCollapseTags), function (tag2, idx) {\n                      return openBlock(), createElementBlock(\"div\", {\n                        key: idx,\n                        \"class\": normalizeClass(unref(nsCascader).e(\"collapse-tag\"))\n                      }, [(openBlock(), createBlock(unref(ElTag), {\n                        key: tag2.key,\n                        \"class\": \"in-tooltip\",\n                        type: _ctx.tagType,\n                        size: unref(tagSize),\n                        effect: _ctx.tagEffect,\n                        hit: tag2.hitState,\n                        closable: tag2.closable,\n                        \"disable-transitions\": \"\",\n                        onClose: function onClose($event) {\n                          return deleteTag(tag2);\n                        }\n                      }, {\n                        \"default\": withCtx(function () {\n                          return [createElementVNode(\"span\", null, toDisplayString(tag2.text), 1)];\n                        }),\n                        _: 2\n                      }, 1032, [\"type\", \"size\", \"effect\", \"hit\", \"closable\", \"onClose\"]))], 2);\n                    }), 128))], 2)];\n                  }),\n                  _: 2\n                }, 1032, [\"disabled\"]))];\n              }),\n              _: 2\n            }, 1032, [\"type\", \"size\", \"effect\", \"hit\", \"closable\", \"onClose\"]);\n          }), 128)), _ctx.filterable && !unref(isDisabled) ? withDirectives((openBlock(), createElementBlock(\"input\", {\n            key: 0,\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return searchInputValue.value = $event;\n            },\n            type: \"text\",\n            \"class\": normalizeClass(unref(nsCascader).e(\"search-input\")),\n            placeholder: unref(presentText) ? \"\" : unref(inputPlaceholder),\n            onInput: function onInput(e) {\n              return handleInput(searchInputValue.value, e);\n            },\n            onClick: withModifiers(function ($event) {\n              return togglePopperVisible(true);\n            }, [\"stop\"]),\n            onKeydown: withKeys(handleDelete, [\"delete\"]),\n            onCompositionstart: unref(handleComposition),\n            onCompositionupdate: unref(handleComposition),\n            onCompositionend: unref(handleComposition),\n            onFocus: handleFocus,\n            onBlur: handleBlur\n          }, null, 42, [\"onUpdate:modelValue\", \"placeholder\", \"onInput\", \"onClick\", \"onKeydown\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\"])), [[vModelText, searchInputValue.value]]) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true)], 46, [\"onClick\", \"onMouseenter\", \"onMouseleave\"])), [[unref(ClickOutside), function () {\n            return togglePopperVisible(false);\n          }, unref(contentRef)]])];\n        }),\n        content: withCtx(function () {\n          return [withDirectives(createVNode(unref(ElCascaderPanel), {\n            ref_key: \"cascaderPanelRef\",\n            ref: cascaderPanelRef,\n            modelValue: unref(checkedValue),\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return isRef(checkedValue) ? checkedValue.value = $event : null;\n            },\n            options: _ctx.options,\n            props: props.props,\n            border: false,\n            \"render-label\": _ctx.$slots[\"default\"],\n            onExpandChange: handleExpandChange,\n            onClose: function onClose($event) {\n              return _ctx.$nextTick(function () {\n                return togglePopperVisible(false);\n              });\n            }\n          }, {\n            empty: withCtx(function () {\n              return [renderSlot(_ctx.$slots, \"empty\")];\n            }),\n            _: 3\n          }, 8, [\"modelValue\", \"onUpdate:modelValue\", \"options\", \"props\", \"render-label\", \"onClose\"]), [[vShow, !filtering.value]]), _ctx.filterable ? withDirectives((openBlock(), createBlock(unref(ElScrollbar), {\n            key: 0,\n            ref_key: \"suggestionPanel\",\n            ref: suggestionPanel,\n            tag: \"ul\",\n            \"class\": normalizeClass(unref(nsCascader).e(\"suggestion-panel\")),\n            \"view-class\": unref(nsCascader).e(\"suggestion-list\"),\n            onKeydown: handleSuggestionKeyDown\n          }, {\n            \"default\": withCtx(function () {\n              return [suggestions.value.length ? (openBlock(true), createElementBlock(Fragment, {\n                key: 0\n              }, renderList(suggestions.value, function (item) {\n                return openBlock(), createElementBlock(\"li\", {\n                  key: item.uid,\n                  \"class\": normalizeClass([unref(nsCascader).e(\"suggestion-item\"), unref(nsCascader).is(\"checked\", item.checked)]),\n                  tabindex: -1,\n                  onClick: function onClick($event) {\n                    return handleSuggestionClick(item);\n                  }\n                }, [createElementVNode(\"span\", null, toDisplayString(item.text), 1), item.checked ? (openBlock(), createBlock(unref(ElIcon), {\n                  key: 0\n                }, {\n                  \"default\": withCtx(function () {\n                    return [createVNode(unref(Check))];\n                  }),\n                  _: 1\n                })) : createCommentVNode(\"v-if\", true)], 10, [\"onClick\"]);\n              }), 128)) : renderSlot(_ctx.$slots, \"empty\", {\n                key: 1\n              }, function () {\n                return [createElementVNode(\"li\", {\n                  \"class\": normalizeClass(unref(nsCascader).e(\"empty-text\"))\n                }, toDisplayString(unref(t)(\"el.cascader.noMatch\")), 3)];\n              })];\n            }),\n            _: 3\n          }, 8, [\"class\", \"view-class\"])), [[vShow, filtering.value]]) : createCommentVNode(\"v-if\", true)];\n        }),\n        _: 3\n      }, 8, [\"visible\", \"teleported\", \"popper-class\", \"fallback-placements\", \"placement\", \"transition\", \"persistent\"]);\n    };\n  }\n}));\nvar Cascader = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"cascader.vue\"]]);\nexport { Cascader as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}