{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { getCurrentInstance, ref, watchEffect, computed, unref, renderSlot, h, Comment } from 'vue';\nimport { cellForced, defaultRenderCell, treeCellPrefix, getDefaultClassName } from '../config.mjs';\nimport { parseWidth, parseMinWidth } from '../util.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { isUndefined } from '../../../../utils/types.mjs';\nimport { debugWarn } from '../../../../utils/error.mjs';\nimport { isArray } from '@vue/shared';\nfunction useRender(props, slots, owner) {\n  var instance = getCurrentInstance();\n  var columnId = ref(\"\");\n  var isSubColumn = ref(false);\n  var realAlign = ref();\n  var realHeaderAlign = ref();\n  var ns = useNamespace(\"table\");\n  watchEffect(function () {\n    realAlign.value = props.align ? \"is-\".concat(props.align) : null;\n    realAlign.value;\n  });\n  watchEffect(function () {\n    realHeaderAlign.value = props.headerAlign ? \"is-\".concat(props.headerAlign) : realAlign.value;\n    realHeaderAlign.value;\n  });\n  var columnOrTableParent = computed(function () {\n    var parent = instance.vnode.vParent || instance.parent;\n    while (parent && !parent.tableId && !parent.columnId) {\n      parent = parent.vnode.vParent || parent.parent;\n    }\n    return parent;\n  });\n  var hasTreeColumn = computed(function () {\n    var store = instance.parent.store;\n    if (!store) return false;\n    var treeData = store.states.treeData;\n    var treeDataValue = treeData.value;\n    return treeDataValue && Object.keys(treeDataValue).length > 0;\n  });\n  var realWidth = ref(parseWidth(props.width));\n  var realMinWidth = ref(parseMinWidth(props.minWidth));\n  var setColumnWidth = function setColumnWidth(column) {\n    if (realWidth.value) column.width = realWidth.value;\n    if (realMinWidth.value) {\n      column.minWidth = realMinWidth.value;\n    }\n    if (!realWidth.value && realMinWidth.value) {\n      column.width = void 0;\n    }\n    if (!column.minWidth) {\n      column.minWidth = 80;\n    }\n    column.realWidth = Number(isUndefined(column.width) ? column.minWidth : column.width);\n    return column;\n  };\n  var setColumnForcedProps = function setColumnForcedProps(column) {\n    var type = column.type;\n    var source = cellForced[type] || {};\n    Object.keys(source).forEach(function (prop) {\n      var value = source[prop];\n      if (prop !== \"className\" && !isUndefined(value)) {\n        column[prop] = value;\n      }\n    });\n    var className = getDefaultClassName(type);\n    if (className) {\n      var forceClass = \"\".concat(unref(ns.namespace), \"-\").concat(className);\n      column.className = column.className ? \"\".concat(column.className, \" \").concat(forceClass) : forceClass;\n    }\n    return column;\n  };\n  var checkSubColumn = function checkSubColumn(children) {\n    if (isArray(children)) {\n      children.forEach(function (child) {\n        return check(child);\n      });\n    } else {\n      check(children);\n    }\n    function check(item) {\n      var _a;\n      if (((_a = item == null ? void 0 : item.type) == null ? void 0 : _a.name) === \"ElTableColumn\") {\n        item.vParent = instance;\n      }\n    }\n  };\n  var setColumnRenders = function setColumnRenders(column) {\n    if (props.renderHeader) {\n      debugWarn(\"TableColumn\", \"Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.\");\n    } else if (column.type !== \"selection\") {\n      column.renderHeader = function (scope) {\n        instance.columnConfig.value[\"label\"];\n        return renderSlot(slots, \"header\", scope, function () {\n          return [column.label];\n        });\n      };\n    }\n    if (slots[\"filter-icon\"]) {\n      column.renderFilterIcon = function (scope) {\n        return renderSlot(slots, \"filter-icon\", scope);\n      };\n    }\n    var originRenderCell = column.renderCell;\n    if (column.type === \"expand\") {\n      column.renderCell = function (data) {\n        return h(\"div\", {\n          \"class\": \"cell\"\n        }, [originRenderCell(data)]);\n      };\n      owner.value.renderExpanded = function (data) {\n        return slots[\"default\"] ? slots[\"default\"](data) : slots[\"default\"];\n      };\n    } else {\n      originRenderCell = originRenderCell || defaultRenderCell;\n      column.renderCell = function (data) {\n        var children = null;\n        if (slots[\"default\"]) {\n          var vnodes = slots[\"default\"](data);\n          children = vnodes.some(function (v) {\n            return v.type !== Comment;\n          }) ? vnodes : originRenderCell(data);\n        } else {\n          children = originRenderCell(data);\n        }\n        var columns = owner.value.store.states.columns;\n        var firstUserColumnIndex = columns.value.findIndex(function (item) {\n          return item.type === \"default\";\n        });\n        var shouldCreatePlaceholder = hasTreeColumn.value && data.cellIndex === firstUserColumnIndex;\n        var prefix = treeCellPrefix(data, shouldCreatePlaceholder);\n        var props2 = {\n          \"class\": \"cell\",\n          style: {}\n        };\n        if (column.showOverflowTooltip) {\n          props2[\"class\"] = \"\".concat(props2[\"class\"], \" \").concat(unref(ns.namespace), \"-tooltip\");\n          props2.style = {\n            width: \"\".concat((data.column.realWidth || Number(data.column.width)) - 1, \"px\")\n          };\n        }\n        checkSubColumn(children);\n        return h(\"div\", props2, [prefix, children]);\n      };\n    }\n    return column;\n  };\n  var getPropsData = function getPropsData() {\n    for (var _len = arguments.length, propsKey = new Array(_len), _key = 0; _key < _len; _key++) {\n      propsKey[_key] = arguments[_key];\n    }\n    return propsKey.reduce(function (prev, cur) {\n      if (isArray(cur)) {\n        cur.forEach(function (key) {\n          prev[key] = props[key];\n        });\n      }\n      return prev;\n    }, {});\n  };\n  var getColumnElIndex = function getColumnElIndex(children, child) {\n    return Array.prototype.indexOf.call(children, child);\n  };\n  var updateColumnOrder = function updateColumnOrder() {\n    owner.value.store.commit(\"updateColumnOrder\", instance.columnConfig.value);\n  };\n  return {\n    columnId: columnId,\n    realAlign: realAlign,\n    isSubColumn: isSubColumn,\n    realHeaderAlign: realHeaderAlign,\n    columnOrTableParent: columnOrTableParent,\n    setColumnWidth: setColumnWidth,\n    setColumnForcedProps: setColumnForcedProps,\n    setColumnRenders: setColumnRenders,\n    getPropsData: getPropsData,\n    getColumnElIndex: getColumnElIndex,\n    updateColumnOrder: updateColumnOrder\n  };\n}\nexport { useRender as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}