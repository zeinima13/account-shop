{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { inject, computed, ref } from 'vue';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { addClass } from '../../../utils/dom/style.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nvar useDropdown = function useDropdown() {\n  var elDropdown = inject(\"elDropdown\", {});\n  var _elDropdownSize = computed(function () {\n    return elDropdown == null ? void 0 : elDropdown.dropdownSize;\n  });\n  return {\n    elDropdown: elDropdown,\n    _elDropdownSize: _elDropdownSize\n  };\n};\nvar initDropdownDomEvent = function initDropdownDomEvent(dropdownChildren, triggerElm, _instance) {\n  var ns = useNamespace(\"dropdown\");\n  var menuItems = ref(null);\n  var menuItemsArray = ref(null);\n  var dropdownElm = ref(null);\n  var listId = useId();\n  dropdownElm.value = dropdownChildren == null ? void 0 : dropdownChildren.subTree.el;\n  function removeTabindex() {\n    var _a;\n    triggerElm.setAttribute(\"tabindex\", \"-1\");\n    (_a = menuItemsArray.value) == null ? void 0 : _a.forEach(function (item) {\n      return item.setAttribute(\"tabindex\", \"-1\");\n    });\n  }\n  function resetTabindex(ele) {\n    removeTabindex();\n    ele == null ? void 0 : ele.setAttribute(\"tabindex\", \"0\");\n  }\n  function handleTriggerKeyDown(ev) {\n    var code = ev.code;\n    if ([EVENT_CODE.up, EVENT_CODE.down].includes(code)) {\n      removeTabindex();\n      resetTabindex(menuItems.value[0]);\n      menuItems.value[0].focus();\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else if ([EVENT_CODE.enter, EVENT_CODE.numpadEnter].includes(code)) {\n      _instance.handleClick();\n    } else if ([EVENT_CODE.tab, EVENT_CODE.esc].includes(code)) {\n      _instance.hide();\n    }\n  }\n  function handleItemKeyDown(ev) {\n    var code = ev.code;\n    var target = ev.target;\n    var currentIndex = menuItemsArray.value.indexOf(target);\n    var max = menuItemsArray.value.length - 1;\n    var nextIndex;\n    if ([EVENT_CODE.up, EVENT_CODE.down].includes(code)) {\n      if (code === EVENT_CODE.up) {\n        nextIndex = currentIndex !== 0 ? currentIndex - 1 : 0;\n      } else {\n        nextIndex = currentIndex < max ? currentIndex + 1 : max;\n      }\n      removeTabindex();\n      resetTabindex(menuItems.value[nextIndex]);\n      menuItems.value[nextIndex].focus();\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else if (code === EVENT_CODE.enter) {\n      triggerElmFocus();\n      target.click();\n      if (_instance.props.hideOnClick) {\n        _instance.hide();\n      }\n    } else if ([EVENT_CODE.tab, EVENT_CODE.esc].includes(code)) {\n      _instance.hide();\n      triggerElmFocus();\n    }\n  }\n  function initAria() {\n    dropdownElm.value.setAttribute(\"id\", listId.value);\n    triggerElm.setAttribute(\"aria-haspopup\", \"list\");\n    triggerElm.setAttribute(\"aria-controls\", listId.value);\n    if (!_instance.props.splitButton) {\n      triggerElm.setAttribute(\"role\", \"button\");\n      triggerElm.setAttribute(\"tabindex\", _instance.props.tabindex);\n      addClass(triggerElm, ns.b(\"selfdefine\"));\n    }\n  }\n  function initEvent() {\n    var _a;\n    triggerElm == null ? void 0 : triggerElm.addEventListener(\"keydown\", handleTriggerKeyDown);\n    (_a = dropdownElm.value) == null ? void 0 : _a.addEventListener(\"keydown\", handleItemKeyDown, true);\n  }\n  function initDomOperation() {\n    menuItems.value = dropdownElm.value.querySelectorAll(\"[tabindex='-1']\");\n    menuItemsArray.value = Array.from(menuItems.value);\n    initEvent();\n    initAria();\n  }\n  function triggerElmFocus() {\n    triggerElm.focus();\n  }\n  initDomOperation();\n};\nexport { initDropdownDomEvent, useDropdown };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}