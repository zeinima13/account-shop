{"ast":null,"code":"import _typeof from \"C:/Users/ASUS/CascadeProjects/account-shop/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport createGrid from '../builders/build-grid.mjs';\nimport { AUTO_ALIGNMENT, CENTERED_ALIGNMENT, END_ALIGNMENT, START_ALIGNMENT, SMART_ALIGNMENT } from '../defaults.mjs';\nimport { isNumber } from '../../../../utils/types.mjs';\nimport { throwError } from '../../../../utils/error.mjs';\nvar SCOPE = \"ElFixedSizeGrid\";\nvar FixedSizeGrid = createGrid({\n  name: \"ElFixedSizeGrid\",\n  getColumnPosition: function getColumnPosition(_ref, index) {\n    var columnWidth = _ref.columnWidth;\n    return [columnWidth, index * columnWidth];\n  },\n  getRowPosition: function getRowPosition(_ref2, index) {\n    var rowHeight = _ref2.rowHeight;\n    return [rowHeight, index * rowHeight];\n  },\n  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref3) {\n    var totalRow = _ref3.totalRow,\n      rowHeight = _ref3.rowHeight;\n    return rowHeight * totalRow;\n  },\n  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref4) {\n    var totalColumn = _ref4.totalColumn,\n      columnWidth = _ref4.columnWidth;\n    return columnWidth * totalColumn;\n  },\n  getColumnOffset: function getColumnOffset(_ref5, columnIndex, alignment, scrollLeft, _, scrollBarWidth) {\n    var totalColumn = _ref5.totalColumn,\n      columnWidth = _ref5.columnWidth,\n      width = _ref5.width;\n    width = Number(width);\n    var lastColumnOffset = Math.max(0, totalColumn * columnWidth - width);\n    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollBarWidth + columnWidth);\n    if (alignment === \"smart\") {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        alignment = AUTO_ALIGNMENT;\n      } else {\n        alignment = CENTERED_ALIGNMENT;\n      }\n    }\n    switch (alignment) {\n      case START_ALIGNMENT:\n        return maxOffset;\n      case END_ALIGNMENT:\n        return minOffset;\n      case CENTERED_ALIGNMENT:\n        {\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n          if (middleOffset < Math.ceil(width / 2)) {\n            return 0;\n          } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n            return lastColumnOffset;\n          } else {\n            return middleOffset;\n          }\n        }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getRowOffset: function getRowOffset(_ref6, rowIndex, align, scrollTop, _, scrollBarWidth) {\n    var rowHeight = _ref6.rowHeight,\n      height = _ref6.height,\n      totalRow = _ref6.totalRow;\n    height = Number(height);\n    var lastRowOffset = Math.max(0, totalRow * rowHeight - height);\n    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollBarWidth + rowHeight);\n    if (align === SMART_ALIGNMENT) {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = AUTO_ALIGNMENT;\n      } else {\n        align = CENTERED_ALIGNMENT;\n      }\n    }\n    switch (align) {\n      case START_ALIGNMENT:\n        return maxOffset;\n      case END_ALIGNMENT:\n        return minOffset;\n      case CENTERED_ALIGNMENT:\n        {\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n          if (middleOffset < Math.ceil(height / 2)) {\n            return 0;\n          } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n            return lastRowOffset;\n          } else {\n            return middleOffset;\n          }\n        }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref7, scrollLeft) {\n    var columnWidth = _ref7.columnWidth,\n      totalColumn = _ref7.totalColumn;\n    return Math.max(0, Math.min(totalColumn - 1, Math.floor(scrollLeft / columnWidth)));\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref8, startIndex, scrollLeft) {\n    var columnWidth = _ref8.columnWidth,\n      totalColumn = _ref8.totalColumn,\n      width = _ref8.width;\n    var left = startIndex * columnWidth;\n    var visibleColumnsCount = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(totalColumn - 1, startIndex + visibleColumnsCount - 1));\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref9, scrollTop) {\n    var rowHeight = _ref9.rowHeight,\n      totalRow = _ref9.totalRow;\n    return Math.max(0, Math.min(totalRow - 1, Math.floor(scrollTop / rowHeight)));\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref10, startIndex, scrollTop) {\n    var rowHeight = _ref10.rowHeight,\n      totalRow = _ref10.totalRow,\n      height = _ref10.height;\n    var top = startIndex * rowHeight;\n    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(totalRow - 1, startIndex + numVisibleRows - 1));\n  },\n  initCache: function initCache() {\n    return void 0;\n  },\n  clearCache: true,\n  validateProps: function validateProps(_ref11) {\n    var columnWidth = _ref11.columnWidth,\n      rowHeight = _ref11.rowHeight;\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!isNumber(columnWidth)) {\n        throwError(SCOPE, \"\\n          \\\"columnWidth\\\" must be passed as number,\\n            instead \".concat(_typeof(columnWidth), \" was given.\\n        \"));\n      }\n      if (!isNumber(rowHeight)) {\n        throwError(SCOPE, \"\\n          \\\"columnWidth\\\" must be passed as number,\\n            instead \".concat(_typeof(rowHeight), \" was given.\\n        \"));\n      }\n    }\n  }\n});\nexport { FixedSizeGrid as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}