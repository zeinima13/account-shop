{"ast":null,"code":"import { computed, unref, ref } from 'vue';\nimport { useZIndex } from '../../../../hooks/use-z-index/index.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { isNumber } from '../../../../utils/types.mjs';\nvar usePopperContentDOM = function usePopperContentDOM(props, _ref) {\n  var attributes = _ref.attributes,\n    styles = _ref.styles,\n    role = _ref.role;\n  var _useZIndex = useZIndex(),\n    nextZIndex = _useZIndex.nextZIndex;\n  var ns = useNamespace(\"popper\");\n  var contentAttrs = computed(function () {\n    return unref(attributes).popper;\n  });\n  var contentZIndex = ref(isNumber(props.zIndex) ? props.zIndex : nextZIndex());\n  var contentClass = computed(function () {\n    return [ns.b(), ns.is(\"pure\", props.pure), ns.is(props.effect), props.popperClass];\n  });\n  var contentStyle = computed(function () {\n    return [{\n      zIndex: unref(contentZIndex)\n    }, unref(styles).popper, props.popperStyle || {}];\n  });\n  var ariaModal = computed(function () {\n    return role.value === \"dialog\" ? \"false\" : void 0;\n  });\n  var arrowStyle = computed(function () {\n    return unref(styles).arrow || {};\n  });\n  var updateZIndex = function updateZIndex() {\n    contentZIndex.value = isNumber(props.zIndex) ? props.zIndex : nextZIndex();\n  };\n  return {\n    ariaModal: ariaModal,\n    arrowStyle: arrowStyle,\n    contentAttrs: contentAttrs,\n    contentClass: contentClass,\n    contentStyle: contentStyle,\n    contentZIndex: contentZIndex,\n    updateZIndex: updateZIndex\n  };\n};\nexport { usePopperContentDOM };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}